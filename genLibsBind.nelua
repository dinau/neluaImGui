-----------------
--- cimgui.nelua
-----------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
               ,'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
              },
    output_file = 'libs/nelua/imgui/cimgui.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimgui.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^ig','^Im'},
    include_dirs = {'libs/cimgui'}
  }
]==]
print("Generated [libs/imgui/cimgui.nelua]")

--------------------
--- imspinner.nelua
--------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
               ,'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
              },
    output_file = 'libs/nelua/imgui/imspinner.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimspinner.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^Spinner','demoSpinners'},
    include_dirs = {'libs/cimgui','libs/cimspinner'}
  }
]==]
print("Generated [libs/imgui/imspinner.nelua]")

------------------
--- imKnobs.nelua
------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
               ,'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
              },
    output_file = 'libs/nelua/imgui/imknobs.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimgui-knobs.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^IgKnob'},
    include_dirs = {'libs/cimgui','libs/cimgui-knobs'}
  }

if ccinfo.is_windows then
end
]==]
print("Generated [libs/imgui/imknobs.nelua]")

-------------------
--- imtoggle.nelua
-------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
               ,'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
              },
    output_file = 'libs/nelua/imgui/imtoggle.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimgui_toggle.h','cimgui_toggle_palette.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^ImGuiToggle','^Toggle'},
    include_dirs = {'libs/cimgui','libs/cimgui_toggle'}
  }

if ccinfo.is_windows then
end
]==]
print("Generated [libs/imgui/imtoggle.nelua]")

--------------------------
--- imcolortextedit.nelua
--------------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
               ,'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
              },
    output_file = 'libs/nelua/imgui/imcolortextedit.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimCTE.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^TextEditor'},
    include_dirs = {'libs/cimgui','libs/cimCTE'}
  }

if ccinfo.is_windows then
end
]==]
print("Generated [libs/imgui/imcolortextedit.nelua]")

--------------------------
--- imguizmo.nelua
--------------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
               ,'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
              },
    output_file = 'libs/nelua/imgui/imguizmo.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimguizmo.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^ImGuizmo'},
    include_dirs = {'libs/cimgui','libs/cimguizmo'}
  }

if ccinfo.is_windows then
end
]==]
print("Generated [libs/imgui/imguizmo.nelua]")

--------------------------
--- imnodes.nelua
--------------------------
##[==[
-- import Nelua Decl plugin and filesystem utils.
local nldecl = require 'nelua.plugins.nldecl'
local fs = require 'nelua.utils.fs'

-- Generate nelua bindings file. (It will be always regenerated)
  nldecl.generate_bindings_file{
    defines = {'bool _Bool'
               ,'IMGUI_IMPL_API "extern \"C\" __declspec(dllexport)"'
               ,'ImDrawIdx unsigned int'
               ,'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
              },
    output_file = 'libs/nelua/imgui/imnodes.nelua',
    -- what C file we should generate bindings for and parse?
    parse_includes = {'cimnodes.h','cimnodes_template.h'},
    -- what symbol name prefix should we import from that file?
    include_names = {'^ImNodes','^imnodes_','getIOKeyCtrlPtr'},
    include_dirs = {'libs/cimgui','libs/cimnodes','libs/cimnodes/generator'}
  }

if ccinfo.is_windows then
end
]==]
print("Generated [libs/imgui/imnodes.nelua]")
