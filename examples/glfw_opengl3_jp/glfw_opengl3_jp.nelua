require 'os'
require'math'
--
require'cimgui'
require'imgui_backend_opengl3'
require'imgui_backend_glfw'
require'loadImage'
require'saveImage'
require'utils'
require'IconsFontAwesome6'

--- External functions
local function setupFonts() <cimport> end                -- from utils/setupFonts.c

--- Initial Window size
local MainWinWidth <const>  = 1024
local MainWinHeight <const> =  900

--- Constants
local SaveImageName = "ImageSaved"

--- Global vars
local imageExt:string
local recImageFormat = @record{kind: string, ext:string}
local imageFormatTbl : [4]recImageFormat = {{"JPEG 90%",".jpg"}, {"PNG",".png"}, {"BMP",".bmp"}, {"TGA",".tga"}}
local cbItemIndex = 0
local versions : [][2]int32 = {{4, 6} ,{4, 5} ,{4, 4} ,{4, 3} ,{4, 2} ,{4, 1} ,{4, 0} ,{3, 3} }

---------
--- main
---------
local main = function()
  glfwInit()
  defer glfwTerminate()  end
  local glfwWin: *GLFWwindow = nilptr
  local glsl_version:cstring -- = "#version 330"
  for _, ver in ipairs(versions) do
    glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE)
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, ver[0])
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, ver[1])
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE)
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE)
    glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE)

    glfwWin = glfwCreateWindow(MainWinWidth, MainWinHeight, "ImGui with Nelua ", nilptr, nilptr)
    if nilptr ~= glfwWin then
      glsl_version = "#version " .. tostring( ver[0] * 100 + ver[1] * 10)
      break
    end
  end
  if nilptr == glfwWin then
    print("Could not create window")
    os.exit(false)
  end
  defer glfwDestroyWindow(glfwWin) end

  glfwMakeContextCurrent(glfwWin)
  glfwSwapInterval(1) -- # Enable vsync

  ------------------------
  --- Load title bar icon
  ------------------------
  local IconName = "res/img/icon_jp.png"
  LoadTitleBarIcon(glfwWin, IconName)

  if gladLoadGL(glfwGetProcAddress) == 0 then
    error 'Could not initialize GLAD'
  end
  print('OpenGL loaded:', (@cstring)(glGetString(GL_VERSION)))

  local context = igCreateContext()
  defer igDestroyContext(context) end

  ImGui_ImplGlfw_InitForOpenGL(glfwWin, true)
  defer ImGui_ImplGlfw_Shutdown() end

  local glsl_version:cstring <comptime> = "#version 330"
  ImGui_ImplOpenGL3_Init(glsl_version)
  defer ImGui_ImplOpenGL3_Shutdown() end

  setupFonts()

  --igStyleColorsDark()
  igStyleColorsClassic()


  ---------------
  --- Load image
  ---------------
  local textureId: GLuint
  local textureWidth:  int32 = 0
  local textureHeight: int32 = 0
  local ImageName = "parrots-400.png"
  if fileExists(ImageName) then
    if not loadTextureFromFile(ImageName, &textureId, &textureWidth, &textureHeight) then
      print("Error!: Image load error:  ", ImageName)
    end
  else
    print("Error!: Image file not found  error:  ", ImageName)
  end
  defer glDeleteTextures(1, &textureId) end

  local showDemoWindow = true
  local showFirstWindow = true
  local fval:cfloat = 0.5
  local showWindowDelay = 1 -- TODO : Avoid flickering window at start up.
  local counter = 0
  local sBuf:string = string.create(100)
  sBuf[1] = 0
  local clearColor: [3]cfloat = {0.25,0.65,0.85}

  local zoomTextureID: GLuint = 0  -- # Must be == 0 at first
  defer glDeleteTextures(1, &zoomTextureID) end

  local pio = igGetIO()

  --------------------
  --- Main while loop
  --------------------
  while glfwWindowShouldClose(glfwWin) == 0 do
    glfwPollEvents()

    ImGui_ImplOpenGL3_NewFrame() -- # start imgui frame
    ImGui_ImplGlfw_NewFrame()
    igNewFrame()

    if showDemoWindow then
      igShowDemoWindow(&showDemoWindow)
    end

    do igBegin("Nelua: Dear ImGui test タイトル漢字", &showFirstWindow, 0)
      defer igEnd() end
      local s = "GLFW v" .. tostring(glfwGetVersionString())
      s = ICON_FA_COMMENT .. " " .. s
      igText(s)
      s = "OpenGL v" .. tostring((@cstring)(glGetString(GL_VERSION)))
      s = ICON_FA_COMMENT_SMS .. " " .. s
      igText(s)
      igText(ICON_FA_COMMENT_DOTS .. " Dear ImGui")   igSameLine(0, -1.0)
      igText(igGetVersion())
      igText(ICON_FA_COMMENT_MEDICAL .. " ")   igSameLine(0, 0)
      igText(_VERSION)
      igInputTextWithHint("日本語入力テスト" ,"ここに日本語を入力" ,sBuf, #sBuf, 0, nilptr, nilptr)
      s = "入力結果: " .. sBuf
      igText(s)

      if igButton("ファイルを開く", ImVec2{0, 0}) then
      end

      igSameLine(0.0, -1.0)
      if igIsItemHovered(ImGuiHoveredFlags_DelayShort) and igBeginTooltip() then
        defer igEndTooltip() end
        igText("[ファイルオープン]")
        local ary: [7]cfloat = {0.6, 0.1, 1.0, 0.5, 0.92, 0.1, 0.2}
        igPlotLines_FloatPtr("曲線", &ary, 7, 0, "オーバーレイ文字",igGET_FLT_MIN(), igGET_FLT_MAX(), ImVec2{0,0}, #cfloat)
        igText("正弦波(time) = %.2f", math.sin(igGetTime()));
      end

      igCheckbox("デモ ウインドウ", &showDemoWindow)
      igSliderFloat("浮動小数", &fval, 0.0, 1.0, "%.3f", 0)
      igColorEdit3("背景色変更", &clearColor, 0)

      -- Save button for capturing window image
      igPushID_Int(0)
      igPushStyleColor_Vec4(ImGuiCol_Button,        ImVec4{0.7, 0.7, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_ButtonHovered, ImVec4{0.8, 0.8, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_ButtonActive,  ImVec4{0.9, 0.9, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_Text,          ImVec4{0.0, 0.0, 0.0, 1.0})

      -- Image save button
      imageExt = imageFormatTbl[cbItemIndex].ext
      local svName = string.format("%s_%05d%s", SaveImageName, counter,imageExt)
      if igButton("画面の画像を保存", ImVec2{0, 0}) then
        local wkSize = getMainViewport_WorkSize()
        saveImage(svName,0, 0, wkSize.x, wkSize.y, 3)  --- Save Image !
      end
      igPopStyleColor(4)
      igPopID()

      -- Show tooltip help
      setTooltip(string.format("保存名: %s" , svName))
      counter = counter + 1
      igSameLine(0.0, -1.0)

      -- ComboBox: Select save image format
      igSetNextItemWidth(100)
      if igBeginCombo("##", imageFormatTbl[cbItemIndex].kind, 0) then
        defer igEndCombo() end
        for n,val in ipairs(imageFormatTbl) do
          local is_selected = (cbItemIndex == n)
          if igSelectable_BoolPtr(val.kind, &is_selected, 0, ImVec2{0.0, 0.0}) then
            if is_selected then
              igSetItemDefaultFocus()
            end
            cbItemIndex = n
          end
        end
      end
      setTooltip("保存形式の選択")
      igText("計数 = %d", counter)

      igText("フレームレート %.3f ms/frame (%.1f FPS)", (1000.0 / pio.Framerate), pio.Framerate)

      igSeparatorText(ICON_FA_WRENCH .. " Icon font test ")
      igText(ICON_FA_TRASH_CAN .. " ゴミ箱")
      igText(ICON_FA_MAGNIFYING_GLASS_PLUS ..
        " " .. ICON_FA_POWER_OFF ..
        " " .. ICON_FA_MICROPHONE ..
        " " .. ICON_FA_MICROCHIP ..
        " " .. ICON_FA_VOLUME_HIGH ..
        " " .. ICON_FA_SCISSORS ..
        " " .. ICON_FA_SCREWDRIVER_WRENCH ..
        " " .. ICON_FA_BLOG)
    end

    -- # Show image load window
    do igBegin("画像ロードテスト", nilptr, 0)
      defer igEnd() end
      -- # Load image
      local size = ImVec2{textureWidth, textureHeight}
      local uv0  = ImVec2{0, 0}
      local uv1  = ImVec2{1, 1}
      local tint_col = ImVec4{1, 1, 1, 1}
      local border_col = ImVec4{0, 0, 0, 0}
      local imageBoxPosTop:ImVec2
      local imageBoxPosEnd:ImVec2
      igGetCursorScreenPos(&imageBoxPosTop) -- # Get absolute pos.
      igImage(textureId, size, uv0, uv1, tint_col, border_col)
      igGetCursorScreenPos(&imageBoxPosEnd) -- # Get absolute pos.
      -- #
      if igIsItemHovered(ImGuiHoveredFlags_DelayNone) then
        zoomGlass(&zoomTextureID, textureWidth, imageBoxPosTop, imageBoxPosEnd)
      end
    end

    igRender()
    glClearColor(clearColor[0], clearColor[1], clearColor[2], 1.0)
    glClear(GL_COLOR_BUFFER_BIT)
    ImGui_ImplOpenGL3_RenderDrawData(igGetDrawData())

    glfwSwapBuffers(glfwWin)

    if showWindowDelay > 0 then
      showWindowDelay = showWindowDelay - 1
    elseif showWindowDelay == 0 then
      showWindowDelay = -1
      glfwShowWindow(glfwWin)
    end
  end -- main while loop end

end -- main() end

main()
