require'math'
require'os'
--
require'sdl2'
require'imgui'
require'imgui_backend_opengl3'
require'imgui_backend_sdl2'
require'loadImage'
require'saveImage'
require'utils'
require'IconsFontAwesome6'

--- External functions
local function getFramerate(): cfloat <cimport> end      -- from utils/tentativeCode.c
local function setupFonts() <cimport> end                -- from utils/setupFonts.c

--- Initial Window size
local MainWinWidth <const>  = 1024
local MainWinHeight <const> =  800

--- Constants
local SaveImageName = "ImageSaved"

--- Global vars
local imageExt:string
local recImageFormat = @record{kind: string, ext:string}
local imageFormatTbl : [4]recImageFormat = {{"JPEG 90%",".jpg"}, {"PNG",".png"}, {"BMP",".bmp"}, {"TGA",".tga"}}
local cbItemIndex = 0

---------
--- main
---------
local main = function()
  if 0 ~= SDL_Init(SDL_INIT_VIDEO + SDL_INIT_TIMER + SDL_INIT_GAMECONTROLLER) then
    print("SDL2 initialization failed")
    os.exit(1)
  end
  if SDL_TRUE ~= SDL_SetHint("SDL_RENDER_SCALE_QUALITY", "2") then
    print("Linear texture filtering could not be enabled")
    os.exit(1)
  end
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_FLAGS, 0)
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_PROFILE_MASK, SDL_GLprofile.SDL_GL_CONTEXT_PROFILE_CORE)
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MAJOR_VERSION, 3)
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_CONTEXT_MINOR_VERSION, 3)

  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_DOUBLEBUFFER, 1);
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_DEPTH_SIZE, 24);
  SDL_GL_SetAttribute(SDL_GLattr.SDL_GL_STENCIL_SIZE, 8);

  local flags = SDL_WINDOW_HIDDEN + SDL_WINDOW_OPENGL + SDL_WINDOW_RESIZABLE + SDL_WINDOW_ALLOW_HIGHDPI
  local window = SDL_CreateWindow("ImGui with Nelua",
                                  SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,  -- x,y
                                  MainWinWidth, MainWinHeight                      -- w,h
                                  ,flags)                                          -- flags
  if 0 == window then
    print("Window could not be created")
    os.exit(1)
  end
  defer SDL_DestroyWindow(window) end

  local gl_context = SDL_GL_CreateContext(window)
  defer SDL_GL_DeleteContext(gl_context) end

  SDL_GL_MakeCurrent(window, gl_context)
  SDL_GL_SetSwapInterval(1)

  -- # Setup imgui
  igCreateContext()
  defer igDestroyContext() end

  if gladLoadGL((@function(cstring): function(): void)(SDL_GL_GetProcAddress)) == 0 then
    error 'Could not initialize GLAD'
  end

  local glsl_version: cstring = "#version 330"  --# OpenGL 3.3
  ImGui_ImplSDL2_InitForOpenGL(window , gl_context)
  defer ImGui_ImplSDL2_Shutdown() end
  ImGui_ImplOpenGL3_Init(glsl_version)
  defer ImGui_ImplOpenGL3_Shutdown() end

  igStyleColorsDark()
  -- igStyleColorsClassic()

  setupFonts()

  ---------------
  --- Load image
  ---------------
  local textureId: GLuint
  local textureWidth:  int32 = 0
  local textureHeight: int32 = 0
  local ImageName = "airplane-400.png"
  if fileExists(ImageName) then
    if not loadTextureFromFile(ImageName, &textureId, &textureWidth, &textureHeight) then
      print("Error!: Image load error:  ", ImageName)
    end
  else
    print("Error!: Image file not found  error:  ", ImageName)
  end
  defer glDeleteTextures(1, &textureId) end


  local showDemoWindow = true
  local showFirstWindow = true
  local fval:cfloat = 0.5
  local showWindowDelay = 1 -- TODO : Avoid flickering window at start up.
  local counter = 0
  local sBuf:string = string.create(100)
  sBuf[1] = 0
  local clearColor: [3]cfloat = {0.25,0.65,0.85}

  local zoomTextureID: GLuint = 0  -- # Must be == 0 at first
  defer glDeleteTextures(1, &zoomTextureID) end

  --------------------
  --- Main while loop
  --------------------
  local xQuit = false
  while not xQuit do
    local event: SDL_Event
    while SDL_PollEvent(&event) ~= 0 do
      ImGui_ImplSDL2_ProcessEvent(&event)
      if event.type== SDL_QUIT then
        xQuit = true
      end
      if event.type == SDL_WINDOWEVENT and event.window.event == SDL_WINDOWEVENT_CLOSE and event.window.windowID == SDL_GetWindowID(window) then
        xQuit = true
      end
    end

    ImGui_ImplOpenGL3_NewFrame() -- # Start ImGui frame
    ImGui_ImplSDL2_NewFrame()
    igNewFrame()

    --- ImGui GUI promgram start
    if showDemoWindow then
      igShowDemoWindow(&showDemoWindow)
    end

    if igBegin("Nelua: Dear ImGui test", &showFirstWindow, 0) then
      defer igEnd() end
      local ver: SDL_version
      SDL_GetVersion(&ver)
      local s = "SDL v" .. string.format("%d.%d.%d",ver.major, ver.minor, ver.patch)
      s = ICON_FA_COMMENT .. " " .. s
      igText(s)
      s = "OpenGL v" .. tostring((@cstring)(glGetString(GL_VERSION)))
      s = ICON_FA_COMMENT_SMS .. " " .. s
      igText(s)
      igText(ICON_FA_COMMENT_DOTS .. " Dear ImGui")   igSameLine(0, -1.0)
      igText(igGetVersion())
      igText(ICON_FA_COMMENT_MEDICAL .. " ")   igSameLine(0, 0)
      igText(_VERSION)
      igInputTextWithHint("InputText" ,"Input text here" ,sBuf, #sBuf, 0, nilptr, nilptr)
      s = "Input result:" .. sBuf
      igText(s)

      if igButton("Open file", ImVec2{0, 0}) then
      end

      igSameLine(0.0, -1.0)
      if igIsItemHovered(ImGuiHoveredFlags_DelayShort) and igBeginTooltip() then
        defer igEndTooltip() end
        igText("[Open file]")
        local ary: [7]cfloat = {0.6, 0.1, 1.0, 0.5, 0.92, 0.1, 0.2}
        igPlotLines_FloatPtr("Curve", &ary, 7, 0, "Overlay string",igGET_FLT_MIN(), igGET_FLT_MAX(), ImVec2{0,0}, #cfloat)
        igText("Sin(time) = %.2f", math.sin(igGetTime()));
      end

      igCheckbox("Demo window", &showDemoWindow)
      igSliderFloat("Float", &fval, 0.0, 1.0, "%.3f", 0)
      igColorEdit3("Background color", &clearColor, 0)

      -- Save button for capturing window image
      igPushID_Int(0)
      igPushStyleColor_Vec4(ImGuiCol_enum.ImGuiCol_Button,        ImVec4{0.7, 0.7, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_enum.ImGuiCol_ButtonHovered, ImVec4{0.8, 0.8, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_enum.ImGuiCol_ButtonActive,  ImVec4{0.9, 0.9, 0.0, 1.0})
      igPushStyleColor_Vec4(ImGuiCol_enum.ImGuiCol_Text,          ImVec4{0.0, 0.0, 0.0, 1.0})

      -- Image save button
      imageExt = imageFormatTbl[cbItemIndex].ext
      local svName = string.format("%s_%05d%s", SaveImageName, counter,imageExt)
      if igButton("Save window image", ImVec2{0, 0}) then
        local wkSize = getMainViewport_WorkSize()
        saveImage(svName,0, 0, wkSize.x, wkSize.y, 3)  --- Save Image !
      end
      igPopStyleColor(4)
      igPopID()

      -- Show tooltip help
      setTooltip(string.format("Save to %s" , svName))
      counter = counter + 1
      igSameLine(0.0, -1.0)

      -- ComboBox: Select save image format
      igSetNextItemWidth(100)
      if igBeginCombo("##", imageFormatTbl[cbItemIndex].kind, 0) then
        defer igEndCombo() end
        for n,val in ipairs(imageFormatTbl) do
          local is_selected = (cbItemIndex == n)
          if igSelectable_BoolPtr(val.kind, &is_selected, 0, ImVec2{0.0, 0.0}) then
            if is_selected then
              igSetItemDefaultFocus()
            end
            cbItemIndex = n
          end
        end
      end
      setTooltip("Select image format")
      igText("counter = %d", counter)

      igText("Application average %.3f ms/frame (%.1f FPS)", (1000.0 / getFramerate()), getFramerate())

      igSeparatorText(ICON_FA_WRENCH .. " Icon font test ")
      igText(ICON_FA_TRASH_CAN .. " Trash")
      igText(ICON_FA_MAGNIFYING_GLASS_PLUS ..
        " " .. ICON_FA_POWER_OFF ..
        " " .. ICON_FA_MICROPHONE ..
        " " .. ICON_FA_MICROCHIP ..
        " " .. ICON_FA_VOLUME_HIGH ..
        " " .. ICON_FA_SCISSORS ..
        " " .. ICON_FA_SCREWDRIVER_WRENCH ..
        " " .. ICON_FA_BLOG)
    end

    -- # Show image load window
    if igBegin("Image load test", nilptr, 0) then
      defer igEnd() end
      -- # Load image
      local size = ImVec2{textureWidth, textureHeight}
      local uv0  = ImVec2{0, 0}
      local uv1  = ImVec2{1, 1}
      local tint_col = ImVec4{1, 1, 1, 1}
      local border_col = ImVec4{0, 0, 0, 0}
      local imageBoxPosTop:ImVec2
      local imageBoxPosEnd:ImVec2
      igGetCursorScreenPos(&imageBoxPosTop) -- # Get absolute pos.
      igImage(textureId, size, uv0, uv1, tint_col, border_col)
      igGetCursorScreenPos(&imageBoxPosEnd) -- # Get absolute pos.
      -- #
      if igIsItemHovered(ImGuiHoveredFlags_DelayNone) then
        zoomGlass(&zoomTextureID, textureWidth, imageBoxPosTop, imageBoxPosEnd)
      end
    end

    --- ImGui GUI program end

    igRender()
    glViewport(0, 0, MainWinWidth, MainWinHeight)
    glClearColor(clearColor[0], clearColor[1], clearColor[2], 1.0)
    glClear(GL_COLOR_BUFFER_BIT)
    ImGui_ImplOpenGL3_RenderDrawData(igGetDrawData())
    SDL_GL_SwapWindow(window)

    if showWindowDelay > 0 then
      showWindowDelay = showWindowDelay - 1
    elseif showWindowDelay == 0 then
      showWindowDelay = -1
      SDL_ShowWindow(window)
    end
  end -- main while loop end
end -- main() end

main()
