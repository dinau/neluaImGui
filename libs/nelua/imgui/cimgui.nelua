--
-- This file has been auto generated. Don't edit this file.
--

##[==[
cdefine 'CIMGUI_DEFINE_ENUMS_AND_STRUCTS'
cinclude 'cimgui.h'
]==]
global FILE: type <cimport,nodecl,cincomplete> = @record{}
global ImDrawChannel: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawCmd: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawData: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawList: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawListSharedData: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawListSplitter: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawVert: type <cimport,nodecl,forwarddecl> = @record{}
global ImFont: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlas: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontBaked: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontConfig: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontGlyph: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontGlyphRangesBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontLoader: type <cimport,nodecl,forwarddecl> = @record{}
global ImTextureData: type <cimport,nodecl,forwarddecl> = @record{}
global ImTextureRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImColor: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiContext: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputTextCallbackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiKeyData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiListClipper: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiOnceUponAFrame: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPayload: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPlatformIO: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPlatformImeData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSelectionBasicStorage: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSelectionExternalStorage: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSelectionRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSizeCallbackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStorage: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStoragePair: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStyle: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableSortSpecs: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableColumnSortSpecs: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTextBuffer: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTextFilter: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiViewport: type <cimport,nodecl,forwarddecl> = @record{}
global ImBitVector: type <cimport,nodecl,forwarddecl> = @record{}
global ImRect: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTextIndex: type <cimport,nodecl,forwarddecl> = @record{}
global ImDrawDataBuilder: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasPostProcessData: type <cimport,nodecl,forwarddecl> = @record{}
global ImFontAtlasRectEntry: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiBoxSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiColorMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiContextHook: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDataTypeInfo: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiDeactivatedItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiErrorRecoveryState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiGroupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputTextState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiInputTextDeactivateData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiLastItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiLocEntry: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMenuColumns: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMultiSelectTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNavItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiMetricsConfig: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNextWindowData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiNextItemData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiOldColumnData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiOldColumns: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiPopupData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiSettingsHandler: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStyleMod: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiStyleVarInfo: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTabBar: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTabItem: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableHeaderData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableColumn: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableInstanceData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTableColumnsSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTreeNodeStackData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTypingSelectState: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiTypingSelectRequest: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindow: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowTempData: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiWindowSettings: type <cimport,nodecl,forwarddecl> = @record{}
global ImStbTexteditState: type <cimport,nodecl,forwarddecl> = @record{}
global stbrp_node_im: type <cimport,nodecl,forwarddecl> = @record{}
global ImGuiID: type <cimport,nodecl> = @cuint
global ImS8: type <cimport,nodecl> = @cschar
global ImU8: type <cimport,nodecl> = @cuchar
global ImS16: type <cimport,nodecl> = @cshort
global ImU16: type <cimport,nodecl> = @cushort
global ImS32: type <cimport,nodecl> = @cint
global ImU32: type <cimport,nodecl> = @cuint
global ImS64: type <cimport,nodecl> = @clonglong
global ImU64: type <cimport,nodecl> = @culonglong
global ImGuiCol: type <cimport,nodecl> = @cint
global ImGuiCond: type <cimport,nodecl> = @cint
global ImGuiDataType: type <cimport,nodecl> = @cint
global ImGuiMouseButton: type <cimport,nodecl> = @cint
global ImGuiMouseCursor: type <cimport,nodecl> = @cint
global ImGuiStyleVar: type <cimport,nodecl> = @cint
global ImGuiTableBgTarget: type <cimport,nodecl> = @cint
global ImDrawFlags: type <cimport,nodecl> = @cint
global ImDrawListFlags: type <cimport,nodecl> = @cint
global ImFontFlags: type <cimport,nodecl> = @cint
global ImFontAtlasFlags: type <cimport,nodecl> = @cint
global ImGuiBackendFlags: type <cimport,nodecl> = @cint
global ImGuiButtonFlags: type <cimport,nodecl> = @cint
global ImGuiChildFlags: type <cimport,nodecl> = @cint
global ImGuiColorEditFlags: type <cimport,nodecl> = @cint
global ImGuiConfigFlags: type <cimport,nodecl> = @cint
global ImGuiComboFlags: type <cimport,nodecl> = @cint
global ImGuiDragDropFlags: type <cimport,nodecl> = @cint
global ImGuiFocusedFlags: type <cimport,nodecl> = @cint
global ImGuiHoveredFlags: type <cimport,nodecl> = @cint
global ImGuiInputFlags: type <cimport,nodecl> = @cint
global ImGuiInputTextFlags: type <cimport,nodecl> = @cint
global ImGuiItemFlags: type <cimport,nodecl> = @cint
global ImGuiKeyChord: type <cimport,nodecl> = @cint
global ImGuiPopupFlags: type <cimport,nodecl> = @cint
global ImGuiMultiSelectFlags: type <cimport,nodecl> = @cint
global ImGuiSelectableFlags: type <cimport,nodecl> = @cint
global ImGuiSliderFlags: type <cimport,nodecl> = @cint
global ImGuiTabBarFlags: type <cimport,nodecl> = @cint
global ImGuiTabItemFlags: type <cimport,nodecl> = @cint
global ImGuiTableFlags: type <cimport,nodecl> = @cint
global ImGuiTableColumnFlags: type <cimport,nodecl> = @cint
global ImGuiTableRowFlags: type <cimport,nodecl> = @cint
global ImGuiTreeNodeFlags: type <cimport,nodecl> = @cint
global ImGuiViewportFlags: type <cimport,nodecl> = @cint
global ImGuiWindowFlags: type <cimport,nodecl> = @cint
global ImWchar32: type <cimport,nodecl> = @cuint
global ImWchar16: type <cimport,nodecl> = @cushort
global ImWchar: type <cimport,nodecl> = @ImWchar16
global ImGuiSelectionUserData: type <cimport,nodecl> = @ImS64
global ImGuiInputTextCallback: type <cimport,nodecl> = @function(data: *ImGuiInputTextCallbackData): cint
global ImGuiSizeCallback: type <cimport,nodecl> = @function(data: *ImGuiSizeCallbackData): void
global ImGuiMemAllocFunc: type <cimport,nodecl> = @function(sz: csize, user_data: pointer): pointer
global ImGuiMemFreeFunc: type <cimport,nodecl> = @function(ptr: pointer, user_data: pointer): void
global ImVec2: type <cimport,nodecl,forwarddecl> = @record{}
ImVec2 = @record{
  x: float32,
  y: float32
}
global ImVec4: type <cimport,nodecl,forwarddecl> = @record{}
ImVec4 = @record{
  x: float32,
  y: float32,
  z: float32,
  w: float32
}
global ImTextureID: type <cimport,nodecl> = @ImU64
global ImTextureRef: type <cimport,nodecl,forwarddecl> = @record{}
ImTextureRef = @record{
  _TexData: *ImTextureData,
  _TexID: ImTextureID
}
global ImGuiWindowFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiWindowFlags_None = 0,
  ImGuiWindowFlags_NoTitleBar = 1,
  ImGuiWindowFlags_NoResize = 2,
  ImGuiWindowFlags_NoMove = 4,
  ImGuiWindowFlags_NoScrollbar = 8,
  ImGuiWindowFlags_NoScrollWithMouse = 16,
  ImGuiWindowFlags_NoCollapse = 32,
  ImGuiWindowFlags_AlwaysAutoResize = 64,
  ImGuiWindowFlags_NoBackground = 128,
  ImGuiWindowFlags_NoSavedSettings = 256,
  ImGuiWindowFlags_NoMouseInputs = 512,
  ImGuiWindowFlags_MenuBar = 1024,
  ImGuiWindowFlags_HorizontalScrollbar = 2048,
  ImGuiWindowFlags_NoFocusOnAppearing = 4096,
  ImGuiWindowFlags_NoBringToFrontOnFocus = 8192,
  ImGuiWindowFlags_AlwaysVerticalScrollbar = 16384,
  ImGuiWindowFlags_AlwaysHorizontalScrollbar = 32768,
  ImGuiWindowFlags_NoNavInputs = 65536,
  ImGuiWindowFlags_NoNavFocus = 131072,
  ImGuiWindowFlags_UnsavedDocument = 262144,
  ImGuiWindowFlags_NoNav = 196608,
  ImGuiWindowFlags_NoDecoration = 43,
  ImGuiWindowFlags_NoInputs = 197120,
  ImGuiWindowFlags_ChildWindow = 16777216,
  ImGuiWindowFlags_Tooltip = 33554432,
  ImGuiWindowFlags_Popup = 67108864,
  ImGuiWindowFlags_Modal = 134217728,
  ImGuiWindowFlags_ChildMenu = 268435456
}
global ImGuiChildFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiChildFlags_None = 0,
  ImGuiChildFlags_Borders = 1,
  ImGuiChildFlags_AlwaysUseWindowPadding = 2,
  ImGuiChildFlags_ResizeX = 4,
  ImGuiChildFlags_ResizeY = 8,
  ImGuiChildFlags_AutoResizeX = 16,
  ImGuiChildFlags_AutoResizeY = 32,
  ImGuiChildFlags_AlwaysAutoResize = 64,
  ImGuiChildFlags_FrameStyle = 128,
  ImGuiChildFlags_NavFlattened = 256
}
global ImGuiItemFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiItemFlags_None = 0,
  ImGuiItemFlags_NoTabStop = 1,
  ImGuiItemFlags_NoNav = 2,
  ImGuiItemFlags_NoNavDefaultFocus = 4,
  ImGuiItemFlags_ButtonRepeat = 8,
  ImGuiItemFlags_AutoClosePopups = 16,
  ImGuiItemFlags_AllowDuplicateId = 32
}
global ImGuiInputTextFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputTextFlags_None = 0,
  ImGuiInputTextFlags_CharsDecimal = 1,
  ImGuiInputTextFlags_CharsHexadecimal = 2,
  ImGuiInputTextFlags_CharsScientific = 4,
  ImGuiInputTextFlags_CharsUppercase = 8,
  ImGuiInputTextFlags_CharsNoBlank = 16,
  ImGuiInputTextFlags_AllowTabInput = 32,
  ImGuiInputTextFlags_EnterReturnsTrue = 64,
  ImGuiInputTextFlags_EscapeClearsAll = 128,
  ImGuiInputTextFlags_CtrlEnterForNewLine = 256,
  ImGuiInputTextFlags_ReadOnly = 512,
  ImGuiInputTextFlags_Password = 1024,
  ImGuiInputTextFlags_AlwaysOverwrite = 2048,
  ImGuiInputTextFlags_AutoSelectAll = 4096,
  ImGuiInputTextFlags_ParseEmptyRefVal = 8192,
  ImGuiInputTextFlags_DisplayEmptyRefVal = 16384,
  ImGuiInputTextFlags_NoHorizontalScroll = 32768,
  ImGuiInputTextFlags_NoUndoRedo = 65536,
  ImGuiInputTextFlags_ElideLeft = 131072,
  ImGuiInputTextFlags_CallbackCompletion = 262144,
  ImGuiInputTextFlags_CallbackHistory = 524288,
  ImGuiInputTextFlags_CallbackAlways = 1048576,
  ImGuiInputTextFlags_CallbackCharFilter = 2097152,
  ImGuiInputTextFlags_CallbackResize = 4194304,
  ImGuiInputTextFlags_CallbackEdit = 8388608
}
global ImGuiTreeNodeFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTreeNodeFlags_None = 0,
  ImGuiTreeNodeFlags_Selected = 1,
  ImGuiTreeNodeFlags_Framed = 2,
  ImGuiTreeNodeFlags_AllowOverlap = 4,
  ImGuiTreeNodeFlags_NoTreePushOnOpen = 8,
  ImGuiTreeNodeFlags_NoAutoOpenOnLog = 16,
  ImGuiTreeNodeFlags_DefaultOpen = 32,
  ImGuiTreeNodeFlags_OpenOnDoubleClick = 64,
  ImGuiTreeNodeFlags_OpenOnArrow = 128,
  ImGuiTreeNodeFlags_Leaf = 256,
  ImGuiTreeNodeFlags_Bullet = 512,
  ImGuiTreeNodeFlags_FramePadding = 1024,
  ImGuiTreeNodeFlags_SpanAvailWidth = 2048,
  ImGuiTreeNodeFlags_SpanFullWidth = 4096,
  ImGuiTreeNodeFlags_SpanLabelWidth = 8192,
  ImGuiTreeNodeFlags_SpanAllColumns = 16384,
  ImGuiTreeNodeFlags_LabelSpanAllColumns = 32768,
  ImGuiTreeNodeFlags_NavLeftJumpsToParent = 131072,
  ImGuiTreeNodeFlags_CollapsingHeader = 26,
  ImGuiTreeNodeFlags_DrawLinesNone = 262144,
  ImGuiTreeNodeFlags_DrawLinesFull = 524288,
  ImGuiTreeNodeFlags_DrawLinesToNodes = 1048576
}
global ImGuiPopupFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiPopupFlags_None = 0,
  ImGuiPopupFlags_MouseButtonLeft = 0,
  ImGuiPopupFlags_MouseButtonRight = 1,
  ImGuiPopupFlags_MouseButtonMiddle = 2,
  ImGuiPopupFlags_MouseButtonMask_ = 31,
  ImGuiPopupFlags_MouseButtonDefault_ = 1,
  ImGuiPopupFlags_NoReopen = 32,
  ImGuiPopupFlags_NoOpenOverExistingPopup = 128,
  ImGuiPopupFlags_NoOpenOverItems = 256,
  ImGuiPopupFlags_AnyPopupId = 1024,
  ImGuiPopupFlags_AnyPopupLevel = 2048,
  ImGuiPopupFlags_AnyPopup = 3072
}
global ImGuiSelectableFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSelectableFlags_None = 0,
  ImGuiSelectableFlags_NoAutoClosePopups = 1,
  ImGuiSelectableFlags_SpanAllColumns = 2,
  ImGuiSelectableFlags_AllowDoubleClick = 4,
  ImGuiSelectableFlags_Disabled = 8,
  ImGuiSelectableFlags_AllowOverlap = 16,
  ImGuiSelectableFlags_Highlight = 32
}
global ImGuiComboFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiComboFlags_None = 0,
  ImGuiComboFlags_PopupAlignLeft = 1,
  ImGuiComboFlags_HeightSmall = 2,
  ImGuiComboFlags_HeightRegular = 4,
  ImGuiComboFlags_HeightLarge = 8,
  ImGuiComboFlags_HeightLargest = 16,
  ImGuiComboFlags_NoArrowButton = 32,
  ImGuiComboFlags_NoPreview = 64,
  ImGuiComboFlags_WidthFitPreview = 128,
  ImGuiComboFlags_HeightMask_ = 30
}
global ImGuiTabBarFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTabBarFlags_None = 0,
  ImGuiTabBarFlags_Reorderable = 1,
  ImGuiTabBarFlags_AutoSelectNewTabs = 2,
  ImGuiTabBarFlags_TabListPopupButton = 4,
  ImGuiTabBarFlags_NoCloseWithMiddleMouseButton = 8,
  ImGuiTabBarFlags_NoTabListScrollingButtons = 16,
  ImGuiTabBarFlags_NoTooltip = 32,
  ImGuiTabBarFlags_DrawSelectedOverline = 64,
  ImGuiTabBarFlags_FittingPolicyResizeDown = 128,
  ImGuiTabBarFlags_FittingPolicyScroll = 256,
  ImGuiTabBarFlags_FittingPolicyMask_ = 384,
  ImGuiTabBarFlags_FittingPolicyDefault_ = 128
}
global ImGuiTabItemFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTabItemFlags_None = 0,
  ImGuiTabItemFlags_UnsavedDocument = 1,
  ImGuiTabItemFlags_SetSelected = 2,
  ImGuiTabItemFlags_NoCloseWithMiddleMouseButton = 4,
  ImGuiTabItemFlags_NoPushId = 8,
  ImGuiTabItemFlags_NoTooltip = 16,
  ImGuiTabItemFlags_NoReorder = 32,
  ImGuiTabItemFlags_Leading = 64,
  ImGuiTabItemFlags_Trailing = 128,
  ImGuiTabItemFlags_NoAssumedClosure = 256
}
global ImGuiFocusedFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiFocusedFlags_None = 0,
  ImGuiFocusedFlags_ChildWindows = 1,
  ImGuiFocusedFlags_RootWindow = 2,
  ImGuiFocusedFlags_AnyWindow = 4,
  ImGuiFocusedFlags_NoPopupHierarchy = 8,
  ImGuiFocusedFlags_RootAndChildWindows = 3
}
global ImGuiHoveredFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiHoveredFlags_None = 0,
  ImGuiHoveredFlags_ChildWindows = 1,
  ImGuiHoveredFlags_RootWindow = 2,
  ImGuiHoveredFlags_AnyWindow = 4,
  ImGuiHoveredFlags_NoPopupHierarchy = 8,
  ImGuiHoveredFlags_AllowWhenBlockedByPopup = 32,
  ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 128,
  ImGuiHoveredFlags_AllowWhenOverlappedByItem = 256,
  ImGuiHoveredFlags_AllowWhenOverlappedByWindow = 512,
  ImGuiHoveredFlags_AllowWhenDisabled = 1024,
  ImGuiHoveredFlags_NoNavOverride = 2048,
  ImGuiHoveredFlags_AllowWhenOverlapped = 768,
  ImGuiHoveredFlags_RectOnly = 928,
  ImGuiHoveredFlags_RootAndChildWindows = 3,
  ImGuiHoveredFlags_ForTooltip = 4096,
  ImGuiHoveredFlags_Stationary = 8192,
  ImGuiHoveredFlags_DelayNone = 16384,
  ImGuiHoveredFlags_DelayShort = 32768,
  ImGuiHoveredFlags_DelayNormal = 65536,
  ImGuiHoveredFlags_NoSharedDelay = 131072
}
global ImGuiDragDropFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDragDropFlags_None = 0,
  ImGuiDragDropFlags_SourceNoPreviewTooltip = 1,
  ImGuiDragDropFlags_SourceNoDisableHover = 2,
  ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 4,
  ImGuiDragDropFlags_SourceAllowNullID = 8,
  ImGuiDragDropFlags_SourceExtern = 16,
  ImGuiDragDropFlags_PayloadAutoExpire = 32,
  ImGuiDragDropFlags_PayloadNoCrossContext = 64,
  ImGuiDragDropFlags_PayloadNoCrossProcess = 128,
  ImGuiDragDropFlags_AcceptBeforeDelivery = 1024,
  ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 2048,
  ImGuiDragDropFlags_AcceptNoPreviewTooltip = 4096,
  ImGuiDragDropFlags_AcceptPeekOnly = 3072
}
global ImGuiDataType_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDataType_S8 = 0,
  ImGuiDataType_U8 = 1,
  ImGuiDataType_S16 = 2,
  ImGuiDataType_U16 = 3,
  ImGuiDataType_S32 = 4,
  ImGuiDataType_U32 = 5,
  ImGuiDataType_S64 = 6,
  ImGuiDataType_U64 = 7,
  ImGuiDataType_Float = 8,
  ImGuiDataType_Double = 9,
  ImGuiDataType_Bool = 10,
  ImGuiDataType_String = 11,
  ImGuiDataType_COUNT = 12
}
global ImGuiDir: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDir_None = -1,
  ImGuiDir_Left = 0,
  ImGuiDir_Right = 1,
  ImGuiDir_Up = 2,
  ImGuiDir_Down = 3,
  ImGuiDir_COUNT = 4
}
global ImGuiSortDirection: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSortDirection_None = 0,
  ImGuiSortDirection_Ascending = 1,
  ImGuiSortDirection_Descending = 2
}
global ImGuiKey: type <cimport,nodecl,using> = @enum(cint){
  ImGuiKey_None = 0,
  ImGuiKey_NamedKey_BEGIN = 512,
  ImGuiKey_Tab = 512,
  ImGuiKey_LeftArrow = 513,
  ImGuiKey_RightArrow = 514,
  ImGuiKey_UpArrow = 515,
  ImGuiKey_DownArrow = 516,
  ImGuiKey_PageUp = 517,
  ImGuiKey_PageDown = 518,
  ImGuiKey_Home = 519,
  ImGuiKey_End = 520,
  ImGuiKey_Insert = 521,
  ImGuiKey_Delete = 522,
  ImGuiKey_Backspace = 523,
  ImGuiKey_Space = 524,
  ImGuiKey_Enter = 525,
  ImGuiKey_Escape = 526,
  ImGuiKey_LeftCtrl = 527,
  ImGuiKey_LeftShift = 528,
  ImGuiKey_LeftAlt = 529,
  ImGuiKey_LeftSuper = 530,
  ImGuiKey_RightCtrl = 531,
  ImGuiKey_RightShift = 532,
  ImGuiKey_RightAlt = 533,
  ImGuiKey_RightSuper = 534,
  ImGuiKey_Menu = 535,
  ImGuiKey_0 = 536,
  ImGuiKey_1 = 537,
  ImGuiKey_2 = 538,
  ImGuiKey_3 = 539,
  ImGuiKey_4 = 540,
  ImGuiKey_5 = 541,
  ImGuiKey_6 = 542,
  ImGuiKey_7 = 543,
  ImGuiKey_8 = 544,
  ImGuiKey_9 = 545,
  ImGuiKey_A = 546,
  ImGuiKey_B = 547,
  ImGuiKey_C = 548,
  ImGuiKey_D = 549,
  ImGuiKey_E = 550,
  ImGuiKey_F = 551,
  ImGuiKey_G = 552,
  ImGuiKey_H = 553,
  ImGuiKey_I = 554,
  ImGuiKey_J = 555,
  ImGuiKey_K = 556,
  ImGuiKey_L = 557,
  ImGuiKey_M = 558,
  ImGuiKey_N = 559,
  ImGuiKey_O = 560,
  ImGuiKey_P = 561,
  ImGuiKey_Q = 562,
  ImGuiKey_R = 563,
  ImGuiKey_S = 564,
  ImGuiKey_T = 565,
  ImGuiKey_U = 566,
  ImGuiKey_V = 567,
  ImGuiKey_W = 568,
  ImGuiKey_X = 569,
  ImGuiKey_Y = 570,
  ImGuiKey_Z = 571,
  ImGuiKey_F1 = 572,
  ImGuiKey_F2 = 573,
  ImGuiKey_F3 = 574,
  ImGuiKey_F4 = 575,
  ImGuiKey_F5 = 576,
  ImGuiKey_F6 = 577,
  ImGuiKey_F7 = 578,
  ImGuiKey_F8 = 579,
  ImGuiKey_F9 = 580,
  ImGuiKey_F10 = 581,
  ImGuiKey_F11 = 582,
  ImGuiKey_F12 = 583,
  ImGuiKey_F13 = 584,
  ImGuiKey_F14 = 585,
  ImGuiKey_F15 = 586,
  ImGuiKey_F16 = 587,
  ImGuiKey_F17 = 588,
  ImGuiKey_F18 = 589,
  ImGuiKey_F19 = 590,
  ImGuiKey_F20 = 591,
  ImGuiKey_F21 = 592,
  ImGuiKey_F22 = 593,
  ImGuiKey_F23 = 594,
  ImGuiKey_F24 = 595,
  ImGuiKey_Apostrophe = 596,
  ImGuiKey_Comma = 597,
  ImGuiKey_Minus = 598,
  ImGuiKey_Period = 599,
  ImGuiKey_Slash = 600,
  ImGuiKey_Semicolon = 601,
  ImGuiKey_Equal = 602,
  ImGuiKey_LeftBracket = 603,
  ImGuiKey_Backslash = 604,
  ImGuiKey_RightBracket = 605,
  ImGuiKey_GraveAccent = 606,
  ImGuiKey_CapsLock = 607,
  ImGuiKey_ScrollLock = 608,
  ImGuiKey_NumLock = 609,
  ImGuiKey_PrintScreen = 610,
  ImGuiKey_Pause = 611,
  ImGuiKey_Keypad0 = 612,
  ImGuiKey_Keypad1 = 613,
  ImGuiKey_Keypad2 = 614,
  ImGuiKey_Keypad3 = 615,
  ImGuiKey_Keypad4 = 616,
  ImGuiKey_Keypad5 = 617,
  ImGuiKey_Keypad6 = 618,
  ImGuiKey_Keypad7 = 619,
  ImGuiKey_Keypad8 = 620,
  ImGuiKey_Keypad9 = 621,
  ImGuiKey_KeypadDecimal = 622,
  ImGuiKey_KeypadDivide = 623,
  ImGuiKey_KeypadMultiply = 624,
  ImGuiKey_KeypadSubtract = 625,
  ImGuiKey_KeypadAdd = 626,
  ImGuiKey_KeypadEnter = 627,
  ImGuiKey_KeypadEqual = 628,
  ImGuiKey_AppBack = 629,
  ImGuiKey_AppForward = 630,
  ImGuiKey_Oem102 = 631,
  ImGuiKey_GamepadStart = 632,
  ImGuiKey_GamepadBack = 633,
  ImGuiKey_GamepadFaceLeft = 634,
  ImGuiKey_GamepadFaceRight = 635,
  ImGuiKey_GamepadFaceUp = 636,
  ImGuiKey_GamepadFaceDown = 637,
  ImGuiKey_GamepadDpadLeft = 638,
  ImGuiKey_GamepadDpadRight = 639,
  ImGuiKey_GamepadDpadUp = 640,
  ImGuiKey_GamepadDpadDown = 641,
  ImGuiKey_GamepadL1 = 642,
  ImGuiKey_GamepadR1 = 643,
  ImGuiKey_GamepadL2 = 644,
  ImGuiKey_GamepadR2 = 645,
  ImGuiKey_GamepadL3 = 646,
  ImGuiKey_GamepadR3 = 647,
  ImGuiKey_GamepadLStickLeft = 648,
  ImGuiKey_GamepadLStickRight = 649,
  ImGuiKey_GamepadLStickUp = 650,
  ImGuiKey_GamepadLStickDown = 651,
  ImGuiKey_GamepadRStickLeft = 652,
  ImGuiKey_GamepadRStickRight = 653,
  ImGuiKey_GamepadRStickUp = 654,
  ImGuiKey_GamepadRStickDown = 655,
  ImGuiKey_MouseLeft = 656,
  ImGuiKey_MouseRight = 657,
  ImGuiKey_MouseMiddle = 658,
  ImGuiKey_MouseX1 = 659,
  ImGuiKey_MouseX2 = 660,
  ImGuiKey_MouseWheelX = 661,
  ImGuiKey_MouseWheelY = 662,
  ImGuiKey_ReservedForModCtrl = 663,
  ImGuiKey_ReservedForModShift = 664,
  ImGuiKey_ReservedForModAlt = 665,
  ImGuiKey_ReservedForModSuper = 666,
  ImGuiKey_NamedKey_END = 667,
  ImGuiKey_NamedKey_COUNT = 155,
  ImGuiMod_None = 0,
  ImGuiMod_Ctrl = 4096,
  ImGuiMod_Shift = 8192,
  ImGuiMod_Alt = 16384,
  ImGuiMod_Super = 32768,
  ImGuiMod_Mask_ = 61440
}
global ImGuiInputFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputFlags_None = 0,
  ImGuiInputFlags_Repeat = 1,
  ImGuiInputFlags_RouteActive = 1024,
  ImGuiInputFlags_RouteFocused = 2048,
  ImGuiInputFlags_RouteGlobal = 4096,
  ImGuiInputFlags_RouteAlways = 8192,
  ImGuiInputFlags_RouteOverFocused = 16384,
  ImGuiInputFlags_RouteOverActive = 32768,
  ImGuiInputFlags_RouteUnlessBgFocused = 65536,
  ImGuiInputFlags_RouteFromRootWindow = 131072,
  ImGuiInputFlags_Tooltip = 262144
}
global ImGuiConfigFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiConfigFlags_None = 0,
  ImGuiConfigFlags_NavEnableKeyboard = 1,
  ImGuiConfigFlags_NavEnableGamepad = 2,
  ImGuiConfigFlags_NoMouse = 16,
  ImGuiConfigFlags_NoMouseCursorChange = 32,
  ImGuiConfigFlags_NoKeyboard = 64,
  ImGuiConfigFlags_IsSRGB = 1048576,
  ImGuiConfigFlags_IsTouchScreen = 2097152
}
global ImGuiBackendFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiBackendFlags_None = 0,
  ImGuiBackendFlags_HasGamepad = 1,
  ImGuiBackendFlags_HasMouseCursors = 2,
  ImGuiBackendFlags_HasSetMousePos = 4,
  ImGuiBackendFlags_RendererHasVtxOffset = 8,
  ImGuiBackendFlags_RendererHasTextures = 16
}
global ImGuiCol_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiCol_Text = 0,
  ImGuiCol_TextDisabled = 1,
  ImGuiCol_WindowBg = 2,
  ImGuiCol_ChildBg = 3,
  ImGuiCol_PopupBg = 4,
  ImGuiCol_Border = 5,
  ImGuiCol_BorderShadow = 6,
  ImGuiCol_FrameBg = 7,
  ImGuiCol_FrameBgHovered = 8,
  ImGuiCol_FrameBgActive = 9,
  ImGuiCol_TitleBg = 10,
  ImGuiCol_TitleBgActive = 11,
  ImGuiCol_TitleBgCollapsed = 12,
  ImGuiCol_MenuBarBg = 13,
  ImGuiCol_ScrollbarBg = 14,
  ImGuiCol_ScrollbarGrab = 15,
  ImGuiCol_ScrollbarGrabHovered = 16,
  ImGuiCol_ScrollbarGrabActive = 17,
  ImGuiCol_CheckMark = 18,
  ImGuiCol_SliderGrab = 19,
  ImGuiCol_SliderGrabActive = 20,
  ImGuiCol_Button = 21,
  ImGuiCol_ButtonHovered = 22,
  ImGuiCol_ButtonActive = 23,
  ImGuiCol_Header = 24,
  ImGuiCol_HeaderHovered = 25,
  ImGuiCol_HeaderActive = 26,
  ImGuiCol_Separator = 27,
  ImGuiCol_SeparatorHovered = 28,
  ImGuiCol_SeparatorActive = 29,
  ImGuiCol_ResizeGrip = 30,
  ImGuiCol_ResizeGripHovered = 31,
  ImGuiCol_ResizeGripActive = 32,
  ImGuiCol_InputTextCursor = 33,
  ImGuiCol_TabHovered = 34,
  ImGuiCol_Tab = 35,
  ImGuiCol_TabSelected = 36,
  ImGuiCol_TabSelectedOverline = 37,
  ImGuiCol_TabDimmed = 38,
  ImGuiCol_TabDimmedSelected = 39,
  ImGuiCol_TabDimmedSelectedOverline = 40,
  ImGuiCol_PlotLines = 41,
  ImGuiCol_PlotLinesHovered = 42,
  ImGuiCol_PlotHistogram = 43,
  ImGuiCol_PlotHistogramHovered = 44,
  ImGuiCol_TableHeaderBg = 45,
  ImGuiCol_TableBorderStrong = 46,
  ImGuiCol_TableBorderLight = 47,
  ImGuiCol_TableRowBg = 48,
  ImGuiCol_TableRowBgAlt = 49,
  ImGuiCol_TextLink = 50,
  ImGuiCol_TextSelectedBg = 51,
  ImGuiCol_TreeLines = 52,
  ImGuiCol_DragDropTarget = 53,
  ImGuiCol_NavCursor = 54,
  ImGuiCol_NavWindowingHighlight = 55,
  ImGuiCol_NavWindowingDimBg = 56,
  ImGuiCol_ModalWindowDimBg = 57,
  ImGuiCol_COUNT = 58
}
global ImGuiStyleVar_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiStyleVar_Alpha = 0,
  ImGuiStyleVar_DisabledAlpha = 1,
  ImGuiStyleVar_WindowPadding = 2,
  ImGuiStyleVar_WindowRounding = 3,
  ImGuiStyleVar_WindowBorderSize = 4,
  ImGuiStyleVar_WindowMinSize = 5,
  ImGuiStyleVar_WindowTitleAlign = 6,
  ImGuiStyleVar_ChildRounding = 7,
  ImGuiStyleVar_ChildBorderSize = 8,
  ImGuiStyleVar_PopupRounding = 9,
  ImGuiStyleVar_PopupBorderSize = 10,
  ImGuiStyleVar_FramePadding = 11,
  ImGuiStyleVar_FrameRounding = 12,
  ImGuiStyleVar_FrameBorderSize = 13,
  ImGuiStyleVar_ItemSpacing = 14,
  ImGuiStyleVar_ItemInnerSpacing = 15,
  ImGuiStyleVar_IndentSpacing = 16,
  ImGuiStyleVar_CellPadding = 17,
  ImGuiStyleVar_ScrollbarSize = 18,
  ImGuiStyleVar_ScrollbarRounding = 19,
  ImGuiStyleVar_GrabMinSize = 20,
  ImGuiStyleVar_GrabRounding = 21,
  ImGuiStyleVar_ImageBorderSize = 22,
  ImGuiStyleVar_TabRounding = 23,
  ImGuiStyleVar_TabBorderSize = 24,
  ImGuiStyleVar_TabBarBorderSize = 25,
  ImGuiStyleVar_TabBarOverlineSize = 26,
  ImGuiStyleVar_TableAngledHeadersAngle = 27,
  ImGuiStyleVar_TableAngledHeadersTextAlign = 28,
  ImGuiStyleVar_TreeLinesSize = 29,
  ImGuiStyleVar_TreeLinesRounding = 30,
  ImGuiStyleVar_ButtonTextAlign = 31,
  ImGuiStyleVar_SelectableTextAlign = 32,
  ImGuiStyleVar_SeparatorTextBorderSize = 33,
  ImGuiStyleVar_SeparatorTextAlign = 34,
  ImGuiStyleVar_SeparatorTextPadding = 35,
  ImGuiStyleVar_COUNT = 36
}
global ImGuiButtonFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiButtonFlags_None = 0,
  ImGuiButtonFlags_MouseButtonLeft = 1,
  ImGuiButtonFlags_MouseButtonRight = 2,
  ImGuiButtonFlags_MouseButtonMiddle = 4,
  ImGuiButtonFlags_MouseButtonMask_ = 7,
  ImGuiButtonFlags_EnableNav = 8
}
global ImGuiColorEditFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiColorEditFlags_None = 0,
  ImGuiColorEditFlags_NoAlpha = 2,
  ImGuiColorEditFlags_NoPicker = 4,
  ImGuiColorEditFlags_NoOptions = 8,
  ImGuiColorEditFlags_NoSmallPreview = 16,
  ImGuiColorEditFlags_NoInputs = 32,
  ImGuiColorEditFlags_NoTooltip = 64,
  ImGuiColorEditFlags_NoLabel = 128,
  ImGuiColorEditFlags_NoSidePreview = 256,
  ImGuiColorEditFlags_NoDragDrop = 512,
  ImGuiColorEditFlags_NoBorder = 1024,
  ImGuiColorEditFlags_AlphaOpaque = 2048,
  ImGuiColorEditFlags_AlphaNoBg = 4096,
  ImGuiColorEditFlags_AlphaPreviewHalf = 8192,
  ImGuiColorEditFlags_AlphaBar = 65536,
  ImGuiColorEditFlags_HDR = 524288,
  ImGuiColorEditFlags_DisplayRGB = 1048576,
  ImGuiColorEditFlags_DisplayHSV = 2097152,
  ImGuiColorEditFlags_DisplayHex = 4194304,
  ImGuiColorEditFlags_Uint8 = 8388608,
  ImGuiColorEditFlags_Float = 16777216,
  ImGuiColorEditFlags_PickerHueBar = 33554432,
  ImGuiColorEditFlags_PickerHueWheel = 67108864,
  ImGuiColorEditFlags_InputRGB = 134217728,
  ImGuiColorEditFlags_InputHSV = 268435456,
  ImGuiColorEditFlags_DefaultOptions_ = 177209344,
  ImGuiColorEditFlags_AlphaMask_ = 14338,
  ImGuiColorEditFlags_DisplayMask_ = 7340032,
  ImGuiColorEditFlags_DataTypeMask_ = 25165824,
  ImGuiColorEditFlags_PickerMask_ = 100663296,
  ImGuiColorEditFlags_InputMask_ = 402653184
}
global ImGuiSliderFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSliderFlags_None = 0,
  ImGuiSliderFlags_Logarithmic = 32,
  ImGuiSliderFlags_NoRoundToFormat = 64,
  ImGuiSliderFlags_NoInput = 128,
  ImGuiSliderFlags_WrapAround = 256,
  ImGuiSliderFlags_ClampOnInput = 512,
  ImGuiSliderFlags_ClampZeroRange = 1024,
  ImGuiSliderFlags_NoSpeedTweaks = 2048,
  ImGuiSliderFlags_AlwaysClamp = 1536,
  ImGuiSliderFlags_InvalidMask_ = 1879048207
}
global ImGuiMouseButton_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiMouseButton_Left = 0,
  ImGuiMouseButton_Right = 1,
  ImGuiMouseButton_Middle = 2,
  ImGuiMouseButton_COUNT = 5
}
global ImGuiMouseCursor_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiMouseCursor_None = -1,
  ImGuiMouseCursor_Arrow = 0,
  ImGuiMouseCursor_TextInput = 1,
  ImGuiMouseCursor_ResizeAll = 2,
  ImGuiMouseCursor_ResizeNS = 3,
  ImGuiMouseCursor_ResizeEW = 4,
  ImGuiMouseCursor_ResizeNESW = 5,
  ImGuiMouseCursor_ResizeNWSE = 6,
  ImGuiMouseCursor_Hand = 7,
  ImGuiMouseCursor_Wait = 8,
  ImGuiMouseCursor_Progress = 9,
  ImGuiMouseCursor_NotAllowed = 10,
  ImGuiMouseCursor_COUNT = 11
}
global ImGuiMouseSource: type <cimport,nodecl,using> = @enum(cint){
  ImGuiMouseSource_Mouse = 0,
  ImGuiMouseSource_TouchScreen = 1,
  ImGuiMouseSource_Pen = 2,
  ImGuiMouseSource_COUNT = 3
}
global ImGuiCond_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiCond_None = 0,
  ImGuiCond_Always = 1,
  ImGuiCond_Once = 2,
  ImGuiCond_FirstUseEver = 4,
  ImGuiCond_Appearing = 8
}
global ImGuiTableFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTableFlags_None = 0,
  ImGuiTableFlags_Resizable = 1,
  ImGuiTableFlags_Reorderable = 2,
  ImGuiTableFlags_Hideable = 4,
  ImGuiTableFlags_Sortable = 8,
  ImGuiTableFlags_NoSavedSettings = 16,
  ImGuiTableFlags_ContextMenuInBody = 32,
  ImGuiTableFlags_RowBg = 64,
  ImGuiTableFlags_BordersInnerH = 128,
  ImGuiTableFlags_BordersOuterH = 256,
  ImGuiTableFlags_BordersInnerV = 512,
  ImGuiTableFlags_BordersOuterV = 1024,
  ImGuiTableFlags_BordersH = 384,
  ImGuiTableFlags_BordersV = 1536,
  ImGuiTableFlags_BordersInner = 640,
  ImGuiTableFlags_BordersOuter = 1280,
  ImGuiTableFlags_Borders = 1920,
  ImGuiTableFlags_NoBordersInBody = 2048,
  ImGuiTableFlags_NoBordersInBodyUntilResize = 4096,
  ImGuiTableFlags_SizingFixedFit = 8192,
  ImGuiTableFlags_SizingFixedSame = 16384,
  ImGuiTableFlags_SizingStretchProp = 24576,
  ImGuiTableFlags_SizingStretchSame = 32768,
  ImGuiTableFlags_NoHostExtendX = 65536,
  ImGuiTableFlags_NoHostExtendY = 131072,
  ImGuiTableFlags_NoKeepColumnsVisible = 262144,
  ImGuiTableFlags_PreciseWidths = 524288,
  ImGuiTableFlags_NoClip = 1048576,
  ImGuiTableFlags_PadOuterX = 2097152,
  ImGuiTableFlags_NoPadOuterX = 4194304,
  ImGuiTableFlags_NoPadInnerX = 8388608,
  ImGuiTableFlags_ScrollX = 16777216,
  ImGuiTableFlags_ScrollY = 33554432,
  ImGuiTableFlags_SortMulti = 67108864,
  ImGuiTableFlags_SortTristate = 134217728,
  ImGuiTableFlags_HighlightHoveredColumn = 268435456,
  ImGuiTableFlags_SizingMask_ = 57344
}
global ImGuiTableColumnFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTableColumnFlags_None = 0,
  ImGuiTableColumnFlags_Disabled = 1,
  ImGuiTableColumnFlags_DefaultHide = 2,
  ImGuiTableColumnFlags_DefaultSort = 4,
  ImGuiTableColumnFlags_WidthStretch = 8,
  ImGuiTableColumnFlags_WidthFixed = 16,
  ImGuiTableColumnFlags_NoResize = 32,
  ImGuiTableColumnFlags_NoReorder = 64,
  ImGuiTableColumnFlags_NoHide = 128,
  ImGuiTableColumnFlags_NoClip = 256,
  ImGuiTableColumnFlags_NoSort = 512,
  ImGuiTableColumnFlags_NoSortAscending = 1024,
  ImGuiTableColumnFlags_NoSortDescending = 2048,
  ImGuiTableColumnFlags_NoHeaderLabel = 4096,
  ImGuiTableColumnFlags_NoHeaderWidth = 8192,
  ImGuiTableColumnFlags_PreferSortAscending = 16384,
  ImGuiTableColumnFlags_PreferSortDescending = 32768,
  ImGuiTableColumnFlags_IndentEnable = 65536,
  ImGuiTableColumnFlags_IndentDisable = 131072,
  ImGuiTableColumnFlags_AngledHeader = 262144,
  ImGuiTableColumnFlags_IsEnabled = 16777216,
  ImGuiTableColumnFlags_IsVisible = 33554432,
  ImGuiTableColumnFlags_IsSorted = 67108864,
  ImGuiTableColumnFlags_IsHovered = 134217728,
  ImGuiTableColumnFlags_WidthMask_ = 24,
  ImGuiTableColumnFlags_IndentMask_ = 196608,
  ImGuiTableColumnFlags_StatusMask_ = 251658240,
  ImGuiTableColumnFlags_NoDirectResize_ = 1073741824
}
global ImGuiTableRowFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTableRowFlags_None = 0,
  ImGuiTableRowFlags_Headers = 1
}
global ImGuiTableBgTarget_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTableBgTarget_None = 0,
  ImGuiTableBgTarget_RowBg0 = 1,
  ImGuiTableBgTarget_RowBg1 = 2,
  ImGuiTableBgTarget_CellBg = 3
}
ImGuiTableSortSpecs = @record{
  Specs: *ImGuiTableColumnSortSpecs,
  SpecsCount: cint,
  SpecsDirty: boolean
}
ImGuiTableColumnSortSpecs = @record{
  ColumnUserID: ImGuiID,
  ColumnIndex: ImS16,
  SortOrder: ImS16,
  SortDirection: ImGuiSortDirection
}
ImGuiStyle = @record{
  FontSizeBase: float32,
  FontScaleMain: float32,
  FontScaleDpi: float32,
  Alpha: float32,
  DisabledAlpha: float32,
  WindowPadding: ImVec2,
  WindowRounding: float32,
  WindowBorderSize: float32,
  WindowBorderHoverPadding: float32,
  WindowMinSize: ImVec2,
  WindowTitleAlign: ImVec2,
  WindowMenuButtonPosition: ImGuiDir,
  ChildRounding: float32,
  ChildBorderSize: float32,
  PopupRounding: float32,
  PopupBorderSize: float32,
  FramePadding: ImVec2,
  FrameRounding: float32,
  FrameBorderSize: float32,
  ItemSpacing: ImVec2,
  ItemInnerSpacing: ImVec2,
  CellPadding: ImVec2,
  TouchExtraPadding: ImVec2,
  IndentSpacing: float32,
  ColumnsMinSpacing: float32,
  ScrollbarSize: float32,
  ScrollbarRounding: float32,
  GrabMinSize: float32,
  GrabRounding: float32,
  LogSliderDeadzone: float32,
  ImageBorderSize: float32,
  TabRounding: float32,
  TabBorderSize: float32,
  TabCloseButtonMinWidthSelected: float32,
  TabCloseButtonMinWidthUnselected: float32,
  TabBarBorderSize: float32,
  TabBarOverlineSize: float32,
  TableAngledHeadersAngle: float32,
  TableAngledHeadersTextAlign: ImVec2,
  TreeLinesFlags: ImGuiTreeNodeFlags,
  TreeLinesSize: float32,
  TreeLinesRounding: float32,
  ColorButtonPosition: ImGuiDir,
  ButtonTextAlign: ImVec2,
  SelectableTextAlign: ImVec2,
  SeparatorTextBorderSize: float32,
  SeparatorTextAlign: ImVec2,
  SeparatorTextPadding: ImVec2,
  DisplayWindowPadding: ImVec2,
  DisplaySafeAreaPadding: ImVec2,
  MouseCursorScale: float32,
  AntiAliasedLines: boolean,
  AntiAliasedLinesUseTex: boolean,
  AntiAliasedFill: boolean,
  CurveTessellationTol: float32,
  CircleTessellationMaxError: float32,
  Colors: [58]ImVec4,
  HoverStationaryDelay: float32,
  HoverDelayShort: float32,
  HoverDelayNormal: float32,
  HoverFlagsForTooltipMouse: ImGuiHoveredFlags,
  HoverFlagsForTooltipNav: ImGuiHoveredFlags,
  _MainScale: float32,
  _NextFrameFontSizeBase: float32
}
ImGuiKeyData = @record{
  Down: boolean,
  DownDuration: float32,
  DownDurationPrev: float32,
  AnalogValue: float32
}
global ImVector_ImWchar: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImWchar
}
ImGuiIO = @record{
  ConfigFlags: ImGuiConfigFlags,
  BackendFlags: ImGuiBackendFlags,
  DisplaySize: ImVec2,
  DisplayFramebufferScale: ImVec2,
  DeltaTime: float32,
  IniSavingRate: float32,
  IniFilename: cstring,
  LogFilename: cstring,
  UserData: pointer,
  Fonts: *ImFontAtlas,
  FontDefault: *ImFont,
  FontAllowUserScaling: boolean,
  ConfigNavSwapGamepadButtons: boolean,
  ConfigNavMoveSetMousePos: boolean,
  ConfigNavCaptureKeyboard: boolean,
  ConfigNavEscapeClearFocusItem: boolean,
  ConfigNavEscapeClearFocusWindow: boolean,
  ConfigNavCursorVisibleAuto: boolean,
  ConfigNavCursorVisibleAlways: boolean,
  MouseDrawCursor: boolean,
  ConfigMacOSXBehaviors: boolean,
  ConfigInputTrickleEventQueue: boolean,
  ConfigInputTextCursorBlink: boolean,
  ConfigInputTextEnterKeepActive: boolean,
  ConfigDragClickToInputText: boolean,
  ConfigWindowsResizeFromEdges: boolean,
  ConfigWindowsMoveFromTitleBarOnly: boolean,
  ConfigWindowsCopyContentsWithCtrlC: boolean,
  ConfigScrollbarScrollByPage: boolean,
  ConfigMemoryCompactTimer: float32,
  MouseDoubleClickTime: float32,
  MouseDoubleClickMaxDist: float32,
  MouseDragThreshold: float32,
  KeyRepeatDelay: float32,
  KeyRepeatRate: float32,
  ConfigErrorRecovery: boolean,
  ConfigErrorRecoveryEnableAssert: boolean,
  ConfigErrorRecoveryEnableDebugLog: boolean,
  ConfigErrorRecoveryEnableTooltip: boolean,
  ConfigDebugIsDebuggerPresent: boolean,
  ConfigDebugHighlightIdConflicts: boolean,
  ConfigDebugHighlightIdConflictsShowItemPicker: boolean,
  ConfigDebugBeginReturnValueOnce: boolean,
  ConfigDebugBeginReturnValueLoop: boolean,
  ConfigDebugIgnoreFocusLoss: boolean,
  ConfigDebugIniSettings: boolean,
  BackendPlatformName: cstring,
  BackendRendererName: cstring,
  BackendPlatformUserData: pointer,
  BackendRendererUserData: pointer,
  BackendLanguageUserData: pointer,
  WantCaptureMouse: boolean,
  WantCaptureKeyboard: boolean,
  WantTextInput: boolean,
  WantSetMousePos: boolean,
  WantSaveIniSettings: boolean,
  NavActive: boolean,
  NavVisible: boolean,
  Framerate: float32,
  MetricsRenderVertices: cint,
  MetricsRenderIndices: cint,
  MetricsRenderWindows: cint,
  MetricsActiveWindows: cint,
  MouseDelta: ImVec2,
  Ctx: *ImGuiContext,
  MousePos: ImVec2,
  MouseDown: [5]boolean,
  MouseWheel: float32,
  MouseWheelH: float32,
  MouseSource: ImGuiMouseSource,
  KeyCtrl: boolean,
  KeyShift: boolean,
  KeyAlt: boolean,
  KeySuper: boolean,
  KeyMods: ImGuiKeyChord,
  KeysData: [155]ImGuiKeyData,
  WantCaptureMouseUnlessPopupClose: boolean,
  MousePosPrev: ImVec2,
  MouseClickedPos: [5]ImVec2,
  MouseClickedTime: [5]float64,
  MouseClicked: [5]boolean,
  MouseDoubleClicked: [5]boolean,
  MouseClickedCount: [5]ImU16,
  MouseClickedLastCount: [5]ImU16,
  MouseReleased: [5]boolean,
  MouseReleasedTime: [5]float64,
  MouseDownOwned: [5]boolean,
  MouseDownOwnedUnlessPopupClose: [5]boolean,
  MouseWheelRequestAxisSwap: boolean,
  MouseCtrlLeftAsRightClick: boolean,
  MouseDownDuration: [5]float32,
  MouseDownDurationPrev: [5]float32,
  MouseDragMaxDistanceSqr: [5]float32,
  PenPressure: float32,
  AppFocusLost: boolean,
  AppAcceptingEvents: boolean,
  InputQueueSurrogate: ImWchar16,
  InputQueueCharacters: ImVector_ImWchar
}
ImGuiInputTextCallbackData = @record{
  Ctx: *ImGuiContext,
  EventFlag: ImGuiInputTextFlags,
  Flags: ImGuiInputTextFlags,
  UserData: pointer,
  EventChar: ImWchar,
  EventKey: ImGuiKey,
  Buf: cstring,
  BufTextLen: cint,
  BufSize: cint,
  BufDirty: boolean,
  CursorPos: cint,
  SelectionStart: cint,
  SelectionEnd: cint
}
ImGuiSizeCallbackData = @record{
  UserData: pointer,
  Pos: ImVec2,
  CurrentSize: ImVec2,
  DesiredSize: ImVec2
}
ImGuiPayload = @record{
  Data: pointer,
  DataSize: cint,
  SourceId: ImGuiID,
  SourceParentId: ImGuiID,
  DataFrameCount: cint,
  DataType: [33]cchar,
  Preview: boolean,
  Delivery: boolean
}
ImGuiOnceUponAFrame = @record{
  RefFrame: cint
}
global ImGuiTextRange: type <cimport,nodecl> = @record{
  b: cstring,
  e: cstring
}
global ImVector_ImGuiTextRange: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTextRange
}
ImGuiTextFilter = @record{
  InputBuf: [256]cchar,
  Filters: ImVector_ImGuiTextRange,
  CountGrep: cint
}
global ImVector_char: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: cstring
}
ImGuiTextBuffer = @record{
  Buf: ImVector_char
}
ImGuiStoragePair = @record{
  key: ImGuiID,
  __unnamed2: union{
    val_i: cint,
    val_f: float32,
    val_p: pointer
  }
}
global ImVector_ImGuiStoragePair: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStoragePair
}
ImGuiStorage = @record{
  Data: ImVector_ImGuiStoragePair
}
ImGuiListClipper = @record{
  Ctx: *ImGuiContext,
  DisplayStart: cint,
  DisplayEnd: cint,
  ItemsCount: cint,
  ItemsHeight: float32,
  StartPosY: float64,
  StartSeekOffsetY: float64,
  TempData: pointer
}
ImColor = @record{
  Value: ImVec4
}
global ImGuiMultiSelectFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiMultiSelectFlags_None = 0,
  ImGuiMultiSelectFlags_SingleSelect = 1,
  ImGuiMultiSelectFlags_NoSelectAll = 2,
  ImGuiMultiSelectFlags_NoRangeSelect = 4,
  ImGuiMultiSelectFlags_NoAutoSelect = 8,
  ImGuiMultiSelectFlags_NoAutoClear = 16,
  ImGuiMultiSelectFlags_NoAutoClearOnReselect = 32,
  ImGuiMultiSelectFlags_BoxSelect1d = 64,
  ImGuiMultiSelectFlags_BoxSelect2d = 128,
  ImGuiMultiSelectFlags_BoxSelectNoScroll = 256,
  ImGuiMultiSelectFlags_ClearOnEscape = 512,
  ImGuiMultiSelectFlags_ClearOnClickVoid = 1024,
  ImGuiMultiSelectFlags_ScopeWindow = 2048,
  ImGuiMultiSelectFlags_ScopeRect = 4096,
  ImGuiMultiSelectFlags_SelectOnClick = 8192,
  ImGuiMultiSelectFlags_SelectOnClickRelease = 16384,
  ImGuiMultiSelectFlags_NavWrapX = 65536
}
global ImVector_ImGuiSelectionRequest: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiSelectionRequest
}
ImGuiMultiSelectIO = @record{
  Requests: ImVector_ImGuiSelectionRequest,
  RangeSrcItem: ImGuiSelectionUserData,
  NavIdItem: ImGuiSelectionUserData,
  NavIdSelected: boolean,
  RangeSrcReset: boolean,
  ItemsCount: cint
}
global ImGuiSelectionRequestType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSelectionRequestType_None = 0,
  ImGuiSelectionRequestType_SetAll = 1,
  ImGuiSelectionRequestType_SetRange = 2
}
ImGuiSelectionRequest = @record{
  Type: ImGuiSelectionRequestType,
  Selected: boolean,
  RangeDirection: ImS8,
  RangeFirstItem: ImGuiSelectionUserData,
  RangeLastItem: ImGuiSelectionUserData
}
ImGuiSelectionBasicStorage = @record{
  Size: cint,
  PreserveOrder: boolean,
  UserData: pointer,
  AdapterIndexToStorageId: function(self: *ImGuiSelectionBasicStorage, idx: cint): ImGuiID,
  _SelectionOrder: cint,
  _Storage: ImGuiStorage
}
ImGuiSelectionExternalStorage = @record{
  UserData: pointer,
  AdapterSetItemSelected: function(self: *ImGuiSelectionExternalStorage, idx: cint, selected: boolean): void
}
global ImDrawCallback: type <cimport,nodecl> = @function(parent_list: *ImDrawList, cmd: *ImDrawCmd): void
ImDrawCmd = @record{
  ClipRect: ImVec4,
  TexRef: ImTextureRef,
  VtxOffset: cuint,
  IdxOffset: cuint,
  ElemCount: cuint,
  UserCallback: ImDrawCallback,
  UserCallbackData: pointer,
  UserCallbackDataSize: cint,
  UserCallbackDataOffset: cint
}
ImDrawVert = @record{
  pos: ImVec2,
  uv: ImVec2,
  col: ImU32
}
global ImDrawCmdHeader: type <cimport,nodecl,forwarddecl> = @record{}
ImDrawCmdHeader = @record{
  ClipRect: ImVec4,
  TexRef: ImTextureRef,
  VtxOffset: cuint
}
global ImVector_ImDrawCmd: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawCmd
}
global ImVector_ImDrawIdx: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuint
}
ImDrawChannel = @record{
  _CmdBuffer: ImVector_ImDrawCmd,
  _IdxBuffer: ImVector_ImDrawIdx
}
global ImVector_ImDrawChannel: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawChannel
}
ImDrawListSplitter = @record{
  _Current: cint,
  _Count: cint,
  _Channels: ImVector_ImDrawChannel
}
global ImDrawFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImDrawFlags_None = 0,
  ImDrawFlags_Closed = 1,
  ImDrawFlags_RoundCornersTopLeft = 16,
  ImDrawFlags_RoundCornersTopRight = 32,
  ImDrawFlags_RoundCornersBottomLeft = 64,
  ImDrawFlags_RoundCornersBottomRight = 128,
  ImDrawFlags_RoundCornersNone = 256,
  ImDrawFlags_RoundCornersTop = 48,
  ImDrawFlags_RoundCornersBottom = 192,
  ImDrawFlags_RoundCornersLeft = 80,
  ImDrawFlags_RoundCornersRight = 160,
  ImDrawFlags_RoundCornersAll = 240,
  ImDrawFlags_RoundCornersDefault_ = 240,
  ImDrawFlags_RoundCornersMask_ = 496
}
global ImDrawListFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImDrawListFlags_None = 0,
  ImDrawListFlags_AntiAliasedLines = 1,
  ImDrawListFlags_AntiAliasedLinesUseTex = 2,
  ImDrawListFlags_AntiAliasedFill = 4,
  ImDrawListFlags_AllowVtxOffset = 8
}
global ImVector_ImDrawVert: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImDrawVert
}
global ImVector_ImVec2: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImVec2
}
global ImVector_ImVec4: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImVec4
}
global ImVector_ImTextureRef: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImTextureRef
}
global ImVector_ImU8: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImU8
}
ImDrawList = @record{
  CmdBuffer: ImVector_ImDrawCmd,
  IdxBuffer: ImVector_ImDrawIdx,
  VtxBuffer: ImVector_ImDrawVert,
  Flags: ImDrawListFlags,
  _VtxCurrentIdx: cuint,
  _Data: *ImDrawListSharedData,
  _VtxWritePtr: *ImDrawVert,
  _IdxWritePtr: *cuint,
  _Path: ImVector_ImVec2,
  _CmdHeader: ImDrawCmdHeader,
  _Splitter: ImDrawListSplitter,
  _ClipRectStack: ImVector_ImVec4,
  _TextureStack: ImVector_ImTextureRef,
  _CallbacksDataBuf: ImVector_ImU8,
  _FringeScale: float32,
  _OwnerName: cstring
}
global ImVector_ImDrawListPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImDrawList
}
global ImVector_ImTextureDataPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImTextureData
}
ImDrawData = @record{
  Valid: boolean,
  CmdListsCount: cint,
  TotalIdxCount: cint,
  TotalVtxCount: cint,
  CmdLists: ImVector_ImDrawListPtr,
  DisplayPos: ImVec2,
  DisplaySize: ImVec2,
  FramebufferScale: ImVec2,
  OwnerViewport: *ImGuiViewport,
  Textures: *ImVector_ImTextureDataPtr
}
global ImTextureFormat: type <cimport,nodecl,using> = @enum(cint){
  ImTextureFormat_RGBA32 = 0,
  ImTextureFormat_Alpha8 = 1
}
global ImTextureStatus: type <cimport,nodecl,using> = @enum(cint){
  ImTextureStatus_OK = 0,
  ImTextureStatus_Destroyed = 1,
  ImTextureStatus_WantCreate = 2,
  ImTextureStatus_WantUpdates = 3,
  ImTextureStatus_WantDestroy = 4
}
ImTextureRect = @record{
  x: cushort,
  y: cushort,
  w: cushort,
  h: cushort
}
global ImVector_ImTextureRect: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImTextureRect
}
ImTextureData = @record{
  UniqueID: cint,
  Status: ImTextureStatus,
  BackendUserData: pointer,
  TexID: ImTextureID,
  Format: ImTextureFormat,
  Width: cint,
  Height: cint,
  BytesPerPixel: cint,
  Pixels: *cuchar,
  UsedRect: ImTextureRect,
  UpdateRect: ImTextureRect,
  Updates: ImVector_ImTextureRect,
  UnusedFrames: cint,
  RefCount: cushort,
  UseColors: boolean,
  WantDestroyNextFrame: boolean
}
ImFontConfig = @record{
  Name: [40]cchar,
  FontData: pointer,
  FontDataSize: cint,
  FontDataOwnedByAtlas: boolean,
  MergeMode: boolean,
  PixelSnapH: boolean,
  PixelSnapV: boolean,
  OversampleH: ImS8,
  OversampleV: ImS8,
  EllipsisChar: ImWchar,
  SizePixels: float32,
  GlyphRanges: *ImWchar,
  GlyphExcludeRanges: *ImWchar,
  GlyphOffset: ImVec2,
  GlyphMinAdvanceX: float32,
  GlyphMaxAdvanceX: float32,
  GlyphExtraAdvanceX: float32,
  FontNo: ImU32,
  FontLoaderFlags: cuint,
  RasterizerMultiply: float32,
  RasterizerDensity: float32,
  Flags: ImFontFlags,
  DstFont: *ImFont,
  FontLoader: *ImFontLoader,
  FontLoaderData: pointer
}
ImFontGlyph = @record{
  Colored: cuint,
  Visible: cuint,
  SourceIdx: cuint,
  Codepoint: cuint,
  AdvanceX: float32,
  X0: float32,
  Y0: float32,
  X1: float32,
  Y1: float32,
  U0: float32,
  V0: float32,
  U1: float32,
  V1: float32,
  PackId: cint
}
global ImVector_ImU32: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImU32
}
ImFontGlyphRangesBuilder = @record{
  UsedChars: ImVector_ImU32
}
global ImFontAtlasRectId: type <cimport,nodecl> = @cint
ImFontAtlasRect = @record{
  x: cushort,
  y: cushort,
  w: cushort,
  h: cushort,
  uv0: ImVec2,
  uv1: ImVec2
}
global ImFontAtlasFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImFontAtlasFlags_None = 0,
  ImFontAtlasFlags_NoPowerOfTwoHeight = 1,
  ImFontAtlasFlags_NoMouseCursors = 2,
  ImFontAtlasFlags_NoBakedLines = 4
}
global ImVector_ImFontPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFont
}
global ImVector_ImFontConfig: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontConfig
}
global ImVector_ImDrawListSharedDataPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImDrawListSharedData
}
ImFontAtlas = @record{
  Flags: ImFontAtlasFlags,
  TexDesiredFormat: ImTextureFormat,
  TexGlyphPadding: cint,
  TexMinWidth: cint,
  TexMinHeight: cint,
  TexMaxWidth: cint,
  TexMaxHeight: cint,
  UserData: pointer,
  TexRef: ImTextureRef,
  TexData: *ImTextureData,
  TexList: ImVector_ImTextureDataPtr,
  Locked: boolean,
  RendererHasTextures: boolean,
  TexIsBuilt: boolean,
  TexPixelsUseColors: boolean,
  TexUvScale: ImVec2,
  TexUvWhitePixel: ImVec2,
  Fonts: ImVector_ImFontPtr,
  Sources: ImVector_ImFontConfig,
  TexUvLines: [33]ImVec4,
  TexNextUniqueID: cint,
  FontNextUniqueID: cint,
  DrawListSharedDatas: ImVector_ImDrawListSharedDataPtr,
  Builder: *ImFontAtlasBuilder,
  FontLoader: *ImFontLoader,
  FontLoaderName: cstring,
  FontLoaderData: pointer,
  FontLoaderFlags: cuint,
  RefCount: cint,
  OwnerContext: *ImGuiContext
}
global ImVector_float: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *float32
}
global ImVector_ImU16: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImU16
}
global ImVector_ImFontGlyph: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontGlyph
}
ImFontBaked = @record{
  IndexAdvanceX: ImVector_float,
  FallbackAdvanceX: float32,
  Size: float32,
  RasterizerDensity: float32,
  IndexLookup: ImVector_ImU16,
  Glyphs: ImVector_ImFontGlyph,
  FallbackGlyphIndex: cint,
  Ascent: float32,
  Descent: float32,
  MetricsTotalSurface: cuint,
  WantDestroy: cuint,
  LockLoadingFallback: cuint,
  LastUsedFrame: cint,
  BakedId: ImGuiID,
  ContainerFont: *ImFont,
  FontLoaderDatas: pointer
}
global ImFontFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImFontFlags_None = 0,
  ImFontFlags_NoLoadError = 2,
  ImFontFlags_NoLoadGlyphs = 4,
  ImFontFlags_LockBakedSizes = 8
}
global ImVector_ImFontConfigPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontConfig
}
ImFont = @record{
  LastBaked: *ImFontBaked,
  ContainerAtlas: *ImFontAtlas,
  Flags: ImFontFlags,
  CurrentRasterizerDensity: float32,
  FontId: ImGuiID,
  LegacySize: float32,
  Sources: ImVector_ImFontConfigPtr,
  EllipsisChar: ImWchar,
  FallbackChar: ImWchar,
  Used8kPagesMap: [1]ImU8,
  EllipsisAutoBake: boolean,
  RemapPairs: ImGuiStorage
}
global ImGuiViewportFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiViewportFlags_None = 0,
  ImGuiViewportFlags_IsPlatformWindow = 1,
  ImGuiViewportFlags_IsPlatformMonitor = 2,
  ImGuiViewportFlags_OwnedByApp = 4
}
ImGuiViewport = @record{
  ID: ImGuiID,
  Flags: ImGuiViewportFlags,
  Pos: ImVec2,
  Size: ImVec2,
  FramebufferScale: ImVec2,
  WorkPos: ImVec2,
  WorkSize: ImVec2,
  PlatformHandle: pointer,
  PlatformHandleRaw: pointer
}
ImGuiPlatformIO = @record{
  Platform_GetClipboardTextFn: function(ctx: *ImGuiContext): cstring,
  Platform_SetClipboardTextFn: function(ctx: *ImGuiContext, text: cstring): void,
  Platform_ClipboardUserData: pointer,
  Platform_OpenInShellFn: function(ctx: *ImGuiContext, path: cstring): boolean,
  Platform_OpenInShellUserData: pointer,
  Platform_SetImeDataFn: function(ctx: *ImGuiContext, viewport: *ImGuiViewport, data: *ImGuiPlatformImeData): void,
  Platform_ImeUserData: pointer,
  Platform_LocaleDecimalPoint: ImWchar,
  Renderer_TextureMaxWidth: cint,
  Renderer_TextureMaxHeight: cint,
  Renderer_RenderState: pointer,
  Textures: ImVector_ImTextureDataPtr
}
ImGuiPlatformImeData = @record{
  WantVisible: boolean,
  WantTextInput: boolean,
  InputPos: ImVec2,
  InputLineHeight: float32,
  ViewportId: ImGuiID
}
global ImGuiLayoutType: type <cimport,nodecl> = @cint
global ImGuiActivateFlags: type <cimport,nodecl> = @cint
global ImGuiDebugLogFlags: type <cimport,nodecl> = @cint
global ImGuiFocusRequestFlags: type <cimport,nodecl> = @cint
global ImGuiItemStatusFlags: type <cimport,nodecl> = @cint
global ImGuiOldColumnFlags: type <cimport,nodecl> = @cint
global ImGuiLogFlags: type <cimport,nodecl> = @cint
global ImGuiNavRenderCursorFlags: type <cimport,nodecl> = @cint
global ImGuiNavMoveFlags: type <cimport,nodecl> = @cint
global ImGuiNextItemDataFlags: type <cimport,nodecl> = @cint
global ImGuiNextWindowDataFlags: type <cimport,nodecl> = @cint
global ImGuiScrollFlags: type <cimport,nodecl> = @cint
global ImGuiSeparatorFlags: type <cimport,nodecl> = @cint
global ImGuiTextFlags: type <cimport,nodecl> = @cint
global ImGuiTooltipFlags: type <cimport,nodecl> = @cint
global ImGuiTypingSelectFlags: type <cimport,nodecl> = @cint
global ImGuiWindowRefreshFlags: type <cimport,nodecl> = @cint
global ImGuiTableColumnIdx: type <cimport,nodecl> = @ImS16
global ImGuiTableDrawChannelIdx: type <cimport,nodecl> = @ImU16
global ImFileHandle: type <cimport,nodecl> = @*FILE
global ImVec1: type <cimport,nodecl,forwarddecl> = @record{}
ImVec1 = @record{
  x: float32
}
global ImVec2i: type <cimport,nodecl,forwarddecl> = @record{}
ImVec2i = @record{
  x: cint,
  y: cint
}
global ImVec2ih: type <cimport,nodecl,forwarddecl> = @record{}
ImVec2ih = @record{
  x: cshort,
  y: cshort
}
ImRect = @record{
  Min: ImVec2,
  Max: ImVec2
}
global ImBitArrayPtr: type <cimport,nodecl> = @*ImU32
ImBitVector = @record{
  Storage: ImVector_ImU32
}
global ImPoolIdx: type <cimport,nodecl> = @cint
global ImVector_int: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cint
}
ImGuiTextIndex = @record{
  LineOffsets: ImVector_int,
  EndOffset: cint
}
ImDrawListSharedData = @record{
  TexUvWhitePixel: ImVec2,
  TexUvLines: *ImVec4,
  FontAtlas: *ImFontAtlas,
  Font: *ImFont,
  FontSize: float32,
  FontScale: float32,
  CurveTessellationTol: float32,
  CircleSegmentMaxError: float32,
  InitialFringeScale: float32,
  InitialFlags: ImDrawListFlags,
  ClipRectFullscreen: ImVec4,
  TempBuffer: ImVector_ImVec2,
  DrawLists: ImVector_ImDrawListPtr,
  Context: *ImGuiContext,
  ArcFastVtx: [48]ImVec2,
  ArcFastRadiusCutoff: float32,
  CircleSegmentCounts: [64]ImU8
}
ImDrawDataBuilder = @record{
  Layers: [2]*ImVector_ImDrawListPtr,
  LayerData1: ImVector_ImDrawListPtr
}
global ImFontStackData: type <cimport,nodecl,forwarddecl> = @record{}
ImFontStackData = @record{
  Font: *ImFont,
  FontSizeBeforeScaling: float32,
  FontSizeAfterScaling: float32
}
ImGuiStyleVarInfo = @record{
  Count: ImU32,
  DataType: ImGuiDataType,
  Offset: ImU32
}
ImGuiColorMod = @record{
  Col: ImGuiCol,
  BackupValue: ImVec4
}
ImGuiStyleMod = @record{
  VarIdx: ImGuiStyleVar,
  __unnamed2: union{
    BackupInt: [2]cint,
    BackupFloat: [2]float32
  }
}
global ImGuiDataTypeStorage: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiDataTypeStorage = @record{
  Data: [8]ImU8
}
ImGuiDataTypeInfo = @record{
  Size: csize,
  Name: cstring,
  PrintFmt: cstring,
  ScanFmt: cstring
}
global ImGuiDataTypePrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDataType_Pointer = 12,
  ImGuiDataType_ID = 13
}
global ImGuiItemFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiItemFlags_Disabled = 1024,
  ImGuiItemFlags_ReadOnly = 2048,
  ImGuiItemFlags_MixedValue = 4096,
  ImGuiItemFlags_NoWindowHoverableCheck = 8192,
  ImGuiItemFlags_AllowOverlap = 16384,
  ImGuiItemFlags_NoNavDisableMouseHover = 32768,
  ImGuiItemFlags_NoMarkEdited = 65536,
  ImGuiItemFlags_NoFocus = 131072,
  ImGuiItemFlags_Inputable = 1048576,
  ImGuiItemFlags_HasSelectionUserData = 2097152,
  ImGuiItemFlags_IsMultiSelect = 4194304,
  ImGuiItemFlags_Default_ = 16
}
global ImGuiItemStatusFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiItemStatusFlags_None = 0,
  ImGuiItemStatusFlags_HoveredRect = 1,
  ImGuiItemStatusFlags_HasDisplayRect = 2,
  ImGuiItemStatusFlags_Edited = 4,
  ImGuiItemStatusFlags_ToggledSelection = 8,
  ImGuiItemStatusFlags_ToggledOpen = 16,
  ImGuiItemStatusFlags_HasDeactivated = 32,
  ImGuiItemStatusFlags_Deactivated = 64,
  ImGuiItemStatusFlags_HoveredWindow = 128,
  ImGuiItemStatusFlags_Visible = 256,
  ImGuiItemStatusFlags_HasClipRect = 512,
  ImGuiItemStatusFlags_HasShortcut = 1024
}
global ImGuiHoveredFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiHoveredFlags_DelayMask_ = 245760,
  ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = 12463,
  ImGuiHoveredFlags_AllowedMaskForIsItemHovered = 262048
}
global ImGuiInputTextFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputTextFlags_Multiline = 67108864,
  ImGuiInputTextFlags_MergedItem = 134217728,
  ImGuiInputTextFlags_LocalizeDecimalPoint = 268435456
}
global ImGuiButtonFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiButtonFlags_PressedOnClick = 16,
  ImGuiButtonFlags_PressedOnClickRelease = 32,
  ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 64,
  ImGuiButtonFlags_PressedOnRelease = 128,
  ImGuiButtonFlags_PressedOnDoubleClick = 256,
  ImGuiButtonFlags_PressedOnDragDropHold = 512,
  ImGuiButtonFlags_FlattenChildren = 2048,
  ImGuiButtonFlags_AllowOverlap = 4096,
  ImGuiButtonFlags_AlignTextBaseLine = 32768,
  ImGuiButtonFlags_NoKeyModsAllowed = 65536,
  ImGuiButtonFlags_NoHoldingActiveId = 131072,
  ImGuiButtonFlags_NoNavFocus = 262144,
  ImGuiButtonFlags_NoHoveredOnFocus = 524288,
  ImGuiButtonFlags_NoSetKeyOwner = 1048576,
  ImGuiButtonFlags_NoTestKeyOwner = 2097152,
  ImGuiButtonFlags_NoFocus = 4194304,
  ImGuiButtonFlags_PressedOnMask_ = 1008,
  ImGuiButtonFlags_PressedOnDefault_ = 32
}
global ImGuiComboFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiComboFlags_CustomPreview = 1048576
}
global ImGuiSliderFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSliderFlags_Vertical = 1048576,
  ImGuiSliderFlags_ReadOnly = 2097152
}
global ImGuiSelectableFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSelectableFlags_NoHoldingActiveID = 1048576,
  ImGuiSelectableFlags_SelectOnNav = 2097152,
  ImGuiSelectableFlags_SelectOnClick = 4194304,
  ImGuiSelectableFlags_SelectOnRelease = 8388608,
  ImGuiSelectableFlags_SpanAvailWidth = 16777216,
  ImGuiSelectableFlags_SetNavIdOnHover = 33554432,
  ImGuiSelectableFlags_NoPadWithHalfSpacing = 67108864,
  ImGuiSelectableFlags_NoSetKeyOwner = 134217728
}
global ImGuiTreeNodeFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTreeNodeFlags_NoNavFocus = 134217728,
  ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 268435456,
  ImGuiTreeNodeFlags_UpsideDownArrow = 536870912,
  ImGuiTreeNodeFlags_OpenOnMask_ = 192,
  ImGuiTreeNodeFlags_DrawLinesMask_ = 1835008
}
global ImGuiSeparatorFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiSeparatorFlags_None = 0,
  ImGuiSeparatorFlags_Horizontal = 1,
  ImGuiSeparatorFlags_Vertical = 2,
  ImGuiSeparatorFlags_SpanAllColumns = 4
}
global ImGuiFocusRequestFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiFocusRequestFlags_None = 0,
  ImGuiFocusRequestFlags_RestoreFocusedChild = 1,
  ImGuiFocusRequestFlags_UnlessBelowModal = 2
}
global ImGuiTextFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTextFlags_None = 0,
  ImGuiTextFlags_NoWidthForLargeClippedText = 1
}
global ImGuiTooltipFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTooltipFlags_None = 0,
  ImGuiTooltipFlags_OverridePrevious = 2
}
global ImGuiLayoutType_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiLayoutType_Horizontal = 0,
  ImGuiLayoutType_Vertical = 1
}
global ImGuiLogFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiLogFlags_None = 0,
  ImGuiLogFlags_OutputTTY = 1,
  ImGuiLogFlags_OutputFile = 2,
  ImGuiLogFlags_OutputBuffer = 4,
  ImGuiLogFlags_OutputClipboard = 8,
  ImGuiLogFlags_OutputMask_ = 15
}
global ImGuiAxis: type <cimport,nodecl,using> = @enum(cint){
  ImGuiAxis_None = -1,
  ImGuiAxis_X = 0,
  ImGuiAxis_Y = 1
}
global ImGuiPlotType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiPlotType_Lines = 0,
  ImGuiPlotType_Histogram = 1
}
global ImGuiComboPreviewData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiComboPreviewData = @record{
  PreviewRect: ImRect,
  BackupCursorPos: ImVec2,
  BackupCursorMaxPos: ImVec2,
  BackupCursorPosPrevLine: ImVec2,
  BackupPrevLineTextBaseOffset: float32,
  BackupLayout: ImGuiLayoutType
}
ImGuiGroupData = @record{
  WindowID: ImGuiID,
  BackupCursorPos: ImVec2,
  BackupCursorMaxPos: ImVec2,
  BackupCursorPosPrevLine: ImVec2,
  BackupIndent: ImVec1,
  BackupGroupOffset: ImVec1,
  BackupCurrLineSize: ImVec2,
  BackupCurrLineTextBaseOffset: float32,
  BackupActiveIdIsAlive: ImGuiID,
  BackupDeactivatedIdIsAlive: boolean,
  BackupHoveredIdIsAlive: boolean,
  BackupIsSameLine: boolean,
  EmitItem: boolean
}
ImGuiMenuColumns = @record{
  TotalWidth: ImU32,
  NextTotalWidth: ImU32,
  Spacing: ImU16,
  OffsetIcon: ImU16,
  OffsetLabel: ImU16,
  OffsetShortcut: ImU16,
  OffsetMark: ImU16,
  Widths: [4]ImU16
}
global ImGuiInputTextDeactivatedState: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputTextDeactivatedState = @record{
  ID: ImGuiID,
  TextA: ImVector_char
}
ImGuiInputTextState = @record{
  Ctx: *ImGuiContext,
  Stb: *ImStbTexteditState,
  Flags: ImGuiInputTextFlags,
  ID: ImGuiID,
  TextLen: cint,
  TextSrc: cstring,
  TextA: ImVector_char,
  TextToRevertTo: ImVector_char,
  CallbackTextBackup: ImVector_char,
  BufCapacity: cint,
  Scroll: ImVec2,
  CursorAnim: float32,
  CursorFollow: boolean,
  SelectedAllMouseLock: boolean,
  Edited: boolean,
  WantReloadUserBuf: boolean,
  ReloadSelectionStart: cint,
  ReloadSelectionEnd: cint
}
global ImGuiWindowRefreshFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiWindowRefreshFlags_None = 0,
  ImGuiWindowRefreshFlags_TryToAvoidRefresh = 1,
  ImGuiWindowRefreshFlags_RefreshOnHover = 2,
  ImGuiWindowRefreshFlags_RefreshOnFocus = 4
}
global ImGuiNextWindowDataFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNextWindowDataFlags_None = 0,
  ImGuiNextWindowDataFlags_HasPos = 1,
  ImGuiNextWindowDataFlags_HasSize = 2,
  ImGuiNextWindowDataFlags_HasContentSize = 4,
  ImGuiNextWindowDataFlags_HasCollapsed = 8,
  ImGuiNextWindowDataFlags_HasSizeConstraint = 16,
  ImGuiNextWindowDataFlags_HasFocus = 32,
  ImGuiNextWindowDataFlags_HasBgAlpha = 64,
  ImGuiNextWindowDataFlags_HasScroll = 128,
  ImGuiNextWindowDataFlags_HasWindowFlags = 256,
  ImGuiNextWindowDataFlags_HasChildFlags = 512,
  ImGuiNextWindowDataFlags_HasRefreshPolicy = 1024
}
ImGuiNextWindowData = @record{
  HasFlags: ImGuiNextWindowDataFlags,
  PosCond: ImGuiCond,
  SizeCond: ImGuiCond,
  CollapsedCond: ImGuiCond,
  PosVal: ImVec2,
  PosPivotVal: ImVec2,
  SizeVal: ImVec2,
  ContentSizeVal: ImVec2,
  ScrollVal: ImVec2,
  WindowFlags: ImGuiWindowFlags,
  ChildFlags: ImGuiChildFlags,
  CollapsedVal: boolean,
  SizeConstraintRect: ImRect,
  SizeCallback: ImGuiSizeCallback,
  SizeCallbackUserData: pointer,
  BgAlphaVal: float32,
  MenuBarOffsetMinVal: ImVec2,
  RefreshFlagsVal: ImGuiWindowRefreshFlags
}
global ImGuiNextItemDataFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNextItemDataFlags_None = 0,
  ImGuiNextItemDataFlags_HasWidth = 1,
  ImGuiNextItemDataFlags_HasOpen = 2,
  ImGuiNextItemDataFlags_HasShortcut = 4,
  ImGuiNextItemDataFlags_HasRefVal = 8,
  ImGuiNextItemDataFlags_HasStorageID = 16
}
ImGuiNextItemData = @record{
  HasFlags: ImGuiNextItemDataFlags,
  ItemFlags: ImGuiItemFlags,
  FocusScopeId: ImGuiID,
  SelectionUserData: ImGuiSelectionUserData,
  Width: float32,
  Shortcut: ImGuiKeyChord,
  ShortcutFlags: ImGuiInputFlags,
  OpenVal: boolean,
  OpenCond: ImU8,
  RefVal: ImGuiDataTypeStorage,
  StorageId: ImGuiID
}
ImGuiLastItemData = @record{
  ID: ImGuiID,
  ItemFlags: ImGuiItemFlags,
  StatusFlags: ImGuiItemStatusFlags,
  Rect: ImRect,
  NavRect: ImRect,
  DisplayRect: ImRect,
  ClipRect: ImRect,
  Shortcut: ImGuiKeyChord
}
ImGuiTreeNodeStackData = @record{
  ID: ImGuiID,
  TreeFlags: ImGuiTreeNodeFlags,
  ItemFlags: ImGuiItemFlags,
  NavRect: ImRect,
  DrawLinesX1: float32,
  DrawLinesToNodesY2: float32,
  DrawLinesTableColumn: ImGuiTableColumnIdx
}
ImGuiErrorRecoveryState = @record{
  SizeOfWindowStack: cshort,
  SizeOfIDStack: cshort,
  SizeOfTreeStack: cshort,
  SizeOfColorStack: cshort,
  SizeOfStyleVarStack: cshort,
  SizeOfFontStack: cshort,
  SizeOfFocusScopeStack: cshort,
  SizeOfGroupStack: cshort,
  SizeOfItemFlagsStack: cshort,
  SizeOfBeginPopupStack: cshort,
  SizeOfDisabledStack: cshort
}
global ImGuiWindowStackData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiWindowStackData = @record{
  Window: *ImGuiWindow,
  ParentLastItemDataBackup: ImGuiLastItemData,
  StackSizesInBegin: ImGuiErrorRecoveryState,
  DisabledOverrideReenable: boolean,
  DisabledOverrideReenableAlphaBackup: float32
}
global ImGuiShrinkWidthItem: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiShrinkWidthItem = @record{
  Index: cint,
  Width: float32,
  InitialWidth: float32
}
global ImGuiPtrOrIndex: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiPtrOrIndex = @record{
  Ptr: pointer,
  Index: cint
}
ImGuiDeactivatedItemData = @record{
  ID: ImGuiID,
  ElapseFrame: cint,
  HasBeenEditedBefore: boolean,
  IsAlive: boolean
}
global ImGuiPopupPositionPolicy: type <cimport,nodecl,using> = @enum(cint){
  ImGuiPopupPositionPolicy_Default = 0,
  ImGuiPopupPositionPolicy_ComboBox = 1,
  ImGuiPopupPositionPolicy_Tooltip = 2
}
ImGuiPopupData = @record{
  PopupId: ImGuiID,
  Window: *ImGuiWindow,
  RestoreNavWindow: *ImGuiWindow,
  ParentNavLayer: cint,
  OpenFrameCount: cint,
  OpenParentId: ImGuiID,
  OpenPopupPos: ImVec2,
  OpenMousePos: ImVec2
}
global ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN: type <cimport,nodecl> = @record{
  Storage: [5]ImU32
}
global ImBitArrayForNamedKeys: type <cimport,nodecl> = @ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN
global ImGuiInputEventType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputEventType_None = 0,
  ImGuiInputEventType_MousePos = 1,
  ImGuiInputEventType_MouseWheel = 2,
  ImGuiInputEventType_MouseButton = 3,
  ImGuiInputEventType_Key = 4,
  ImGuiInputEventType_Text = 5,
  ImGuiInputEventType_Focus = 6,
  ImGuiInputEventType_COUNT = 7
}
global ImGuiInputSource: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputSource_None = 0,
  ImGuiInputSource_Mouse = 1,
  ImGuiInputSource_Keyboard = 2,
  ImGuiInputSource_Gamepad = 3,
  ImGuiInputSource_COUNT = 4
}
global ImGuiInputEventMousePos: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventMousePos = @record{
  PosX: float32,
  PosY: float32,
  MouseSource: ImGuiMouseSource
}
global ImGuiInputEventMouseWheel: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventMouseWheel = @record{
  WheelX: float32,
  WheelY: float32,
  MouseSource: ImGuiMouseSource
}
global ImGuiInputEventMouseButton: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventMouseButton = @record{
  Button: cint,
  Down: boolean,
  MouseSource: ImGuiMouseSource
}
global ImGuiInputEventKey: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventKey = @record{
  Key: ImGuiKey,
  Down: boolean,
  AnalogValue: float32
}
global ImGuiInputEventText: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventText = @record{
  Char: cuint
}
global ImGuiInputEventAppFocused: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEventAppFocused = @record{
  Focused: boolean
}
global ImGuiInputEvent: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiInputEvent = @record{
  Type: ImGuiInputEventType,
  Source: ImGuiInputSource,
  EventId: ImU32,
  __unnamed4: union{
    MousePos: ImGuiInputEventMousePos,
    MouseWheel: ImGuiInputEventMouseWheel,
    MouseButton: ImGuiInputEventMouseButton,
    Key: ImGuiInputEventKey,
    Text: ImGuiInputEventText,
    AppFocused: ImGuiInputEventAppFocused
  },
  AddedByTestEngine: boolean
}
global ImGuiKeyRoutingIndex: type <cimport,nodecl> = @ImS16
global ImGuiKeyRoutingData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiKeyRoutingData = @record{
  NextEntryIndex: ImGuiKeyRoutingIndex,
  Mods: ImU16,
  RoutingCurrScore: ImU8,
  RoutingNextScore: ImU8,
  RoutingCurr: ImGuiID,
  RoutingNext: ImGuiID
}
global ImGuiKeyRoutingTable: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiKeyRoutingData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiKeyRoutingData
}
ImGuiKeyRoutingTable = @record{
  Index: [155]ImGuiKeyRoutingIndex,
  Entries: ImVector_ImGuiKeyRoutingData,
  EntriesNext: ImVector_ImGuiKeyRoutingData
}
global ImGuiKeyOwnerData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiKeyOwnerData = @record{
  OwnerCurr: ImGuiID,
  OwnerNext: ImGuiID,
  LockThisFrame: boolean,
  LockUntilRelease: boolean
}
global ImGuiInputFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiInputFlags_RepeatRateDefault = 2,
  ImGuiInputFlags_RepeatRateNavMove = 4,
  ImGuiInputFlags_RepeatRateNavTweak = 8,
  ImGuiInputFlags_RepeatUntilRelease = 16,
  ImGuiInputFlags_RepeatUntilKeyModsChange = 32,
  ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 64,
  ImGuiInputFlags_RepeatUntilOtherKeyPress = 128,
  ImGuiInputFlags_LockThisFrame = 1048576,
  ImGuiInputFlags_LockUntilRelease = 2097152,
  ImGuiInputFlags_CondHovered = 4194304,
  ImGuiInputFlags_CondActive = 8388608,
  ImGuiInputFlags_CondDefault_ = 12582912,
  ImGuiInputFlags_RepeatRateMask_ = 14,
  ImGuiInputFlags_RepeatUntilMask_ = 240,
  ImGuiInputFlags_RepeatMask_ = 255,
  ImGuiInputFlags_CondMask_ = 12582912,
  ImGuiInputFlags_RouteTypeMask_ = 15360,
  ImGuiInputFlags_RouteOptionsMask_ = 245760,
  ImGuiInputFlags_SupportedByIsKeyPressed = 255,
  ImGuiInputFlags_SupportedByIsMouseClicked = 1,
  ImGuiInputFlags_SupportedByShortcut = 261375,
  ImGuiInputFlags_SupportedBySetNextItemShortcut = 523519,
  ImGuiInputFlags_SupportedBySetKeyOwner = 3145728,
  ImGuiInputFlags_SupportedBySetItemKeyOwner = 15728640
}
global ImGuiListClipperRange: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiListClipperRange = @record{
  Min: cint,
  Max: cint,
  PosToIndexConvert: boolean,
  PosToIndexOffsetMin: ImS8,
  PosToIndexOffsetMax: ImS8
}
global ImGuiListClipperData: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiListClipperRange: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiListClipperRange
}
ImGuiListClipperData = @record{
  ListClipper: *ImGuiListClipper,
  LossynessOffset: float32,
  StepNo: cint,
  ItemsFrozen: cint,
  Ranges: ImVector_ImGuiListClipperRange
}
global ImGuiActivateFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiActivateFlags_None = 0,
  ImGuiActivateFlags_PreferInput = 1,
  ImGuiActivateFlags_PreferTweak = 2,
  ImGuiActivateFlags_TryToPreserveState = 4,
  ImGuiActivateFlags_FromTabbing = 8,
  ImGuiActivateFlags_FromShortcut = 16
}
global ImGuiScrollFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiScrollFlags_None = 0,
  ImGuiScrollFlags_KeepVisibleEdgeX = 1,
  ImGuiScrollFlags_KeepVisibleEdgeY = 2,
  ImGuiScrollFlags_KeepVisibleCenterX = 4,
  ImGuiScrollFlags_KeepVisibleCenterY = 8,
  ImGuiScrollFlags_AlwaysCenterX = 16,
  ImGuiScrollFlags_AlwaysCenterY = 32,
  ImGuiScrollFlags_NoScrollParent = 64,
  ImGuiScrollFlags_MaskX_ = 21,
  ImGuiScrollFlags_MaskY_ = 42
}
global ImGuiNavRenderCursorFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNavRenderCursorFlags_None = 0,
  ImGuiNavRenderCursorFlags_Compact = 2,
  ImGuiNavRenderCursorFlags_AlwaysDraw = 4,
  ImGuiNavRenderCursorFlags_NoRounding = 8
}
global ImGuiNavMoveFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNavMoveFlags_None = 0,
  ImGuiNavMoveFlags_LoopX = 1,
  ImGuiNavMoveFlags_LoopY = 2,
  ImGuiNavMoveFlags_WrapX = 4,
  ImGuiNavMoveFlags_WrapY = 8,
  ImGuiNavMoveFlags_WrapMask_ = 15,
  ImGuiNavMoveFlags_AllowCurrentNavId = 16,
  ImGuiNavMoveFlags_AlsoScoreVisibleSet = 32,
  ImGuiNavMoveFlags_ScrollToEdgeY = 64,
  ImGuiNavMoveFlags_Forwarded = 128,
  ImGuiNavMoveFlags_DebugNoResult = 256,
  ImGuiNavMoveFlags_FocusApi = 512,
  ImGuiNavMoveFlags_IsTabbing = 1024,
  ImGuiNavMoveFlags_IsPageMove = 2048,
  ImGuiNavMoveFlags_Activate = 4096,
  ImGuiNavMoveFlags_NoSelect = 8192,
  ImGuiNavMoveFlags_NoSetNavCursorVisible = 16384,
  ImGuiNavMoveFlags_NoClearActiveId = 32768
}
global ImGuiNavLayer: type <cimport,nodecl,using> = @enum(cint){
  ImGuiNavLayer_Main = 0,
  ImGuiNavLayer_Menu = 1,
  ImGuiNavLayer_COUNT = 2
}
ImGuiNavItemData = @record{
  Window: *ImGuiWindow,
  ID: ImGuiID,
  FocusScopeId: ImGuiID,
  RectRel: ImRect,
  ItemFlags: ImGuiItemFlags,
  DistBox: float32,
  DistCenter: float32,
  DistAxial: float32,
  SelectionUserData: ImGuiSelectionUserData
}
global ImGuiFocusScopeData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiFocusScopeData = @record{
  ID: ImGuiID,
  WindowID: ImGuiID
}
global ImGuiTypingSelectFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTypingSelectFlags_None = 0,
  ImGuiTypingSelectFlags_AllowBackspace = 1,
  ImGuiTypingSelectFlags_AllowSingleCharMode = 2
}
ImGuiTypingSelectRequest = @record{
  Flags: ImGuiTypingSelectFlags,
  SearchBufferLen: cint,
  SearchBuffer: cstring,
  SelectRequest: boolean,
  SingleCharMode: boolean,
  SingleCharSize: ImS8
}
ImGuiTypingSelectState = @record{
  Request: ImGuiTypingSelectRequest,
  SearchBuffer: [64]cchar,
  FocusScope: ImGuiID,
  LastRequestFrame: cint,
  LastRequestTime: float32,
  SingleCharModeLock: boolean
}
global ImGuiOldColumnFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiOldColumnFlags_None = 0,
  ImGuiOldColumnFlags_NoBorder = 1,
  ImGuiOldColumnFlags_NoResize = 2,
  ImGuiOldColumnFlags_NoPreserveWidths = 4,
  ImGuiOldColumnFlags_NoForceWithinWindow = 8,
  ImGuiOldColumnFlags_GrowParentContentsSize = 16
}
ImGuiOldColumnData = @record{
  OffsetNorm: float32,
  OffsetNormBeforeResize: float32,
  Flags: ImGuiOldColumnFlags,
  ClipRect: ImRect
}
global ImVector_ImGuiOldColumnData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiOldColumnData
}
ImGuiOldColumns = @record{
  ID: ImGuiID,
  Flags: ImGuiOldColumnFlags,
  IsFirstFrame: boolean,
  IsBeingResized: boolean,
  Current: cint,
  Count: cint,
  OffMinX: float32,
  OffMaxX: float32,
  LineMinY: float32,
  LineMaxY: float32,
  HostCursorPosY: float32,
  HostCursorMaxPosX: float32,
  HostInitialClipRect: ImRect,
  HostBackupClipRect: ImRect,
  HostBackupParentWorkRect: ImRect,
  Columns: ImVector_ImGuiOldColumnData,
  Splitter: ImDrawListSplitter
}
ImGuiBoxSelectState = @record{
  ID: ImGuiID,
  IsActive: boolean,
  IsStarting: boolean,
  IsStartedFromVoid: boolean,
  IsStartedSetNavIdOnce: boolean,
  RequestClear: boolean,
  KeyMods: ImGuiKeyChord,
  StartPosRel: ImVec2,
  EndPosRel: ImVec2,
  ScrollAccum: ImVec2,
  Window: *ImGuiWindow,
  UnclipMode: boolean,
  UnclipRect: ImRect,
  BoxSelectRectPrev: ImRect,
  BoxSelectRectCurr: ImRect
}
ImGuiMultiSelectTempData = @record{
  IO: ImGuiMultiSelectIO,
  Storage: *ImGuiMultiSelectState,
  FocusScopeId: ImGuiID,
  Flags: ImGuiMultiSelectFlags,
  ScopeRectMin: ImVec2,
  BackupCursorMaxPos: ImVec2,
  LastSubmittedItem: ImGuiSelectionUserData,
  BoxSelectId: ImGuiID,
  KeyMods: ImGuiKeyChord,
  LoopRequestSetAll: ImS8,
  IsEndIO: boolean,
  IsFocused: boolean,
  IsKeyboardSetRange: boolean,
  NavIdPassedBy: boolean,
  RangeSrcPassedBy: boolean,
  RangeDstPassedBy: boolean
}
ImGuiMultiSelectState = @record{
  Window: *ImGuiWindow,
  ID: ImGuiID,
  LastFrameActive: cint,
  LastSelectionSize: cint,
  RangeSelected: ImS8,
  NavIdSelected: ImS8,
  RangeSrcItem: ImGuiSelectionUserData,
  NavIdItem: ImGuiSelectionUserData
}
global ImGuiViewportP: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiViewportP = @record{
  _ImGuiViewport: ImGuiViewport,
  BgFgDrawListsLastFrame: [2]cint,
  BgFgDrawLists: [2]*ImDrawList,
  DrawDataP: ImDrawData,
  DrawDataBuilder: ImDrawDataBuilder,
  WorkInsetMin: ImVec2,
  WorkInsetMax: ImVec2,
  BuildWorkInsetMin: ImVec2,
  BuildWorkInsetMax: ImVec2
}
ImGuiWindowSettings = @record{
  ID: ImGuiID,
  Pos: ImVec2ih,
  Size: ImVec2ih,
  Collapsed: boolean,
  IsChild: boolean,
  WantApply: boolean,
  WantDelete: boolean
}
ImGuiSettingsHandler = @record{
  TypeName: cstring,
  TypeHash: ImGuiID,
  ClearAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  ReadInitFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  ReadOpenFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, name: cstring): pointer,
  ReadLineFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, entry: pointer, line: cstring): void,
  ApplyAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler): void,
  WriteAllFn: function(ctx: *ImGuiContext, handler: *ImGuiSettingsHandler, out_buf: *ImGuiTextBuffer): void,
  UserData: pointer
}
global ImGuiLocKey: type <cimport,nodecl,using> = @enum(cint){
  ImGuiLocKey_VersionStr = 0,
  ImGuiLocKey_TableSizeOne = 1,
  ImGuiLocKey_TableSizeAllFit = 2,
  ImGuiLocKey_TableSizeAllDefault = 3,
  ImGuiLocKey_TableResetOrder = 4,
  ImGuiLocKey_WindowingMainMenuBar = 5,
  ImGuiLocKey_WindowingPopup = 6,
  ImGuiLocKey_WindowingUntitled = 7,
  ImGuiLocKey_OpenLink_s = 8,
  ImGuiLocKey_CopyLink = 9,
  ImGuiLocKey_COUNT = 10
}
ImGuiLocEntry = @record{
  Key: ImGuiLocKey,
  Text: cstring
}
global ImGuiErrorCallback: type <cimport,nodecl> = @function(ctx: *ImGuiContext, user_data: pointer, msg: cstring): void
global ImGuiDebugLogFlags_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiDebugLogFlags_None = 0,
  ImGuiDebugLogFlags_EventError = 1,
  ImGuiDebugLogFlags_EventActiveId = 2,
  ImGuiDebugLogFlags_EventFocus = 4,
  ImGuiDebugLogFlags_EventPopup = 8,
  ImGuiDebugLogFlags_EventNav = 16,
  ImGuiDebugLogFlags_EventClipper = 32,
  ImGuiDebugLogFlags_EventSelection = 64,
  ImGuiDebugLogFlags_EventIO = 128,
  ImGuiDebugLogFlags_EventFont = 256,
  ImGuiDebugLogFlags_EventInputRouting = 512,
  ImGuiDebugLogFlags_EventDocking = 1024,
  ImGuiDebugLogFlags_EventViewport = 2048,
  ImGuiDebugLogFlags_EventMask_ = 4095,
  ImGuiDebugLogFlags_OutputToTTY = 1048576,
  ImGuiDebugLogFlags_OutputToTestEngine = 2097152
}
global ImGuiDebugAllocEntry: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiDebugAllocEntry = @record{
  FrameCount: cint,
  AllocCount: ImS16,
  FreeCount: ImS16
}
global ImGuiDebugAllocInfo: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiDebugAllocInfo = @record{
  TotalAllocCount: cint,
  TotalFreeCount: cint,
  LastEntriesIdx: ImS16,
  LastEntriesBuf: [6]ImGuiDebugAllocEntry
}
ImGuiMetricsConfig = @record{
  ShowDebugLog: boolean,
  ShowIDStackTool: boolean,
  ShowWindowsRects: boolean,
  ShowWindowsBeginOrder: boolean,
  ShowTablesRects: boolean,
  ShowDrawCmdMesh: boolean,
  ShowDrawCmdBoundingBoxes: boolean,
  ShowTextEncodingViewer: boolean,
  ShowTextureUsedRect: boolean,
  ShowWindowsRectsType: cint,
  ShowTablesRectsType: cint,
  HighlightMonitorIdx: cint,
  HighlightViewportID: ImGuiID,
  ShowFontPreview: boolean
}
global ImGuiStackLevelInfo: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiStackLevelInfo = @record{
  ID: ImGuiID,
  QueryFrameCount: ImS8,
  QuerySuccess: boolean,
  DataType: ImGuiDataType,
  Desc: [57]cchar
}
global ImGuiIDStackTool: type <cimport,nodecl,forwarddecl> = @record{}
global ImVector_ImGuiStackLevelInfo: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStackLevelInfo
}
ImGuiIDStackTool = @record{
  LastActiveFrame: cint,
  StackLevel: cint,
  QueryId: ImGuiID,
  Results: ImVector_ImGuiStackLevelInfo,
  CopyToClipboardOnCtrlC: boolean,
  CopyToClipboardLastTime: float32,
  ResultPathBuf: ImGuiTextBuffer
}
global ImGuiContextHookCallback: type <cimport,nodecl> = @function(ctx: *ImGuiContext, hook: *ImGuiContextHook): void
global ImGuiContextHookType: type <cimport,nodecl,using> = @enum(cint){
  ImGuiContextHookType_NewFramePre = 0,
  ImGuiContextHookType_NewFramePost = 1,
  ImGuiContextHookType_EndFramePre = 2,
  ImGuiContextHookType_EndFramePost = 3,
  ImGuiContextHookType_RenderPre = 4,
  ImGuiContextHookType_RenderPost = 5,
  ImGuiContextHookType_Shutdown = 6,
  ImGuiContextHookType_PendingRemoval_ = 7
}
ImGuiContextHook = @record{
  HookId: ImGuiID,
  Type: ImGuiContextHookType,
  Owner: ImGuiID,
  Callback: ImGuiContextHookCallback,
  UserData: pointer
}
global ImVector_ImFontAtlasPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontAtlas
}
global ImVector_ImGuiInputEvent: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiInputEvent
}
global ImVector_ImGuiWindowPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImGuiWindow
}
global ImVector_ImGuiWindowStackData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiWindowStackData
}
global ImVector_ImGuiColorMod: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiColorMod
}
global ImVector_ImGuiStyleMod: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiStyleMod
}
global ImVector_ImFontStackData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontStackData
}
global ImVector_ImGuiFocusScopeData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiFocusScopeData
}
global ImVector_ImGuiItemFlags: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiItemFlags
}
global ImVector_ImGuiGroupData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiGroupData
}
global ImVector_ImGuiPopupData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiPopupData
}
global ImVector_ImGuiTreeNodeStackData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTreeNodeStackData
}
global ImVector_ImGuiViewportPPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImGuiViewportP
}
global ImVector_unsigned_char: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *cuchar
}
global ImVector_ImGuiListClipperData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiListClipperData
}
global ImVector_ImGuiTableTempData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableTempData
}
global ImVector_ImGuiTable: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTable
}
global ImPool_ImGuiTable: type <cimport,nodecl> = @record{
  Buf: ImVector_ImGuiTable,
  Map: ImGuiStorage,
  FreeIdx: ImPoolIdx,
  AliveCount: ImPoolIdx
}
global ImVector_ImGuiTabBar: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTabBar
}
global ImPool_ImGuiTabBar: type <cimport,nodecl> = @record{
  Buf: ImVector_ImGuiTabBar,
  Map: ImGuiStorage,
  FreeIdx: ImPoolIdx,
  AliveCount: ImPoolIdx
}
global ImVector_ImGuiPtrOrIndex: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiPtrOrIndex
}
global ImVector_ImGuiShrinkWidthItem: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiShrinkWidthItem
}
global ImVector_ImGuiMultiSelectTempData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiMultiSelectTempData
}
global ImVector_ImGuiMultiSelectState: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiMultiSelectState
}
global ImPool_ImGuiMultiSelectState: type <cimport,nodecl> = @record{
  Buf: ImVector_ImGuiMultiSelectState,
  Map: ImGuiStorage,
  FreeIdx: ImPoolIdx,
  AliveCount: ImPoolIdx
}
global ImVector_ImGuiID: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiID
}
global ImVector_ImGuiSettingsHandler: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiSettingsHandler
}
global ImChunkStream_ImGuiWindowSettings: type <cimport,nodecl> = @record{
  Buf: ImVector_char
}
global ImChunkStream_ImGuiTableSettings: type <cimport,nodecl> = @record{
  Buf: ImVector_char
}
global ImVector_ImGuiContextHook: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiContextHook
}
ImGuiContext = @record{
  Initialized: boolean,
  IO: ImGuiIO,
  PlatformIO: ImGuiPlatformIO,
  Style: ImGuiStyle,
  FontAtlases: ImVector_ImFontAtlasPtr,
  Font: *ImFont,
  FontBaked: *ImFontBaked,
  FontSize: float32,
  FontSizeBase: float32,
  FontBakedScale: float32,
  FontRasterizerDensity: float32,
  CurrentDpiScale: float32,
  DrawListSharedData: ImDrawListSharedData,
  Time: float64,
  FrameCount: cint,
  FrameCountEnded: cint,
  FrameCountRendered: cint,
  WithinEndChildID: ImGuiID,
  WithinFrameScope: boolean,
  WithinFrameScopeWithImplicitWindow: boolean,
  GcCompactAll: boolean,
  TestEngineHookItems: boolean,
  TestEngine: pointer,
  ContextName: [16]cchar,
  InputEventsQueue: ImVector_ImGuiInputEvent,
  InputEventsTrail: ImVector_ImGuiInputEvent,
  InputEventsNextMouseSource: ImGuiMouseSource,
  InputEventsNextEventId: ImU32,
  Windows: ImVector_ImGuiWindowPtr,
  WindowsFocusOrder: ImVector_ImGuiWindowPtr,
  WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
  CurrentWindowStack: ImVector_ImGuiWindowStackData,
  WindowsById: ImGuiStorage,
  WindowsActiveCount: cint,
  WindowsBorderHoverPadding: float32,
  DebugBreakInWindow: ImGuiID,
  CurrentWindow: *ImGuiWindow,
  HoveredWindow: *ImGuiWindow,
  HoveredWindowUnderMovingWindow: *ImGuiWindow,
  HoveredWindowBeforeClear: *ImGuiWindow,
  MovingWindow: *ImGuiWindow,
  WheelingWindow: *ImGuiWindow,
  WheelingWindowRefMousePos: ImVec2,
  WheelingWindowStartFrame: cint,
  WheelingWindowScrolledFrame: cint,
  WheelingWindowReleaseTimer: float32,
  WheelingWindowWheelRemainder: ImVec2,
  WheelingAxisAvg: ImVec2,
  DebugDrawIdConflictsId: ImGuiID,
  DebugHookIdInfo: ImGuiID,
  HoveredId: ImGuiID,
  HoveredIdPreviousFrame: ImGuiID,
  HoveredIdPreviousFrameItemCount: cint,
  HoveredIdTimer: float32,
  HoveredIdNotActiveTimer: float32,
  HoveredIdAllowOverlap: boolean,
  HoveredIdIsDisabled: boolean,
  ItemUnclipByLog: boolean,
  ActiveId: ImGuiID,
  ActiveIdIsAlive: ImGuiID,
  ActiveIdTimer: float32,
  ActiveIdIsJustActivated: boolean,
  ActiveIdAllowOverlap: boolean,
  ActiveIdNoClearOnFocusLoss: boolean,
  ActiveIdHasBeenPressedBefore: boolean,
  ActiveIdHasBeenEditedBefore: boolean,
  ActiveIdHasBeenEditedThisFrame: boolean,
  ActiveIdFromShortcut: boolean,
  ActiveIdMouseButton: cint,
  ActiveIdClickOffset: ImVec2,
  ActiveIdWindow: *ImGuiWindow,
  ActiveIdSource: ImGuiInputSource,
  ActiveIdPreviousFrame: ImGuiID,
  DeactivatedItemData: ImGuiDeactivatedItemData,
  ActiveIdValueOnActivation: ImGuiDataTypeStorage,
  LastActiveId: ImGuiID,
  LastActiveIdTimer: float32,
  LastKeyModsChangeTime: float64,
  LastKeyModsChangeFromNoneTime: float64,
  LastKeyboardKeyPressTime: float64,
  KeysMayBeCharInput: ImBitArrayForNamedKeys,
  KeysOwnerData: [155]ImGuiKeyOwnerData,
  KeysRoutingTable: ImGuiKeyRoutingTable,
  ActiveIdUsingNavDirMask: ImU32,
  ActiveIdUsingAllKeyboardKeys: boolean,
  DebugBreakInShortcutRouting: ImGuiKeyChord,
  CurrentFocusScopeId: ImGuiID,
  CurrentItemFlags: ImGuiItemFlags,
  DebugLocateId: ImGuiID,
  NextItemData: ImGuiNextItemData,
  LastItemData: ImGuiLastItemData,
  NextWindowData: ImGuiNextWindowData,
  DebugShowGroupRects: boolean,
  DebugFlashStyleColorIdx: ImGuiCol,
  ColorStack: ImVector_ImGuiColorMod,
  StyleVarStack: ImVector_ImGuiStyleMod,
  FontStack: ImVector_ImFontStackData,
  FocusScopeStack: ImVector_ImGuiFocusScopeData,
  ItemFlagsStack: ImVector_ImGuiItemFlags,
  GroupStack: ImVector_ImGuiGroupData,
  OpenPopupStack: ImVector_ImGuiPopupData,
  BeginPopupStack: ImVector_ImGuiPopupData,
  TreeNodeStack: ImVector_ImGuiTreeNodeStackData,
  Viewports: ImVector_ImGuiViewportPPtr,
  NavCursorVisible: boolean,
  NavHighlightItemUnderNav: boolean,
  NavMousePosDirty: boolean,
  NavIdIsAlive: boolean,
  NavId: ImGuiID,
  NavWindow: *ImGuiWindow,
  NavFocusScopeId: ImGuiID,
  NavLayer: ImGuiNavLayer,
  NavActivateId: ImGuiID,
  NavActivateDownId: ImGuiID,
  NavActivatePressedId: ImGuiID,
  NavActivateFlags: ImGuiActivateFlags,
  NavFocusRoute: ImVector_ImGuiFocusScopeData,
  NavHighlightActivatedId: ImGuiID,
  NavHighlightActivatedTimer: float32,
  NavNextActivateId: ImGuiID,
  NavNextActivateFlags: ImGuiActivateFlags,
  NavInputSource: ImGuiInputSource,
  NavLastValidSelectionUserData: ImGuiSelectionUserData,
  NavCursorHideFrames: ImS8,
  NavAnyRequest: boolean,
  NavInitRequest: boolean,
  NavInitRequestFromMove: boolean,
  NavInitResult: ImGuiNavItemData,
  NavMoveSubmitted: boolean,
  NavMoveScoringItems: boolean,
  NavMoveForwardToNextFrame: boolean,
  NavMoveFlags: ImGuiNavMoveFlags,
  NavMoveScrollFlags: ImGuiScrollFlags,
  NavMoveKeyMods: ImGuiKeyChord,
  NavMoveDir: ImGuiDir,
  NavMoveDirForDebug: ImGuiDir,
  NavMoveClipDir: ImGuiDir,
  NavScoringRect: ImRect,
  NavScoringNoClipRect: ImRect,
  NavScoringDebugCount: cint,
  NavTabbingDir: cint,
  NavTabbingCounter: cint,
  NavMoveResultLocal: ImGuiNavItemData,
  NavMoveResultLocalVisible: ImGuiNavItemData,
  NavMoveResultOther: ImGuiNavItemData,
  NavTabbingResultFirst: ImGuiNavItemData,
  NavJustMovedFromFocusScopeId: ImGuiID,
  NavJustMovedToId: ImGuiID,
  NavJustMovedToFocusScopeId: ImGuiID,
  NavJustMovedToKeyMods: ImGuiKeyChord,
  NavJustMovedToIsTabbing: boolean,
  NavJustMovedToHasSelectionData: boolean,
  ConfigNavWindowingWithGamepad: boolean,
  ConfigNavWindowingKeyNext: ImGuiKeyChord,
  ConfigNavWindowingKeyPrev: ImGuiKeyChord,
  NavWindowingTarget: *ImGuiWindow,
  NavWindowingTargetAnim: *ImGuiWindow,
  NavWindowingListWindow: *ImGuiWindow,
  NavWindowingTimer: float32,
  NavWindowingHighlightAlpha: float32,
  NavWindowingInputSource: ImGuiInputSource,
  NavWindowingToggleLayer: boolean,
  NavWindowingToggleKey: ImGuiKey,
  NavWindowingAccumDeltaPos: ImVec2,
  NavWindowingAccumDeltaSize: ImVec2,
  DimBgRatio: float32,
  DragDropActive: boolean,
  DragDropWithinSource: boolean,
  DragDropWithinTarget: boolean,
  DragDropSourceFlags: ImGuiDragDropFlags,
  DragDropSourceFrameCount: cint,
  DragDropMouseButton: cint,
  DragDropPayload: ImGuiPayload,
  DragDropTargetRect: ImRect,
  DragDropTargetClipRect: ImRect,
  DragDropTargetId: ImGuiID,
  DragDropAcceptFlags: ImGuiDragDropFlags,
  DragDropAcceptIdCurrRectSurface: float32,
  DragDropAcceptIdCurr: ImGuiID,
  DragDropAcceptIdPrev: ImGuiID,
  DragDropAcceptFrameCount: cint,
  DragDropHoldJustPressedId: ImGuiID,
  DragDropPayloadBufHeap: ImVector_unsigned_char,
  DragDropPayloadBufLocal: [16]cuchar,
  ClipperTempDataStacked: cint,
  ClipperTempData: ImVector_ImGuiListClipperData,
  CurrentTable: *ImGuiTable,
  DebugBreakInTable: ImGuiID,
  TablesTempDataStacked: cint,
  TablesTempData: ImVector_ImGuiTableTempData,
  Tables: ImPool_ImGuiTable,
  TablesLastTimeActive: ImVector_float,
  DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
  CurrentTabBar: *ImGuiTabBar,
  TabBars: ImPool_ImGuiTabBar,
  CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
  ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
  BoxSelectState: ImGuiBoxSelectState,
  CurrentMultiSelect: *ImGuiMultiSelectTempData,
  MultiSelectTempDataStacked: cint,
  MultiSelectTempData: ImVector_ImGuiMultiSelectTempData,
  MultiSelectStorage: ImPool_ImGuiMultiSelectState,
  HoverItemDelayId: ImGuiID,
  HoverItemDelayIdPreviousFrame: ImGuiID,
  HoverItemDelayTimer: float32,
  HoverItemDelayClearTimer: float32,
  HoverItemUnlockedStationaryId: ImGuiID,
  HoverWindowUnlockedStationaryId: ImGuiID,
  MouseCursor: ImGuiMouseCursor,
  MouseStationaryTimer: float32,
  MouseLastValidPos: ImVec2,
  InputTextState: ImGuiInputTextState,
  InputTextDeactivatedState: ImGuiInputTextDeactivatedState,
  InputTextPasswordFontBackupBaked: ImFontBaked,
  InputTextPasswordFontBackupFlags: ImFontFlags,
  TempInputId: ImGuiID,
  DataTypeZeroValue: ImGuiDataTypeStorage,
  BeginMenuDepth: cint,
  BeginComboDepth: cint,
  ColorEditOptions: ImGuiColorEditFlags,
  ColorEditCurrentID: ImGuiID,
  ColorEditSavedID: ImGuiID,
  ColorEditSavedHue: float32,
  ColorEditSavedSat: float32,
  ColorEditSavedColor: ImU32,
  ColorPickerRef: ImVec4,
  ComboPreviewData: ImGuiComboPreviewData,
  WindowResizeBorderExpectedRect: ImRect,
  WindowResizeRelativeMode: boolean,
  ScrollbarSeekMode: cshort,
  ScrollbarClickDeltaToGrabCenter: float32,
  SliderGrabClickOffset: float32,
  SliderCurrentAccum: float32,
  SliderCurrentAccumDirty: boolean,
  DragCurrentAccumDirty: boolean,
  DragCurrentAccum: float32,
  DragSpeedDefaultRatio: float32,
  DisabledAlphaBackup: float32,
  DisabledStackSize: cshort,
  TooltipOverrideCount: cshort,
  TooltipPreviousWindow: *ImGuiWindow,
  ClipboardHandlerData: ImVector_char,
  MenusIdSubmittedThisFrame: ImVector_ImGuiID,
  TypingSelectState: ImGuiTypingSelectState,
  PlatformImeData: ImGuiPlatformImeData,
  PlatformImeDataPrev: ImGuiPlatformImeData,
  UserTextures: ImVector_ImTextureDataPtr,
  SettingsLoaded: boolean,
  SettingsDirtyTimer: float32,
  SettingsIniData: ImGuiTextBuffer,
  SettingsHandlers: ImVector_ImGuiSettingsHandler,
  SettingsWindows: ImChunkStream_ImGuiWindowSettings,
  SettingsTables: ImChunkStream_ImGuiTableSettings,
  Hooks: ImVector_ImGuiContextHook,
  HookIdNext: ImGuiID,
  LocalizationTable: [10]cstring,
  LogEnabled: boolean,
  LogFlags: ImGuiLogFlags,
  LogWindow: *ImGuiWindow,
  LogFile: ImFileHandle,
  LogBuffer: ImGuiTextBuffer,
  LogNextPrefix: cstring,
  LogNextSuffix: cstring,
  LogLinePosY: float32,
  LogLineFirstItem: boolean,
  LogDepthRef: cint,
  LogDepthToExpand: cint,
  LogDepthToExpandDefault: cint,
  ErrorCallback: ImGuiErrorCallback,
  ErrorCallbackUserData: pointer,
  ErrorTooltipLockedPos: ImVec2,
  ErrorFirst: boolean,
  ErrorCountCurrentFrame: cint,
  StackSizesInNewFrame: ImGuiErrorRecoveryState,
  StackSizesInBeginForCurrentWindow: *ImGuiErrorRecoveryState,
  DebugDrawIdConflictsCount: cint,
  DebugLogFlags: ImGuiDebugLogFlags,
  DebugLogBuf: ImGuiTextBuffer,
  DebugLogIndex: ImGuiTextIndex,
  DebugLogSkippedErrors: cint,
  DebugLogAutoDisableFlags: ImGuiDebugLogFlags,
  DebugLogAutoDisableFrames: ImU8,
  DebugLocateFrames: ImU8,
  DebugBreakInLocateId: boolean,
  DebugBreakKeyChord: ImGuiKeyChord,
  DebugBeginReturnValueCullDepth: ImS8,
  DebugItemPickerActive: boolean,
  DebugItemPickerMouseButton: ImU8,
  DebugItemPickerBreakId: ImGuiID,
  DebugFlashStyleColorTime: float32,
  DebugFlashStyleColorBackup: ImVec4,
  DebugMetricsConfig: ImGuiMetricsConfig,
  DebugIDStackTool: ImGuiIDStackTool,
  DebugAllocInfo: ImGuiDebugAllocInfo,
  FramerateSecPerFrame: [60]float32,
  FramerateSecPerFrameIdx: cint,
  FramerateSecPerFrameCount: cint,
  FramerateSecPerFrameAccum: float32,
  WantCaptureMouseNextFrame: cint,
  WantCaptureKeyboardNextFrame: cint,
  WantTextInputNextFrame: cint,
  TempBuffer: ImVector_char,
  TempKeychordName: [64]cchar
}
ImGuiWindowTempData = @record{
  CursorPos: ImVec2,
  CursorPosPrevLine: ImVec2,
  CursorStartPos: ImVec2,
  CursorMaxPos: ImVec2,
  IdealMaxPos: ImVec2,
  CurrLineSize: ImVec2,
  PrevLineSize: ImVec2,
  CurrLineTextBaseOffset: float32,
  PrevLineTextBaseOffset: float32,
  IsSameLine: boolean,
  IsSetPos: boolean,
  Indent: ImVec1,
  ColumnsOffset: ImVec1,
  GroupOffset: ImVec1,
  CursorStartPosLossyness: ImVec2,
  NavLayerCurrent: ImGuiNavLayer,
  NavLayersActiveMask: cshort,
  NavLayersActiveMaskNext: cshort,
  NavIsScrollPushableX: boolean,
  NavHideHighlightOneFrame: boolean,
  NavWindowHasScrollY: boolean,
  MenuBarAppending: boolean,
  MenuBarOffset: ImVec2,
  MenuColumns: ImGuiMenuColumns,
  TreeDepth: cint,
  TreeHasStackDataDepthMask: ImU32,
  TreeRecordsClippedNodesY2Mask: ImU32,
  ChildWindows: ImVector_ImGuiWindowPtr,
  StateStorage: *ImGuiStorage,
  CurrentColumns: *ImGuiOldColumns,
  CurrentTableIdx: cint,
  LayoutType: ImGuiLayoutType,
  ParentLayoutType: ImGuiLayoutType,
  ModalDimBgColor: ImU32,
  WindowItemStatusFlags: ImGuiItemStatusFlags,
  ChildItemStatusFlags: ImGuiItemStatusFlags,
  ItemWidth: float32,
  TextWrapPos: float32,
  ItemWidthStack: ImVector_float,
  TextWrapPosStack: ImVector_float
}
global ImVector_ImGuiOldColumns: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiOldColumns
}
ImGuiWindow = @record{
  Ctx: *ImGuiContext,
  Name: cstring,
  ID: ImGuiID,
  Flags: ImGuiWindowFlags,
  ChildFlags: ImGuiChildFlags,
  Viewport: *ImGuiViewportP,
  Pos: ImVec2,
  Size: ImVec2,
  SizeFull: ImVec2,
  ContentSize: ImVec2,
  ContentSizeIdeal: ImVec2,
  ContentSizeExplicit: ImVec2,
  WindowPadding: ImVec2,
  WindowRounding: float32,
  WindowBorderSize: float32,
  TitleBarHeight: float32,
  MenuBarHeight: float32,
  DecoOuterSizeX1: float32,
  DecoOuterSizeY1: float32,
  DecoOuterSizeX2: float32,
  DecoOuterSizeY2: float32,
  DecoInnerSizeX1: float32,
  DecoInnerSizeY1: float32,
  NameBufLen: cint,
  MoveId: ImGuiID,
  ChildId: ImGuiID,
  PopupId: ImGuiID,
  Scroll: ImVec2,
  ScrollMax: ImVec2,
  ScrollTarget: ImVec2,
  ScrollTargetCenterRatio: ImVec2,
  ScrollTargetEdgeSnapDist: ImVec2,
  ScrollbarSizes: ImVec2,
  ScrollbarX: boolean,
  ScrollbarY: boolean,
  ScrollbarXStabilizeEnabled: boolean,
  ScrollbarXStabilizeToggledHistory: ImU8,
  Active: boolean,
  WasActive: boolean,
  WriteAccessed: boolean,
  Collapsed: boolean,
  WantCollapseToggle: boolean,
  SkipItems: boolean,
  SkipRefresh: boolean,
  Appearing: boolean,
  Hidden: boolean,
  IsFallbackWindow: boolean,
  IsExplicitChild: boolean,
  HasCloseButton: boolean,
  ResizeBorderHovered: cschar,
  ResizeBorderHeld: cschar,
  BeginCount: cshort,
  BeginCountPreviousFrame: cshort,
  BeginOrderWithinParent: cshort,
  BeginOrderWithinContext: cshort,
  FocusOrder: cshort,
  AutoFitFramesX: ImS8,
  AutoFitFramesY: ImS8,
  AutoFitOnlyGrows: boolean,
  AutoPosLastDirection: ImGuiDir,
  HiddenFramesCanSkipItems: ImS8,
  HiddenFramesCannotSkipItems: ImS8,
  HiddenFramesForRenderOnly: ImS8,
  DisableInputsFrames: ImS8,
  SetWindowPosAllowFlags: ImGuiCond,
  SetWindowSizeAllowFlags: ImGuiCond,
  SetWindowCollapsedAllowFlags: ImGuiCond,
  SetWindowPosVal: ImVec2,
  SetWindowPosPivot: ImVec2,
  IDStack: ImVector_ImGuiID,
  DC: ImGuiWindowTempData,
  OuterRectClipped: ImRect,
  InnerRect: ImRect,
  InnerClipRect: ImRect,
  WorkRect: ImRect,
  ParentWorkRect: ImRect,
  ClipRect: ImRect,
  ContentRegionRect: ImRect,
  HitTestHoleSize: ImVec2ih,
  HitTestHoleOffset: ImVec2ih,
  LastFrameActive: cint,
  LastTimeActive: float32,
  ItemWidthDefault: float32,
  StateStorage: ImGuiStorage,
  ColumnsStorage: ImVector_ImGuiOldColumns,
  FontWindowScale: float32,
  FontWindowScaleParents: float32,
  FontRefSize: float32,
  SettingsOffset: cint,
  DrawList: *ImDrawList,
  DrawListInst: ImDrawList,
  ParentWindow: *ImGuiWindow,
  ParentWindowInBeginStack: *ImGuiWindow,
  RootWindow: *ImGuiWindow,
  RootWindowPopupTree: *ImGuiWindow,
  RootWindowForTitleBarHighlight: *ImGuiWindow,
  RootWindowForNav: *ImGuiWindow,
  ParentWindowForFocusRoute: *ImGuiWindow,
  NavLastChildNavWindow: *ImGuiWindow,
  NavLastIds: [2]ImGuiID,
  NavRectRel: [2]ImRect,
  NavPreferredScoringPosRel: [2]ImVec2,
  NavRootFocusScopeId: ImGuiID,
  MemoryDrawListIdxCapacity: cint,
  MemoryDrawListVtxCapacity: cint,
  MemoryCompacted: boolean
}
global ImGuiTabBarFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTabBarFlags_DockNode = 1048576,
  ImGuiTabBarFlags_IsFocused = 2097152,
  ImGuiTabBarFlags_SaveSettings = 4194304
}
global ImGuiTabItemFlagsPrivate_: type <cimport,nodecl,using> = @enum(cint){
  ImGuiTabItemFlags_SectionMask_ = 192,
  ImGuiTabItemFlags_NoCloseButton = 1048576,
  ImGuiTabItemFlags_Button = 2097152,
  ImGuiTabItemFlags_Invisible = 4194304
}
ImGuiTabItem = @record{
  ID: ImGuiID,
  Flags: ImGuiTabItemFlags,
  LastFrameVisible: cint,
  LastFrameSelected: cint,
  Offset: float32,
  Width: float32,
  ContentWidth: float32,
  RequestedWidth: float32,
  NameOffset: ImS32,
  BeginOrder: ImS16,
  IndexDuringLayout: ImS16,
  WantClose: boolean
}
global ImVector_ImGuiTabItem: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTabItem
}
ImGuiTabBar = @record{
  Window: *ImGuiWindow,
  Tabs: ImVector_ImGuiTabItem,
  Flags: ImGuiTabBarFlags,
  ID: ImGuiID,
  SelectedTabId: ImGuiID,
  NextSelectedTabId: ImGuiID,
  VisibleTabId: ImGuiID,
  CurrFrameVisible: cint,
  PrevFrameVisible: cint,
  BarRect: ImRect,
  CurrTabsContentsHeight: float32,
  PrevTabsContentsHeight: float32,
  WidthAllTabs: float32,
  WidthAllTabsIdeal: float32,
  ScrollingAnim: float32,
  ScrollingTarget: float32,
  ScrollingTargetDistToVisibility: float32,
  ScrollingSpeed: float32,
  ScrollingRectMinX: float32,
  ScrollingRectMaxX: float32,
  SeparatorMinX: float32,
  SeparatorMaxX: float32,
  ReorderRequestTabId: ImGuiID,
  ReorderRequestOffset: ImS16,
  BeginCount: ImS8,
  WantLayout: boolean,
  VisibleTabWasSubmitted: boolean,
  TabsAddedNew: boolean,
  TabsActiveCount: ImS16,
  LastTabItemIdx: ImS16,
  ItemSpacingY: float32,
  FramePadding: ImVec2,
  BackupCursorPos: ImVec2,
  TabsNames: ImGuiTextBuffer
}
ImGuiTableColumn = @record{
  Flags: ImGuiTableColumnFlags,
  WidthGiven: float32,
  MinX: float32,
  MaxX: float32,
  WidthRequest: float32,
  WidthAuto: float32,
  WidthMax: float32,
  StretchWeight: float32,
  InitStretchWeightOrWidth: float32,
  ClipRect: ImRect,
  UserID: ImGuiID,
  WorkMinX: float32,
  WorkMaxX: float32,
  ItemWidth: float32,
  ContentMaxXFrozen: float32,
  ContentMaxXUnfrozen: float32,
  ContentMaxXHeadersUsed: float32,
  ContentMaxXHeadersIdeal: float32,
  NameOffset: ImS16,
  DisplayOrder: ImGuiTableColumnIdx,
  IndexWithinEnabledSet: ImGuiTableColumnIdx,
  PrevEnabledColumn: ImGuiTableColumnIdx,
  NextEnabledColumn: ImGuiTableColumnIdx,
  SortOrder: ImGuiTableColumnIdx,
  DrawChannelCurrent: ImGuiTableDrawChannelIdx,
  DrawChannelFrozen: ImGuiTableDrawChannelIdx,
  DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
  IsEnabled: boolean,
  IsUserEnabled: boolean,
  IsUserEnabledNextFrame: boolean,
  IsVisibleX: boolean,
  IsVisibleY: boolean,
  IsRequestOutput: boolean,
  IsSkipItems: boolean,
  IsPreserveWidthAuto: boolean,
  NavLayerCurrent: ImS8,
  AutoFitQueue: ImU8,
  CannotSkipItemsQueue: ImU8,
  SortDirection: ImU8,
  SortDirectionsAvailCount: ImU8,
  SortDirectionsAvailMask: ImU8,
  SortDirectionsAvailList: ImU8
}
global ImGuiTableCellData: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiTableCellData = @record{
  BgColor: ImU32,
  Column: ImGuiTableColumnIdx
}
ImGuiTableHeaderData = @record{
  Index: ImGuiTableColumnIdx,
  TextColor: ImU32,
  BgColor0: ImU32,
  BgColor1: ImU32
}
ImGuiTableInstanceData = @record{
  TableInstanceID: ImGuiID,
  LastOuterHeight: float32,
  LastTopHeadersRowHeight: float32,
  LastFrozenHeight: float32,
  HoveredRowLast: cint,
  HoveredRowNext: cint
}
global ImSpan_ImGuiTableColumn: type <cimport,nodecl> = @record{
  Data: *ImGuiTableColumn,
  DataEnd: *ImGuiTableColumn
}
global ImSpan_ImGuiTableColumnIdx: type <cimport,nodecl> = @record{
  Data: *ImGuiTableColumnIdx,
  DataEnd: *ImGuiTableColumnIdx
}
global ImSpan_ImGuiTableCellData: type <cimport,nodecl> = @record{
  Data: *ImGuiTableCellData,
  DataEnd: *ImGuiTableCellData
}
global ImVector_ImGuiTableInstanceData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableInstanceData
}
global ImVector_ImGuiTableColumnSortSpecs: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableColumnSortSpecs
}
ImGuiTable = @record{
  ID: ImGuiID,
  Flags: ImGuiTableFlags,
  RawData: pointer,
  TempData: *ImGuiTableTempData,
  Columns: ImSpan_ImGuiTableColumn,
  DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
  RowCellData: ImSpan_ImGuiTableCellData,
  EnabledMaskByDisplayOrder: ImBitArrayPtr,
  EnabledMaskByIndex: ImBitArrayPtr,
  VisibleMaskByIndex: ImBitArrayPtr,
  SettingsLoadedFlags: ImGuiTableFlags,
  SettingsOffset: cint,
  LastFrameActive: cint,
  ColumnsCount: cint,
  CurrentRow: cint,
  CurrentColumn: cint,
  InstanceCurrent: ImS16,
  InstanceInteracted: ImS16,
  RowPosY1: float32,
  RowPosY2: float32,
  RowMinHeight: float32,
  RowCellPaddingY: float32,
  RowTextBaseline: float32,
  RowIndentOffsetX: float32,
  RowFlags: ImGuiTableRowFlags,
  LastRowFlags: ImGuiTableRowFlags,
  RowBgColorCounter: cint,
  RowBgColor: [2]ImU32,
  BorderColorStrong: ImU32,
  BorderColorLight: ImU32,
  BorderX1: float32,
  BorderX2: float32,
  HostIndentX: float32,
  MinColumnWidth: float32,
  OuterPaddingX: float32,
  CellPaddingX: float32,
  CellSpacingX1: float32,
  CellSpacingX2: float32,
  InnerWidth: float32,
  ColumnsGivenWidth: float32,
  ColumnsAutoFitWidth: float32,
  ColumnsStretchSumWeights: float32,
  ResizedColumnNextWidth: float32,
  ResizeLockMinContentsX2: float32,
  RefScale: float32,
  AngledHeadersHeight: float32,
  AngledHeadersSlope: float32,
  OuterRect: ImRect,
  InnerRect: ImRect,
  WorkRect: ImRect,
  InnerClipRect: ImRect,
  BgClipRect: ImRect,
  Bg0ClipRectForDrawCmd: ImRect,
  Bg2ClipRectForDrawCmd: ImRect,
  HostClipRect: ImRect,
  HostBackupInnerClipRect: ImRect,
  OuterWindow: *ImGuiWindow,
  InnerWindow: *ImGuiWindow,
  ColumnsNames: ImGuiTextBuffer,
  DrawSplitter: *ImDrawListSplitter,
  InstanceDataFirst: ImGuiTableInstanceData,
  InstanceDataExtra: ImVector_ImGuiTableInstanceData,
  SortSpecsSingle: ImGuiTableColumnSortSpecs,
  SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
  SortSpecs: ImGuiTableSortSpecs,
  SortSpecsCount: ImGuiTableColumnIdx,
  ColumnsEnabledCount: ImGuiTableColumnIdx,
  ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
  DeclColumnsCount: ImGuiTableColumnIdx,
  AngledHeadersCount: ImGuiTableColumnIdx,
  HoveredColumnBody: ImGuiTableColumnIdx,
  HoveredColumnBorder: ImGuiTableColumnIdx,
  HighlightColumnHeader: ImGuiTableColumnIdx,
  AutoFitSingleColumn: ImGuiTableColumnIdx,
  ResizedColumn: ImGuiTableColumnIdx,
  LastResizedColumn: ImGuiTableColumnIdx,
  HeldHeaderColumn: ImGuiTableColumnIdx,
  ReorderColumn: ImGuiTableColumnIdx,
  ReorderColumnDir: ImGuiTableColumnIdx,
  LeftMostEnabledColumn: ImGuiTableColumnIdx,
  RightMostEnabledColumn: ImGuiTableColumnIdx,
  LeftMostStretchedColumn: ImGuiTableColumnIdx,
  RightMostStretchedColumn: ImGuiTableColumnIdx,
  ContextPopupColumn: ImGuiTableColumnIdx,
  FreezeRowsRequest: ImGuiTableColumnIdx,
  FreezeRowsCount: ImGuiTableColumnIdx,
  FreezeColumnsRequest: ImGuiTableColumnIdx,
  FreezeColumnsCount: ImGuiTableColumnIdx,
  RowCellDataCurrent: ImGuiTableColumnIdx,
  DummyDrawChannel: ImGuiTableDrawChannelIdx,
  Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
  Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
  NavLayer: ImS8,
  IsLayoutLocked: boolean,
  IsInsideRow: boolean,
  IsInitializing: boolean,
  IsSortSpecsDirty: boolean,
  IsUsingHeaders: boolean,
  IsContextPopupOpen: boolean,
  DisableDefaultContextMenu: boolean,
  IsSettingsRequestLoad: boolean,
  IsSettingsDirty: boolean,
  IsDefaultDisplayOrder: boolean,
  IsResetAllRequest: boolean,
  IsResetDisplayOrderRequest: boolean,
  IsUnfrozenRows: boolean,
  IsDefaultSizingPolicy: boolean,
  IsActiveIdAliveBeforeTable: boolean,
  IsActiveIdInTable: boolean,
  HasScrollbarYCurr: boolean,
  HasScrollbarYPrev: boolean,
  MemoryCompacted: boolean,
  HostSkipItems: boolean
}
global ImVector_ImGuiTableHeaderData: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImGuiTableHeaderData
}
ImGuiTableTempData = @record{
  TableIndex: cint,
  LastTimeActive: float32,
  AngledHeadersExtraWidth: float32,
  AngledHeadersRequests: ImVector_ImGuiTableHeaderData,
  UserOuterSize: ImVec2,
  DrawSplitter: ImDrawListSplitter,
  HostBackupWorkRect: ImRect,
  HostBackupParentWorkRect: ImRect,
  HostBackupPrevLineSize: ImVec2,
  HostBackupCurrLineSize: ImVec2,
  HostBackupCursorMaxPos: ImVec2,
  HostBackupColumnsOffset: ImVec1,
  HostBackupItemWidth: float32,
  HostBackupItemWidthStackSize: cint
}
global ImGuiTableColumnSettings: type <cimport,nodecl,forwarddecl> = @record{}
ImGuiTableColumnSettings = @record{
  WidthOrWeight: float32,
  UserID: ImGuiID,
  Index: ImGuiTableColumnIdx,
  DisplayOrder: ImGuiTableColumnIdx,
  SortOrder: ImGuiTableColumnIdx,
  SortDirection: ImU8,
  IsEnabled: ImS8,
  IsStretch: ImU8
}
ImGuiTableSettings = @record{
  ID: ImGuiID,
  SaveFlags: ImGuiTableFlags,
  RefScale: float32,
  ColumnsCount: ImGuiTableColumnIdx,
  ColumnsCountMax: ImGuiTableColumnIdx,
  WantApply: boolean
}
ImFontLoader = @record{
  Name: cstring,
  LoaderInit: function(atlas: *ImFontAtlas): boolean,
  LoaderShutdown: function(atlas: *ImFontAtlas): void,
  FontSrcInit: function(atlas: *ImFontAtlas, src: *ImFontConfig): boolean,
  FontSrcDestroy: function(atlas: *ImFontAtlas, src: *ImFontConfig): void,
  FontSrcContainsGlyph: function(atlas: *ImFontAtlas, src: *ImFontConfig, codepoint: ImWchar): boolean,
  FontBakedInit: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer): boolean,
  FontBakedDestroy: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer): void,
  FontBakedLoadGlyph: function(atlas: *ImFontAtlas, src: *ImFontConfig, baked: *ImFontBaked, loader_data_for_baked_src: pointer, codepoint: ImWchar, out_glyph: *ImFontGlyph, out_advance_x: *float32): boolean,
  FontBakedSrcLoaderDataSize: csize
}
ImFontAtlasRectEntry = @record{
  TargetIndex: cint,
  Generation: cint,
  IsUsed: cuint
}
ImFontAtlasPostProcessData = @record{
  FontAtlas: *ImFontAtlas,
  Font: *ImFont,
  FontSrc: *ImFontConfig,
  FontBaked: *ImFontBaked,
  Glyph: *ImFontGlyph,
  Pixels: pointer,
  Format: ImTextureFormat,
  Pitch: cint,
  Width: cint,
  Height: cint
}
global stbrp_context_opaque: type <cimport,nodecl,forwarddecl> = @record{}
stbrp_context_opaque = @record{
  data: [80]cchar
}
global ImVector_stbrp_node_im: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *stbrp_node_im
}
global ImVector_ImFontAtlasRectEntry: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: *ImFontAtlasRectEntry
}
global ImVector_ImFontBakedPtr: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Data: **ImFontBaked
}
global ImStableVector_ImFontBaked__32: type <cimport,nodecl> = @record{
  Size: cint,
  Capacity: cint,
  Blocks: ImVector_ImFontBakedPtr
}
ImFontAtlasBuilder = @record{
  PackContext: stbrp_context_opaque,
  PackNodes: ImVector_stbrp_node_im,
  Rects: ImVector_ImTextureRect,
  RectsIndex: ImVector_ImFontAtlasRectEntry,
  TempBuffer: ImVector_unsigned_char,
  RectsIndexFreeListStart: cint,
  RectsPackedCount: cint,
  RectsPackedSurface: cint,
  RectsDiscardedCount: cint,
  RectsDiscardedSurface: cint,
  FrameCount: cint,
  MaxRectSize: ImVec2i,
  MaxRectBounds: ImVec2i,
  LockDisableResize: boolean,
  PreloadedAllGlyphsRanges: boolean,
  BakedPool: ImStableVector_ImFontBaked__32,
  BakedMap: ImGuiStorage,
  BakedDiscardedCount: cint,
  PackIdMouseCursors: ImFontAtlasRectId,
  PackIdLinesTexData: ImFontAtlasRectId
}
global function ImVec2_ImVec2_Nil(): *ImVec2 <cimport,nodecl> end
global function ImVec2_destroy(self: *ImVec2): void <cimport,nodecl> end
global function ImVec2_ImVec2_Float(_x: float32, _y: float32): *ImVec2 <cimport,nodecl> end
global function ImVec4_ImVec4_Nil(): *ImVec4 <cimport,nodecl> end
global function ImVec4_destroy(self: *ImVec4): void <cimport,nodecl> end
global function ImVec4_ImVec4_Float(_x: float32, _y: float32, _z: float32, _w: float32): *ImVec4 <cimport,nodecl> end
global function ImTextureRef_ImTextureRef_Nil(): *ImTextureRef <cimport,nodecl> end
global function ImTextureRef_destroy(self: *ImTextureRef): void <cimport,nodecl> end
global function ImTextureRef_ImTextureRef_TextureID(tex_id: ImTextureID): *ImTextureRef <cimport,nodecl> end
global function ImTextureRef_GetTexID(self: *ImTextureRef): ImTextureID <cimport,nodecl> end
global function igCreateContext(shared_font_atlas: *ImFontAtlas): *ImGuiContext <cimport,nodecl> end
global function igDestroyContext(ctx: *ImGuiContext): void <cimport,nodecl> end
global function igGetCurrentContext(): *ImGuiContext <cimport,nodecl> end
global function igSetCurrentContext(ctx: *ImGuiContext): void <cimport,nodecl> end
global function igGetIO_Nil(): *ImGuiIO <cimport,nodecl> end
global function igGetPlatformIO_Nil(): *ImGuiPlatformIO <cimport,nodecl> end
global function igGetStyle(): *ImGuiStyle <cimport,nodecl> end
global function igNewFrame(): void <cimport,nodecl> end
global function igEndFrame(): void <cimport,nodecl> end
global function igRender(): void <cimport,nodecl> end
global function igGetDrawData(): *ImDrawData <cimport,nodecl> end
global function igShowDemoWindow(p_open: *boolean): void <cimport,nodecl> end
global function igShowMetricsWindow(p_open: *boolean): void <cimport,nodecl> end
global function igShowDebugLogWindow(p_open: *boolean): void <cimport,nodecl> end
global function igShowIDStackToolWindow(p_open: *boolean): void <cimport,nodecl> end
global function igShowAboutWindow(p_open: *boolean): void <cimport,nodecl> end
global function igShowStyleEditor(ref: *ImGuiStyle): void <cimport,nodecl> end
global function igShowStyleSelector(label: cstring): boolean <cimport,nodecl> end
global function igShowFontSelector(label: cstring): void <cimport,nodecl> end
global function igShowUserGuide(): void <cimport,nodecl> end
global function igGetVersion(): cstring <cimport,nodecl> end
global function igStyleColorsDark(dst: *ImGuiStyle): void <cimport,nodecl> end
global function igStyleColorsLight(dst: *ImGuiStyle): void <cimport,nodecl> end
global function igStyleColorsClassic(dst: *ImGuiStyle): void <cimport,nodecl> end
global function igBegin(name: cstring, p_open: *boolean, flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igEnd(): void <cimport,nodecl> end
global function igBeginChild_Str(str_id: cstring, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginChild_ID(id: ImGuiID, size: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igEndChild(): void <cimport,nodecl> end
global function igIsWindowAppearing(): boolean <cimport,nodecl> end
global function igIsWindowCollapsed(): boolean <cimport,nodecl> end
global function igIsWindowFocused(flags: ImGuiFocusedFlags): boolean <cimport,nodecl> end
global function igIsWindowHovered(flags: ImGuiHoveredFlags): boolean <cimport,nodecl> end
global function igGetWindowDrawList(): *ImDrawList <cimport,nodecl> end
global function igGetWindowPos(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetWindowSize(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetWindowWidth(): float32 <cimport,nodecl> end
global function igGetWindowHeight(): float32 <cimport,nodecl> end
global function igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2): void <cimport,nodecl> end
global function igSetNextWindowSize(size: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetNextWindowSizeConstraints(size_min: ImVec2, size_max: ImVec2, custom_callback: ImGuiSizeCallback, custom_callback_data: pointer): void <cimport,nodecl> end
global function igSetNextWindowContentSize(size: ImVec2): void <cimport,nodecl> end
global function igSetNextWindowCollapsed(collapsed: boolean, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetNextWindowFocus(): void <cimport,nodecl> end
global function igSetNextWindowScroll(scroll: ImVec2): void <cimport,nodecl> end
global function igSetNextWindowBgAlpha(alpha: float32): void <cimport,nodecl> end
global function igSetWindowPos_Vec2(pos: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowSize_Vec2(size: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowCollapsed_Bool(collapsed: boolean, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowFocus_Nil(): void <cimport,nodecl> end
global function igSetWindowPos_Str(name: cstring, pos: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowSize_Str(name: cstring, size: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowCollapsed_Str(name: cstring, collapsed: boolean, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowFocus_Str(name: cstring): void <cimport,nodecl> end
global function igGetScrollX(): float32 <cimport,nodecl> end
global function igGetScrollY(): float32 <cimport,nodecl> end
global function igSetScrollX_Float(scroll_x: float32): void <cimport,nodecl> end
global function igSetScrollY_Float(scroll_y: float32): void <cimport,nodecl> end
global function igGetScrollMaxX(): float32 <cimport,nodecl> end
global function igGetScrollMaxY(): float32 <cimport,nodecl> end
global function igSetScrollHereX(center_x_ratio: float32): void <cimport,nodecl> end
global function igSetScrollHereY(center_y_ratio: float32): void <cimport,nodecl> end
global function igSetScrollFromPosX_Float(local_x: float32, center_x_ratio: float32): void <cimport,nodecl> end
global function igSetScrollFromPosY_Float(local_y: float32, center_y_ratio: float32): void <cimport,nodecl> end
global function igPushFont(font: *ImFont, font_size_base_unscaled: float32): void <cimport,nodecl> end
global function igPopFont(): void <cimport,nodecl> end
global function igGetFont(): *ImFont <cimport,nodecl> end
global function igGetFontSize(): float32 <cimport,nodecl> end
global function igGetFontBaked(): *ImFontBaked <cimport,nodecl> end
global function igPushStyleColor_U32(idx: ImGuiCol, col: ImU32): void <cimport,nodecl> end
global function igPushStyleColor_Vec4(idx: ImGuiCol, col: ImVec4): void <cimport,nodecl> end
global function igPopStyleColor(count: cint): void <cimport,nodecl> end
global function igPushStyleVar_Float(idx: ImGuiStyleVar, val: float32): void <cimport,nodecl> end
global function igPushStyleVar_Vec2(idx: ImGuiStyleVar, val: ImVec2): void <cimport,nodecl> end
global function igPushStyleVarX(idx: ImGuiStyleVar, val_x: float32): void <cimport,nodecl> end
global function igPushStyleVarY(idx: ImGuiStyleVar, val_y: float32): void <cimport,nodecl> end
global function igPopStyleVar(count: cint): void <cimport,nodecl> end
global function igPushItemFlag(option: ImGuiItemFlags, enabled: boolean): void <cimport,nodecl> end
global function igPopItemFlag(): void <cimport,nodecl> end
global function igPushItemWidth(item_width: float32): void <cimport,nodecl> end
global function igPopItemWidth(): void <cimport,nodecl> end
global function igSetNextItemWidth(item_width: float32): void <cimport,nodecl> end
global function igCalcItemWidth(): float32 <cimport,nodecl> end
global function igPushTextWrapPos(wrap_local_pos_x: float32): void <cimport,nodecl> end
global function igPopTextWrapPos(): void <cimport,nodecl> end
global function igGetFontTexUvWhitePixel(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetColorU32_Col(idx: ImGuiCol, alpha_mul: float32): ImU32 <cimport,nodecl> end
global function igGetColorU32_Vec4(col: ImVec4): ImU32 <cimport,nodecl> end
global function igGetColorU32_U32(col: ImU32, alpha_mul: float32): ImU32 <cimport,nodecl> end
global function igGetStyleColorVec4(idx: ImGuiCol): *ImVec4 <cimport,nodecl> end
global function igGetCursorScreenPos(pOut: *ImVec2): void <cimport,nodecl> end
global function igSetCursorScreenPos(pos: ImVec2): void <cimport,nodecl> end
global function igGetContentRegionAvail(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetCursorPos(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetCursorPosX(): float32 <cimport,nodecl> end
global function igGetCursorPosY(): float32 <cimport,nodecl> end
global function igSetCursorPos(local_pos: ImVec2): void <cimport,nodecl> end
global function igSetCursorPosX(local_x: float32): void <cimport,nodecl> end
global function igSetCursorPosY(local_y: float32): void <cimport,nodecl> end
global function igGetCursorStartPos(pOut: *ImVec2): void <cimport,nodecl> end
global function igSeparator(): void <cimport,nodecl> end
global function igSameLine(offset_from_start_x: float32, spacing: float32): void <cimport,nodecl> end
global function igNewLine(): void <cimport,nodecl> end
global function igSpacing(): void <cimport,nodecl> end
global function igDummy(size: ImVec2): void <cimport,nodecl> end
global function igIndent(indent_w: float32): void <cimport,nodecl> end
global function igUnindent(indent_w: float32): void <cimport,nodecl> end
global function igBeginGroup(): void <cimport,nodecl> end
global function igEndGroup(): void <cimport,nodecl> end
global function igAlignTextToFramePadding(): void <cimport,nodecl> end
global function igGetTextLineHeight(): float32 <cimport,nodecl> end
global function igGetTextLineHeightWithSpacing(): float32 <cimport,nodecl> end
global function igGetFrameHeight(): float32 <cimport,nodecl> end
global function igGetFrameHeightWithSpacing(): float32 <cimport,nodecl> end
global function igPushID_Str(str_id: cstring): void <cimport,nodecl> end
global function igPushID_StrStr(str_id_begin: cstring, str_id_end: cstring): void <cimport,nodecl> end
global function igPushID_Ptr(ptr_id: pointer): void <cimport,nodecl> end
global function igPushID_Int(int_id: cint): void <cimport,nodecl> end
global function igPopID(): void <cimport,nodecl> end
global function igGetID_Str(str_id: cstring): ImGuiID <cimport,nodecl> end
global function igGetID_StrStr(str_id_begin: cstring, str_id_end: cstring): ImGuiID <cimport,nodecl> end
global function igGetID_Ptr(ptr_id: pointer): ImGuiID <cimport,nodecl> end
global function igGetID_Int(int_id: cint): ImGuiID <cimport,nodecl> end
global function igTextUnformatted(text: cstring, text_end: cstring): void <cimport,nodecl> end
global function igText(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igTextV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igTextColored(col: ImVec4, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igTextColoredV(col: ImVec4, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igTextDisabled(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igTextDisabledV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igTextWrapped(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igTextWrappedV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igLabelText(label: cstring, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igLabelTextV(label: cstring, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igBulletText(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igBulletTextV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igSeparatorText(label: cstring): void <cimport,nodecl> end
global function igButton(label: cstring, size: ImVec2): boolean <cimport,nodecl> end
global function igSmallButton(label: cstring): boolean <cimport,nodecl> end
global function igInvisibleButton(str_id: cstring, size: ImVec2, flags: ImGuiButtonFlags): boolean <cimport,nodecl> end
global function igArrowButton(str_id: cstring, dir: ImGuiDir): boolean <cimport,nodecl> end
global function igCheckbox(label: cstring, v: *boolean): boolean <cimport,nodecl> end
global function igCheckboxFlags_IntPtr(label: cstring, flags: *cint, flags_value: cint): boolean <cimport,nodecl> end
global function igCheckboxFlags_UintPtr(label: cstring, flags: *cuint, flags_value: cuint): boolean <cimport,nodecl> end
global function igRadioButton_Bool(label: cstring, active: boolean): boolean <cimport,nodecl> end
global function igRadioButton_IntPtr(label: cstring, v: *cint, v_button: cint): boolean <cimport,nodecl> end
global function igProgressBar(fraction: float32, size_arg: ImVec2, overlay: cstring): void <cimport,nodecl> end
global function igBullet(): void <cimport,nodecl> end
global function igTextLink(label: cstring): boolean <cimport,nodecl> end
global function igTextLinkOpenURL(label: cstring, url: cstring): boolean <cimport,nodecl> end
global function igImage(tex_ref: ImTextureRef, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2): void <cimport,nodecl> end
global function igImageWithBg(tex_ref: ImTextureRef, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4): void <cimport,nodecl> end
global function igImageButton(str_id: cstring, tex_ref: ImTextureRef, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4): boolean <cimport,nodecl> end
global function igBeginCombo(label: cstring, preview_value: cstring, flags: ImGuiComboFlags): boolean <cimport,nodecl> end
global function igEndCombo(): void <cimport,nodecl> end
global function igCombo_Str_arr(label: cstring, current_item: *cint, items: *[0]cstring, items_count: cint, popup_max_height_in_items: cint): boolean <cimport,nodecl> end
global function igCombo_Str(label: cstring, current_item: *cint, items_separated_by_zeros: cstring, popup_max_height_in_items: cint): boolean <cimport,nodecl> end
global function igCombo_FnStrPtr(label: cstring, current_item: *cint, getter: function(user_data: pointer, idx: cint): cstring, user_data: pointer, items_count: cint, popup_max_height_in_items: cint): boolean <cimport,nodecl> end
global function igDragFloat(label: cstring, v: *float32, v_speed: float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragFloat2(label: cstring, v: *[2]float32, v_speed: float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragFloat3(label: cstring, v: *[3]float32, v_speed: float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragFloat4(label: cstring, v: *[4]float32, v_speed: float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragFloatRange2(label: cstring, v_current_min: *float32, v_current_max: *float32, v_speed: float32, v_min: float32, v_max: float32, format: cstring, format_max: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragInt(label: cstring, v: *cint, v_speed: float32, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragInt2(label: cstring, v: *[2]cint, v_speed: float32, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragInt3(label: cstring, v: *[3]cint, v_speed: float32, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragInt4(label: cstring, v: *[4]cint, v_speed: float32, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragIntRange2(label: cstring, v_current_min: *cint, v_current_max: *cint, v_speed: float32, v_min: cint, v_max: cint, format: cstring, format_max: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragScalar(label: cstring, data_type: ImGuiDataType, p_data: pointer, v_speed: float32, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igDragScalarN(label: cstring, data_type: ImGuiDataType, p_data: pointer, components: cint, v_speed: float32, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderFloat(label: cstring, v: *float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderFloat2(label: cstring, v: *[2]float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderFloat3(label: cstring, v: *[3]float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderFloat4(label: cstring, v: *[4]float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderAngle(label: cstring, v_rad: *float32, v_degrees_min: float32, v_degrees_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderInt(label: cstring, v: *cint, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderInt2(label: cstring, v: *[2]cint, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderInt3(label: cstring, v: *[3]cint, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderInt4(label: cstring, v: *[4]cint, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderScalar(label: cstring, data_type: ImGuiDataType, p_data: pointer, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderScalarN(label: cstring, data_type: ImGuiDataType, p_data: pointer, components: cint, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igVSliderFloat(label: cstring, size: ImVec2, v: *float32, v_min: float32, v_max: float32, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igVSliderInt(label: cstring, size: ImVec2, v: *cint, v_min: cint, v_max: cint, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igVSliderScalar(label: cstring, size: ImVec2, data_type: ImGuiDataType, p_data: pointer, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igInputText(label: cstring, buf: cstring, buf_size: csize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: pointer): boolean <cimport,nodecl> end
global function igInputTextMultiline(label: cstring, buf: cstring, buf_size: csize, size: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: pointer): boolean <cimport,nodecl> end
global function igInputTextWithHint(label: cstring, hint: cstring, buf: cstring, buf_size: csize, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: pointer): boolean <cimport,nodecl> end
global function igInputFloat(label: cstring, v: *float32, step: float32, step_fast: float32, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputFloat2(label: cstring, v: *[2]float32, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputFloat3(label: cstring, v: *[3]float32, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputFloat4(label: cstring, v: *[4]float32, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputInt(label: cstring, v: *cint, step: cint, step_fast: cint, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputInt2(label: cstring, v: *[2]cint, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputInt3(label: cstring, v: *[3]cint, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputInt4(label: cstring, v: *[4]cint, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputDouble(label: cstring, v: *float64, step: float64, step_fast: float64, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputScalar(label: cstring, data_type: ImGuiDataType, p_data: pointer, p_step: pointer, p_step_fast: pointer, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igInputScalarN(label: cstring, data_type: ImGuiDataType, p_data: pointer, components: cint, p_step: pointer, p_step_fast: pointer, format: cstring, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igColorEdit3(label: cstring, col: *[3]float32, flags: ImGuiColorEditFlags): boolean <cimport,nodecl> end
global function igColorEdit4(label: cstring, col: *[4]float32, flags: ImGuiColorEditFlags): boolean <cimport,nodecl> end
global function igColorPicker3(label: cstring, col: *[3]float32, flags: ImGuiColorEditFlags): boolean <cimport,nodecl> end
global function igColorPicker4(label: cstring, col: *[4]float32, flags: ImGuiColorEditFlags, ref_col: *float32): boolean <cimport,nodecl> end
global function igColorButton(desc_id: cstring, col: ImVec4, flags: ImGuiColorEditFlags, size: ImVec2): boolean <cimport,nodecl> end
global function igSetColorEditOptions(flags: ImGuiColorEditFlags): void <cimport,nodecl> end
global function igTreeNode_Str(label: cstring): boolean <cimport,nodecl> end
global function igTreeNode_StrStr(str_id: cstring, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function igTreeNode_Ptr(ptr_id: pointer, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function igTreeNodeV_Str(str_id: cstring, fmt: cstring, args: cvalist): boolean <cimport,nodecl> end
global function igTreeNodeV_Ptr(ptr_id: pointer, fmt: cstring, args: cvalist): boolean <cimport,nodecl> end
global function igTreeNodeEx_Str(label: cstring, flags: ImGuiTreeNodeFlags): boolean <cimport,nodecl> end
global function igTreeNodeEx_StrStr(str_id: cstring, flags: ImGuiTreeNodeFlags, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function igTreeNodeEx_Ptr(ptr_id: pointer, flags: ImGuiTreeNodeFlags, fmt: cstring, ...: cvarargs): boolean <cimport,nodecl> end
global function igTreeNodeExV_Str(str_id: cstring, flags: ImGuiTreeNodeFlags, fmt: cstring, args: cvalist): boolean <cimport,nodecl> end
global function igTreeNodeExV_Ptr(ptr_id: pointer, flags: ImGuiTreeNodeFlags, fmt: cstring, args: cvalist): boolean <cimport,nodecl> end
global function igTreePush_Str(str_id: cstring): void <cimport,nodecl> end
global function igTreePush_Ptr(ptr_id: pointer): void <cimport,nodecl> end
global function igTreePop(): void <cimport,nodecl> end
global function igGetTreeNodeToLabelSpacing(): float32 <cimport,nodecl> end
global function igCollapsingHeader_TreeNodeFlags(label: cstring, flags: ImGuiTreeNodeFlags): boolean <cimport,nodecl> end
global function igCollapsingHeader_BoolPtr(label: cstring, p_visible: *boolean, flags: ImGuiTreeNodeFlags): boolean <cimport,nodecl> end
global function igSetNextItemOpen(is_open: boolean, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetNextItemStorageID(storage_id: ImGuiID): void <cimport,nodecl> end
global function igSelectable_Bool(label: cstring, selected: boolean, flags: ImGuiSelectableFlags, size: ImVec2): boolean <cimport,nodecl> end
global function igSelectable_BoolPtr(label: cstring, p_selected: *boolean, flags: ImGuiSelectableFlags, size: ImVec2): boolean <cimport,nodecl> end
global function igBeginMultiSelect(flags: ImGuiMultiSelectFlags, selection_size: cint, items_count: cint): *ImGuiMultiSelectIO <cimport,nodecl> end
global function igEndMultiSelect(): *ImGuiMultiSelectIO <cimport,nodecl> end
global function igSetNextItemSelectionUserData(selection_user_data: ImGuiSelectionUserData): void <cimport,nodecl> end
global function igIsItemToggledSelection(): boolean <cimport,nodecl> end
global function igBeginListBox(label: cstring, size: ImVec2): boolean <cimport,nodecl> end
global function igEndListBox(): void <cimport,nodecl> end
global function igListBox_Str_arr(label: cstring, current_item: *cint, items: *[0]cstring, items_count: cint, height_in_items: cint): boolean <cimport,nodecl> end
global function igListBox_FnStrPtr(label: cstring, current_item: *cint, getter: function(user_data: pointer, idx: cint): cstring, user_data: pointer, items_count: cint, height_in_items: cint): boolean <cimport,nodecl> end
global function igPlotLines_FloatPtr(label: cstring, values: *float32, values_count: cint, values_offset: cint, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: cint): void <cimport,nodecl> end
global function igPlotLines_FnFloatPtr(label: cstring, values_getter: function(data: pointer, idx: cint): float32, data: pointer, values_count: cint, values_offset: cint, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2): void <cimport,nodecl> end
global function igPlotHistogram_FloatPtr(label: cstring, values: *float32, values_count: cint, values_offset: cint, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2, stride: cint): void <cimport,nodecl> end
global function igPlotHistogram_FnFloatPtr(label: cstring, values_getter: function(data: pointer, idx: cint): float32, data: pointer, values_count: cint, values_offset: cint, overlay_text: cstring, scale_min: float32, scale_max: float32, graph_size: ImVec2): void <cimport,nodecl> end
global function igValue_Bool(prefix: cstring, b: boolean): void <cimport,nodecl> end
global function igValue_Int(prefix: cstring, v: cint): void <cimport,nodecl> end
global function igValue_Uint(prefix: cstring, v: cuint): void <cimport,nodecl> end
global function igValue_Float(prefix: cstring, v: float32, float_format: cstring): void <cimport,nodecl> end
global function igBeginMenuBar(): boolean <cimport,nodecl> end
global function igEndMenuBar(): void <cimport,nodecl> end
global function igBeginMainMenuBar(): boolean <cimport,nodecl> end
global function igEndMainMenuBar(): void <cimport,nodecl> end
global function igBeginMenu(label: cstring, enabled: boolean): boolean <cimport,nodecl> end
global function igEndMenu(): void <cimport,nodecl> end
global function igMenuItem_Bool(label: cstring, shortcut: cstring, selected: boolean, enabled: boolean): boolean <cimport,nodecl> end
global function igMenuItem_BoolPtr(label: cstring, shortcut: cstring, p_selected: *boolean, enabled: boolean): boolean <cimport,nodecl> end
global function igBeginTooltip(): boolean <cimport,nodecl> end
global function igEndTooltip(): void <cimport,nodecl> end
global function igSetTooltip(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igSetTooltipV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igBeginItemTooltip(): boolean <cimport,nodecl> end
global function igSetItemTooltip(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igSetItemTooltipV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igBeginPopup(str_id: cstring, flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginPopupModal(name: cstring, p_open: *boolean, flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igEndPopup(): void <cimport,nodecl> end
global function igOpenPopup_Str(str_id: cstring, popup_flags: ImGuiPopupFlags): void <cimport,nodecl> end
global function igOpenPopup_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags): void <cimport,nodecl> end
global function igOpenPopupOnItemClick(str_id: cstring, popup_flags: ImGuiPopupFlags): void <cimport,nodecl> end
global function igCloseCurrentPopup(): void <cimport,nodecl> end
global function igBeginPopupContextItem(str_id: cstring, popup_flags: ImGuiPopupFlags): boolean <cimport,nodecl> end
global function igBeginPopupContextWindow(str_id: cstring, popup_flags: ImGuiPopupFlags): boolean <cimport,nodecl> end
global function igBeginPopupContextVoid(str_id: cstring, popup_flags: ImGuiPopupFlags): boolean <cimport,nodecl> end
global function igIsPopupOpen_Str(str_id: cstring, flags: ImGuiPopupFlags): boolean <cimport,nodecl> end
global function igBeginTable(str_id: cstring, columns: cint, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: float32): boolean <cimport,nodecl> end
global function igEndTable(): void <cimport,nodecl> end
global function igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: float32): void <cimport,nodecl> end
global function igTableNextColumn(): boolean <cimport,nodecl> end
global function igTableSetColumnIndex(column_n: cint): boolean <cimport,nodecl> end
global function igTableSetupColumn(label: cstring, flags: ImGuiTableColumnFlags, init_width_or_weight: float32, user_id: ImGuiID): void <cimport,nodecl> end
global function igTableSetupScrollFreeze(cols: cint, rows: cint): void <cimport,nodecl> end
global function igTableHeader(label: cstring): void <cimport,nodecl> end
global function igTableHeadersRow(): void <cimport,nodecl> end
global function igTableAngledHeadersRow(): void <cimport,nodecl> end
global function igTableGetSortSpecs(): *ImGuiTableSortSpecs <cimport,nodecl> end
global function igTableGetColumnCount(): cint <cimport,nodecl> end
global function igTableGetColumnIndex(): cint <cimport,nodecl> end
global function igTableGetRowIndex(): cint <cimport,nodecl> end
global function igTableGetColumnName_Int(column_n: cint): cstring <cimport,nodecl> end
global function igTableGetColumnFlags(column_n: cint): ImGuiTableColumnFlags <cimport,nodecl> end
global function igTableSetColumnEnabled(column_n: cint, v: boolean): void <cimport,nodecl> end
global function igTableGetHoveredColumn(): cint <cimport,nodecl> end
global function igTableSetBgColor(target: ImGuiTableBgTarget, color: ImU32, column_n: cint): void <cimport,nodecl> end
global function igColumns(count: cint, id: cstring, borders: boolean): void <cimport,nodecl> end
global function igNextColumn(): void <cimport,nodecl> end
global function igGetColumnIndex(): cint <cimport,nodecl> end
global function igGetColumnWidth(column_index: cint): float32 <cimport,nodecl> end
global function igSetColumnWidth(column_index: cint, width: float32): void <cimport,nodecl> end
global function igGetColumnOffset(column_index: cint): float32 <cimport,nodecl> end
global function igSetColumnOffset(column_index: cint, offset_x: float32): void <cimport,nodecl> end
global function igGetColumnsCount(): cint <cimport,nodecl> end
global function igBeginTabBar(str_id: cstring, flags: ImGuiTabBarFlags): boolean <cimport,nodecl> end
global function igEndTabBar(): void <cimport,nodecl> end
global function igBeginTabItem(label: cstring, p_open: *boolean, flags: ImGuiTabItemFlags): boolean <cimport,nodecl> end
global function igEndTabItem(): void <cimport,nodecl> end
global function igTabItemButton(label: cstring, flags: ImGuiTabItemFlags): boolean <cimport,nodecl> end
global function igSetTabItemClosed(tab_or_docked_window_label: cstring): void <cimport,nodecl> end
global function igLogToTTY(auto_open_depth: cint): void <cimport,nodecl> end
global function igLogToFile(auto_open_depth: cint, filename: cstring): void <cimport,nodecl> end
global function igLogToClipboard(auto_open_depth: cint): void <cimport,nodecl> end
global function igLogFinish(): void <cimport,nodecl> end
global function igLogButtons(): void <cimport,nodecl> end
global function igLogText(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igLogTextV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igBeginDragDropSource(flags: ImGuiDragDropFlags): boolean <cimport,nodecl> end
global function igSetDragDropPayload(type: cstring, data: pointer, sz: csize, cond: ImGuiCond): boolean <cimport,nodecl> end
global function igEndDragDropSource(): void <cimport,nodecl> end
global function igBeginDragDropTarget(): boolean <cimport,nodecl> end
global function igAcceptDragDropPayload(type: cstring, flags: ImGuiDragDropFlags): *ImGuiPayload <cimport,nodecl> end
global function igEndDragDropTarget(): void <cimport,nodecl> end
global function igGetDragDropPayload(): *ImGuiPayload <cimport,nodecl> end
global function igBeginDisabled(disabled: boolean): void <cimport,nodecl> end
global function igEndDisabled(): void <cimport,nodecl> end
global function igPushClipRect(clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: boolean): void <cimport,nodecl> end
global function igPopClipRect(): void <cimport,nodecl> end
global function igSetItemDefaultFocus(): void <cimport,nodecl> end
global function igSetKeyboardFocusHere(offset: cint): void <cimport,nodecl> end
global function igSetNavCursorVisible(visible: boolean): void <cimport,nodecl> end
global function igSetNextItemAllowOverlap(): void <cimport,nodecl> end
global function igIsItemHovered(flags: ImGuiHoveredFlags): boolean <cimport,nodecl> end
global function igIsItemActive(): boolean <cimport,nodecl> end
global function igIsItemFocused(): boolean <cimport,nodecl> end
global function igIsItemClicked(mouse_button: ImGuiMouseButton): boolean <cimport,nodecl> end
global function igIsItemVisible(): boolean <cimport,nodecl> end
global function igIsItemEdited(): boolean <cimport,nodecl> end
global function igIsItemActivated(): boolean <cimport,nodecl> end
global function igIsItemDeactivated(): boolean <cimport,nodecl> end
global function igIsItemDeactivatedAfterEdit(): boolean <cimport,nodecl> end
global function igIsItemToggledOpen(): boolean <cimport,nodecl> end
global function igIsAnyItemHovered(): boolean <cimport,nodecl> end
global function igIsAnyItemActive(): boolean <cimport,nodecl> end
global function igIsAnyItemFocused(): boolean <cimport,nodecl> end
global function igGetItemID(): ImGuiID <cimport,nodecl> end
global function igGetItemRectMin(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetItemRectMax(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetItemRectSize(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetMainViewport(): *ImGuiViewport <cimport,nodecl> end
global function igGetBackgroundDrawList_Nil(): *ImDrawList <cimport,nodecl> end
global function igGetForegroundDrawList_Nil(): *ImDrawList <cimport,nodecl> end
global function igIsRectVisible_Nil(size: ImVec2): boolean <cimport,nodecl> end
global function igIsRectVisible_Vec2(rect_min: ImVec2, rect_max: ImVec2): boolean <cimport,nodecl> end
global function igGetTime(): float64 <cimport,nodecl> end
global function igGetFrameCount(): cint <cimport,nodecl> end
global function igGetDrawListSharedData(): *ImDrawListSharedData <cimport,nodecl> end
global function igGetStyleColorName(idx: ImGuiCol): cstring <cimport,nodecl> end
global function igSetStateStorage(storage: *ImGuiStorage): void <cimport,nodecl> end
global function igGetStateStorage(): *ImGuiStorage <cimport,nodecl> end
global function igCalcTextSize(pOut: *ImVec2, text: cstring, text_end: cstring, hide_text_after_double_hash: boolean, wrap_width: float32): void <cimport,nodecl> end
global function igColorConvertU32ToFloat4(pOut: *ImVec4, in_: ImU32): void <cimport,nodecl> end
global function igColorConvertFloat4ToU32(in_: ImVec4): ImU32 <cimport,nodecl> end
global function igColorConvertRGBtoHSV(r: float32, g: float32, b: float32, out_h: *float32, out_s: *float32, out_v: *float32): void <cimport,nodecl> end
global function igColorConvertHSVtoRGB(h: float32, s: float32, v: float32, out_r: *float32, out_g: *float32, out_b: *float32): void <cimport,nodecl> end
global function igIsKeyDown_Nil(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsKeyPressed_Bool(key: ImGuiKey, repeat_: boolean): boolean <cimport,nodecl> end
global function igIsKeyReleased_Nil(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsKeyChordPressed_Nil(key_chord: ImGuiKeyChord): boolean <cimport,nodecl> end
global function igGetKeyPressedAmount(key: ImGuiKey, repeat_delay: float32, rate: float32): cint <cimport,nodecl> end
global function igGetKeyName(key: ImGuiKey): cstring <cimport,nodecl> end
global function igSetNextFrameWantCaptureKeyboard(want_capture_keyboard: boolean): void <cimport,nodecl> end
global function igShortcut_Nil(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags): boolean <cimport,nodecl> end
global function igSetNextItemShortcut(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags): void <cimport,nodecl> end
global function igSetItemKeyOwner_Nil(key: ImGuiKey): void <cimport,nodecl> end
global function igIsMouseDown_Nil(button: ImGuiMouseButton): boolean <cimport,nodecl> end
global function igIsMouseClicked_Bool(button: ImGuiMouseButton, repeat_: boolean): boolean <cimport,nodecl> end
global function igIsMouseReleased_Nil(button: ImGuiMouseButton): boolean <cimport,nodecl> end
global function igIsMouseDoubleClicked_Nil(button: ImGuiMouseButton): boolean <cimport,nodecl> end
global function igIsMouseReleasedWithDelay(button: ImGuiMouseButton, delay: float32): boolean <cimport,nodecl> end
global function igGetMouseClickedCount(button: ImGuiMouseButton): cint <cimport,nodecl> end
global function igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: boolean): boolean <cimport,nodecl> end
global function igIsMousePosValid(mouse_pos: *ImVec2): boolean <cimport,nodecl> end
global function igIsAnyMouseDown(): boolean <cimport,nodecl> end
global function igGetMousePos(pOut: *ImVec2): void <cimport,nodecl> end
global function igGetMousePosOnOpeningCurrentPopup(pOut: *ImVec2): void <cimport,nodecl> end
global function igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: float32): boolean <cimport,nodecl> end
global function igGetMouseDragDelta(pOut: *ImVec2, button: ImGuiMouseButton, lock_threshold: float32): void <cimport,nodecl> end
global function igResetMouseDragDelta(button: ImGuiMouseButton): void <cimport,nodecl> end
global function igGetMouseCursor(): ImGuiMouseCursor <cimport,nodecl> end
global function igSetMouseCursor(cursor_type: ImGuiMouseCursor): void <cimport,nodecl> end
global function igSetNextFrameWantCaptureMouse(want_capture_mouse: boolean): void <cimport,nodecl> end
global function igGetClipboardText(): cstring <cimport,nodecl> end
global function igSetClipboardText(text: cstring): void <cimport,nodecl> end
global function igLoadIniSettingsFromDisk(ini_filename: cstring): void <cimport,nodecl> end
global function igLoadIniSettingsFromMemory(ini_data: cstring, ini_size: csize): void <cimport,nodecl> end
global function igSaveIniSettingsToDisk(ini_filename: cstring): void <cimport,nodecl> end
global function igSaveIniSettingsToMemory(out_ini_size: *csize): cstring <cimport,nodecl> end
global function igDebugTextEncoding(text: cstring): void <cimport,nodecl> end
global function igDebugFlashStyleColor(idx: ImGuiCol): void <cimport,nodecl> end
global function igDebugStartItemPicker(): void <cimport,nodecl> end
global function igDebugCheckVersionAndDataLayout(version_str: cstring, sz_io: csize, sz_style: csize, sz_vec2: csize, sz_vec4: csize, sz_drawvert: csize, sz_drawidx: csize): boolean <cimport,nodecl> end
global function igDebugLog(fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igDebugLogV(fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igSetAllocatorFunctions(alloc_func: ImGuiMemAllocFunc, free_func: ImGuiMemFreeFunc, user_data: pointer): void <cimport,nodecl> end
global function igGetAllocatorFunctions(p_alloc_func: *ImGuiMemAllocFunc, p_free_func: *ImGuiMemFreeFunc, p_user_data: *pointer): void <cimport,nodecl> end
global function igMemAlloc(size: csize): pointer <cimport,nodecl> end
global function igMemFree(ptr: pointer): void <cimport,nodecl> end
global function ImGuiTableSortSpecs_ImGuiTableSortSpecs(): *ImGuiTableSortSpecs <cimport,nodecl> end
global function ImGuiTableSortSpecs_destroy(self: *ImGuiTableSortSpecs): void <cimport,nodecl> end
global function ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs(): *ImGuiTableColumnSortSpecs <cimport,nodecl> end
global function ImGuiTableColumnSortSpecs_destroy(self: *ImGuiTableColumnSortSpecs): void <cimport,nodecl> end
global function ImGuiStyle_ImGuiStyle(): *ImGuiStyle <cimport,nodecl> end
global function ImGuiStyle_destroy(self: *ImGuiStyle): void <cimport,nodecl> end
global function ImGuiStyle_ScaleAllSizes(self: *ImGuiStyle, scale_factor: float32): void <cimport,nodecl> end
global function ImGuiIO_AddKeyEvent(self: *ImGuiIO, key: ImGuiKey, down: boolean): void <cimport,nodecl> end
global function ImGuiIO_AddKeyAnalogEvent(self: *ImGuiIO, key: ImGuiKey, down: boolean, v: float32): void <cimport,nodecl> end
global function ImGuiIO_AddMousePosEvent(self: *ImGuiIO, x: float32, y: float32): void <cimport,nodecl> end
global function ImGuiIO_AddMouseButtonEvent(self: *ImGuiIO, button: cint, down: boolean): void <cimport,nodecl> end
global function ImGuiIO_AddMouseWheelEvent(self: *ImGuiIO, wheel_x: float32, wheel_y: float32): void <cimport,nodecl> end
global function ImGuiIO_AddMouseSourceEvent(self: *ImGuiIO, source: ImGuiMouseSource): void <cimport,nodecl> end
global function ImGuiIO_AddFocusEvent(self: *ImGuiIO, focused: boolean): void <cimport,nodecl> end
global function ImGuiIO_AddInputCharacter(self: *ImGuiIO, c: cuint): void <cimport,nodecl> end
global function ImGuiIO_AddInputCharacterUTF16(self: *ImGuiIO, c: ImWchar16): void <cimport,nodecl> end
global function ImGuiIO_AddInputCharactersUTF8(self: *ImGuiIO, str: cstring): void <cimport,nodecl> end
global function ImGuiIO_SetKeyEventNativeData(self: *ImGuiIO, key: ImGuiKey, native_keycode: cint, native_scancode: cint, native_legacy_index: cint): void <cimport,nodecl> end
global function ImGuiIO_SetAppAcceptingEvents(self: *ImGuiIO, accepting_events: boolean): void <cimport,nodecl> end
global function ImGuiIO_ClearEventsQueue(self: *ImGuiIO): void <cimport,nodecl> end
global function ImGuiIO_ClearInputKeys(self: *ImGuiIO): void <cimport,nodecl> end
global function ImGuiIO_ClearInputMouse(self: *ImGuiIO): void <cimport,nodecl> end
global function ImGuiIO_ImGuiIO(): *ImGuiIO <cimport,nodecl> end
global function ImGuiIO_destroy(self: *ImGuiIO): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_ImGuiInputTextCallbackData(): *ImGuiInputTextCallbackData <cimport,nodecl> end
global function ImGuiInputTextCallbackData_destroy(self: *ImGuiInputTextCallbackData): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_DeleteChars(self: *ImGuiInputTextCallbackData, pos: cint, bytes_count: cint): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_InsertChars(self: *ImGuiInputTextCallbackData, pos: cint, text: cstring, text_end: cstring): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_SelectAll(self: *ImGuiInputTextCallbackData): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_ClearSelection(self: *ImGuiInputTextCallbackData): void <cimport,nodecl> end
global function ImGuiInputTextCallbackData_HasSelection(self: *ImGuiInputTextCallbackData): boolean <cimport,nodecl> end
global function ImGuiPayload_ImGuiPayload(): *ImGuiPayload <cimport,nodecl> end
global function ImGuiPayload_destroy(self: *ImGuiPayload): void <cimport,nodecl> end
global function ImGuiPayload_Clear(self: *ImGuiPayload): void <cimport,nodecl> end
global function ImGuiPayload_IsDataType(self: *ImGuiPayload, type: cstring): boolean <cimport,nodecl> end
global function ImGuiPayload_IsPreview(self: *ImGuiPayload): boolean <cimport,nodecl> end
global function ImGuiPayload_IsDelivery(self: *ImGuiPayload): boolean <cimport,nodecl> end
global function ImGuiOnceUponAFrame_ImGuiOnceUponAFrame(): *ImGuiOnceUponAFrame <cimport,nodecl> end
global function ImGuiOnceUponAFrame_destroy(self: *ImGuiOnceUponAFrame): void <cimport,nodecl> end
global function ImGuiTextFilter_ImGuiTextFilter(default_filter: cstring): *ImGuiTextFilter <cimport,nodecl> end
global function ImGuiTextFilter_destroy(self: *ImGuiTextFilter): void <cimport,nodecl> end
global function ImGuiTextFilter_Draw(self: *ImGuiTextFilter, label: cstring, width: float32): boolean <cimport,nodecl> end
global function ImGuiTextFilter_PassFilter(self: *ImGuiTextFilter, text: cstring, text_end: cstring): boolean <cimport,nodecl> end
global function ImGuiTextFilter_Build(self: *ImGuiTextFilter): void <cimport,nodecl> end
global function ImGuiTextFilter_Clear(self: *ImGuiTextFilter): void <cimport,nodecl> end
global function ImGuiTextFilter_IsActive(self: *ImGuiTextFilter): boolean <cimport,nodecl> end
global function ImGuiTextRange_ImGuiTextRange_Nil(): *ImGuiTextRange <cimport,nodecl> end
global function ImGuiTextRange_destroy(self: *ImGuiTextRange): void <cimport,nodecl> end
global function ImGuiTextRange_ImGuiTextRange_Str(_b: cstring, _e: cstring): *ImGuiTextRange <cimport,nodecl> end
global function ImGuiTextRange_empty(self: *ImGuiTextRange): boolean <cimport,nodecl> end
global function ImGuiTextRange_split(self: *ImGuiTextRange, separator: cchar, out: *ImVector_ImGuiTextRange): void <cimport,nodecl> end
global function ImGuiTextBuffer_ImGuiTextBuffer(): *ImGuiTextBuffer <cimport,nodecl> end
global function ImGuiTextBuffer_destroy(self: *ImGuiTextBuffer): void <cimport,nodecl> end
global function ImGuiTextBuffer_begin(self: *ImGuiTextBuffer): cstring <cimport,nodecl> end
global function ImGuiTextBuffer_end(self: *ImGuiTextBuffer): cstring <cimport,nodecl> end
global function ImGuiTextBuffer_size(self: *ImGuiTextBuffer): cint <cimport,nodecl> end
global function ImGuiTextBuffer_empty(self: *ImGuiTextBuffer): boolean <cimport,nodecl> end
global function ImGuiTextBuffer_clear(self: *ImGuiTextBuffer): void <cimport,nodecl> end
global function ImGuiTextBuffer_resize(self: *ImGuiTextBuffer, size: cint): void <cimport,nodecl> end
global function ImGuiTextBuffer_reserve(self: *ImGuiTextBuffer, capacity: cint): void <cimport,nodecl> end
global function ImGuiTextBuffer_c_str(self: *ImGuiTextBuffer): cstring <cimport,nodecl> end
global function ImGuiTextBuffer_append(self: *ImGuiTextBuffer, str: cstring, str_end: cstring): void <cimport,nodecl> end
global function ImGuiTextBuffer_appendfv(self: *ImGuiTextBuffer, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function ImGuiStoragePair_ImGuiStoragePair_Int(_key: ImGuiID, _val: cint): *ImGuiStoragePair <cimport,nodecl> end
global function ImGuiStoragePair_destroy(self: *ImGuiStoragePair): void <cimport,nodecl> end
global function ImGuiStoragePair_ImGuiStoragePair_Float(_key: ImGuiID, _val: float32): *ImGuiStoragePair <cimport,nodecl> end
global function ImGuiStoragePair_ImGuiStoragePair_Ptr(_key: ImGuiID, _val: pointer): *ImGuiStoragePair <cimport,nodecl> end
global function ImGuiStorage_Clear(self: *ImGuiStorage): void <cimport,nodecl> end
global function ImGuiStorage_GetInt(self: *ImGuiStorage, key: ImGuiID, default_val: cint): cint <cimport,nodecl> end
global function ImGuiStorage_SetInt(self: *ImGuiStorage, key: ImGuiID, val: cint): void <cimport,nodecl> end
global function ImGuiStorage_GetBool(self: *ImGuiStorage, key: ImGuiID, default_val: boolean): boolean <cimport,nodecl> end
global function ImGuiStorage_SetBool(self: *ImGuiStorage, key: ImGuiID, val: boolean): void <cimport,nodecl> end
global function ImGuiStorage_GetFloat(self: *ImGuiStorage, key: ImGuiID, default_val: float32): float32 <cimport,nodecl> end
global function ImGuiStorage_SetFloat(self: *ImGuiStorage, key: ImGuiID, val: float32): void <cimport,nodecl> end
global function ImGuiStorage_GetVoidPtr(self: *ImGuiStorage, key: ImGuiID): pointer <cimport,nodecl> end
global function ImGuiStorage_SetVoidPtr(self: *ImGuiStorage, key: ImGuiID, val: pointer): void <cimport,nodecl> end
global function ImGuiStorage_GetIntRef(self: *ImGuiStorage, key: ImGuiID, default_val: cint): *cint <cimport,nodecl> end
global function ImGuiStorage_GetBoolRef(self: *ImGuiStorage, key: ImGuiID, default_val: boolean): *boolean <cimport,nodecl> end
global function ImGuiStorage_GetFloatRef(self: *ImGuiStorage, key: ImGuiID, default_val: float32): *float32 <cimport,nodecl> end
global function ImGuiStorage_GetVoidPtrRef(self: *ImGuiStorage, key: ImGuiID, default_val: pointer): *pointer <cimport,nodecl> end
global function ImGuiStorage_BuildSortByKey(self: *ImGuiStorage): void <cimport,nodecl> end
global function ImGuiStorage_SetAllInt(self: *ImGuiStorage, val: cint): void <cimport,nodecl> end
global function ImGuiListClipper_ImGuiListClipper(): *ImGuiListClipper <cimport,nodecl> end
global function ImGuiListClipper_destroy(self: *ImGuiListClipper): void <cimport,nodecl> end
global function ImGuiListClipper_Begin(self: *ImGuiListClipper, items_count: cint, items_height: float32): void <cimport,nodecl> end
global function ImGuiListClipper_End(self: *ImGuiListClipper): void <cimport,nodecl> end
global function ImGuiListClipper_Step(self: *ImGuiListClipper): boolean <cimport,nodecl> end
global function ImGuiListClipper_IncludeItemByIndex(self: *ImGuiListClipper, item_index: cint): void <cimport,nodecl> end
global function ImGuiListClipper_IncludeItemsByIndex(self: *ImGuiListClipper, item_begin: cint, item_end: cint): void <cimport,nodecl> end
global function ImGuiListClipper_SeekCursorForItem(self: *ImGuiListClipper, item_index: cint): void <cimport,nodecl> end
global function ImColor_ImColor_Nil(): *ImColor <cimport,nodecl> end
global function ImColor_destroy(self: *ImColor): void <cimport,nodecl> end
global function ImColor_ImColor_Float(r: float32, g: float32, b: float32, a: float32): *ImColor <cimport,nodecl> end
global function ImColor_ImColor_Vec4(col: ImVec4): *ImColor <cimport,nodecl> end
global function ImColor_ImColor_Int(r: cint, g: cint, b: cint, a: cint): *ImColor <cimport,nodecl> end
global function ImColor_ImColor_U32(rgba: ImU32): *ImColor <cimport,nodecl> end
global function ImColor_SetHSV(self: *ImColor, h: float32, s: float32, v: float32, a: float32): void <cimport,nodecl> end
global function ImColor_HSV(pOut: *ImColor, h: float32, s: float32, v: float32, a: float32): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_ImGuiSelectionBasicStorage(): *ImGuiSelectionBasicStorage <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_destroy(self: *ImGuiSelectionBasicStorage): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_ApplyRequests(self: *ImGuiSelectionBasicStorage, ms_io: *ImGuiMultiSelectIO): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_Contains(self: *ImGuiSelectionBasicStorage, id: ImGuiID): boolean <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_Clear(self: *ImGuiSelectionBasicStorage): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_Swap(self: *ImGuiSelectionBasicStorage, r: *ImGuiSelectionBasicStorage): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_SetItemSelected(self: *ImGuiSelectionBasicStorage, id: ImGuiID, selected: boolean): void <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_GetNextSelectedItem(self: *ImGuiSelectionBasicStorage, opaque_it: *pointer, out_id: *ImGuiID): boolean <cimport,nodecl> end
global function ImGuiSelectionBasicStorage_GetStorageIdFromIndex(self: *ImGuiSelectionBasicStorage, idx: cint): ImGuiID <cimport,nodecl> end
global function ImGuiSelectionExternalStorage_ImGuiSelectionExternalStorage(): *ImGuiSelectionExternalStorage <cimport,nodecl> end
global function ImGuiSelectionExternalStorage_destroy(self: *ImGuiSelectionExternalStorage): void <cimport,nodecl> end
global function ImGuiSelectionExternalStorage_ApplyRequests(self: *ImGuiSelectionExternalStorage, ms_io: *ImGuiMultiSelectIO): void <cimport,nodecl> end
global function ImDrawCmd_ImDrawCmd(): *ImDrawCmd <cimport,nodecl> end
global function ImDrawCmd_destroy(self: *ImDrawCmd): void <cimport,nodecl> end
global function ImDrawCmd_GetTexID(self: *ImDrawCmd): ImTextureID <cimport,nodecl> end
global function ImDrawListSplitter_ImDrawListSplitter(): *ImDrawListSplitter <cimport,nodecl> end
global function ImDrawListSplitter_destroy(self: *ImDrawListSplitter): void <cimport,nodecl> end
global function ImDrawListSplitter_Clear(self: *ImDrawListSplitter): void <cimport,nodecl> end
global function ImDrawListSplitter_ClearFreeMemory(self: *ImDrawListSplitter): void <cimport,nodecl> end
global function ImDrawListSplitter_Split(self: *ImDrawListSplitter, draw_list: *ImDrawList, count: cint): void <cimport,nodecl> end
global function ImDrawListSplitter_Merge(self: *ImDrawListSplitter, draw_list: *ImDrawList): void <cimport,nodecl> end
global function ImDrawListSplitter_SetCurrentChannel(self: *ImDrawListSplitter, draw_list: *ImDrawList, channel_idx: cint): void <cimport,nodecl> end
global function ImDrawList_ImDrawList(shared_data: *ImDrawListSharedData): *ImDrawList <cimport,nodecl> end
global function ImDrawList_destroy(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_PushClipRect(self: *ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: boolean): void <cimport,nodecl> end
global function ImDrawList_PushClipRectFullScreen(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_PopClipRect(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_PushTexture(self: *ImDrawList, tex_ref: ImTextureRef): void <cimport,nodecl> end
global function ImDrawList_PopTexture(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_GetClipRectMin(pOut: *ImVec2, self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_GetClipRectMax(pOut: *ImVec2, self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_AddLine(self: *ImDrawList, p1: ImVec2, p2: ImVec2, col: ImU32, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddRect(self: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: float32, flags: ImDrawFlags, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddRectFilled(self: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: float32, flags: ImDrawFlags): void <cimport,nodecl> end
global function ImDrawList_AddRectFilledMultiColor(self: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddQuad(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddQuadFilled(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddTriangle(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddTriangleFilled(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddCircle(self: *ImDrawList, center: ImVec2, radius: float32, col: ImU32, num_segments: cint, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddCircleFilled(self: *ImDrawList, center: ImVec2, radius: float32, col: ImU32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_AddNgon(self: *ImDrawList, center: ImVec2, radius: float32, col: ImU32, num_segments: cint, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddNgonFilled(self: *ImDrawList, center: ImVec2, radius: float32, col: ImU32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_AddEllipse(self: *ImDrawList, center: ImVec2, radius: ImVec2, col: ImU32, rot: float32, num_segments: cint, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddEllipseFilled(self: *ImDrawList, center: ImVec2, radius: ImVec2, col: ImU32, rot: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_AddText_Vec2(self: *ImDrawList, pos: ImVec2, col: ImU32, text_begin: cstring, text_end: cstring): void <cimport,nodecl> end
global function ImDrawList_AddText_FontPtr(self: *ImDrawList, font: *ImFont, font_size: float32, pos: ImVec2, col: ImU32, text_begin: cstring, text_end: cstring, wrap_width: float32, cpu_fine_clip_rect: *ImVec4): void <cimport,nodecl> end
global function ImDrawList_AddBezierCubic(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_AddBezierQuadratic(self: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_AddPolyline(self: *ImDrawList, points: *ImVec2, num_points: cint, col: ImU32, flags: ImDrawFlags, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_AddConvexPolyFilled(self: *ImDrawList, points: *ImVec2, num_points: cint, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddConcavePolyFilled(self: *ImDrawList, points: *ImVec2, num_points: cint, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddImage(self: *ImDrawList, tex_ref: ImTextureRef, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddImageQuad(self: *ImDrawList, tex_ref: ImTextureRef, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, uv1: ImVec2, uv2: ImVec2, uv3: ImVec2, uv4: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_AddImageRounded(self: *ImDrawList, tex_ref: ImTextureRef, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32, rounding: float32, flags: ImDrawFlags): void <cimport,nodecl> end
global function ImDrawList_PathClear(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_PathLineTo(self: *ImDrawList, pos: ImVec2): void <cimport,nodecl> end
global function ImDrawList_PathLineToMergeDuplicate(self: *ImDrawList, pos: ImVec2): void <cimport,nodecl> end
global function ImDrawList_PathFillConvex(self: *ImDrawList, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PathFillConcave(self: *ImDrawList, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PathStroke(self: *ImDrawList, col: ImU32, flags: ImDrawFlags, thickness: float32): void <cimport,nodecl> end
global function ImDrawList_PathArcTo(self: *ImDrawList, center: ImVec2, radius: float32, a_min: float32, a_max: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_PathArcToFast(self: *ImDrawList, center: ImVec2, radius: float32, a_min_of_12: cint, a_max_of_12: cint): void <cimport,nodecl> end
global function ImDrawList_PathEllipticalArcTo(self: *ImDrawList, center: ImVec2, radius: ImVec2, rot: float32, a_min: float32, a_max: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_PathBezierCubicCurveTo(self: *ImDrawList, p2: ImVec2, p3: ImVec2, p4: ImVec2, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_PathBezierQuadraticCurveTo(self: *ImDrawList, p2: ImVec2, p3: ImVec2, num_segments: cint): void <cimport,nodecl> end
global function ImDrawList_PathRect(self: *ImDrawList, rect_min: ImVec2, rect_max: ImVec2, rounding: float32, flags: ImDrawFlags): void <cimport,nodecl> end
global function ImDrawList_AddCallback(self: *ImDrawList, callback: ImDrawCallback, userdata: pointer, userdata_size: csize): void <cimport,nodecl> end
global function ImDrawList_AddDrawCmd(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_CloneOutput(self: *ImDrawList): *ImDrawList <cimport,nodecl> end
global function ImDrawList_ChannelsSplit(self: *ImDrawList, count: cint): void <cimport,nodecl> end
global function ImDrawList_ChannelsMerge(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList_ChannelsSetCurrent(self: *ImDrawList, n: cint): void <cimport,nodecl> end
global function ImDrawList_PrimReserve(self: *ImDrawList, idx_count: cint, vtx_count: cint): void <cimport,nodecl> end
global function ImDrawList_PrimUnreserve(self: *ImDrawList, idx_count: cint, vtx_count: cint): void <cimport,nodecl> end
global function ImDrawList_PrimRect(self: *ImDrawList, a: ImVec2, b: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PrimRectUV(self: *ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PrimQuadUV(self: *ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PrimWriteVtx(self: *ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList_PrimWriteIdx(self: *ImDrawList, idx: cuint): void <cimport,nodecl> end
global function ImDrawList_PrimVtx(self: *ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32): void <cimport,nodecl> end
global function ImDrawList__SetDrawListSharedData(self: *ImDrawList, data: *ImDrawListSharedData): void <cimport,nodecl> end
global function ImDrawList__ResetForNewFrame(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__ClearFreeMemory(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__PopUnusedDrawCmd(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__TryMergeDrawCmds(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__OnChangedClipRect(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__OnChangedTexture(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__OnChangedVtxOffset(self: *ImDrawList): void <cimport,nodecl> end
global function ImDrawList__SetTexture(self: *ImDrawList, tex_ref: ImTextureRef): void <cimport,nodecl> end
global function ImDrawList__CalcCircleAutoSegmentCount(self: *ImDrawList, radius: float32): cint <cimport,nodecl> end
global function ImDrawList__PathArcToFastEx(self: *ImDrawList, center: ImVec2, radius: float32, a_min_sample: cint, a_max_sample: cint, a_step: cint): void <cimport,nodecl> end
global function ImDrawList__PathArcToN(self: *ImDrawList, center: ImVec2, radius: float32, a_min: float32, a_max: float32, num_segments: cint): void <cimport,nodecl> end
global function ImDrawData_ImDrawData(): *ImDrawData <cimport,nodecl> end
global function ImDrawData_destroy(self: *ImDrawData): void <cimport,nodecl> end
global function ImDrawData_Clear(self: *ImDrawData): void <cimport,nodecl> end
global function ImDrawData_AddDrawList(self: *ImDrawData, draw_list: *ImDrawList): void <cimport,nodecl> end
global function ImDrawData_DeIndexAllBuffers(self: *ImDrawData): void <cimport,nodecl> end
global function ImDrawData_ScaleClipRects(self: *ImDrawData, fb_scale: ImVec2): void <cimport,nodecl> end
global function ImTextureData_ImTextureData(): *ImTextureData <cimport,nodecl> end
global function ImTextureData_destroy(self: *ImTextureData): void <cimport,nodecl> end
global function ImTextureData_Create(self: *ImTextureData, format: ImTextureFormat, w: cint, h: cint): void <cimport,nodecl> end
global function ImTextureData_DestroyPixels(self: *ImTextureData): void <cimport,nodecl> end
global function ImTextureData_GetPixels(self: *ImTextureData): pointer <cimport,nodecl> end
global function ImTextureData_GetPixelsAt(self: *ImTextureData, x: cint, y: cint): pointer <cimport,nodecl> end
global function ImTextureData_GetSizeInBytes(self: *ImTextureData): cint <cimport,nodecl> end
global function ImTextureData_GetPitch(self: *ImTextureData): cint <cimport,nodecl> end
global function ImTextureData_GetTexRef(pOut: *ImTextureRef, self: *ImTextureData): void <cimport,nodecl> end
global function ImTextureData_GetTexID(self: *ImTextureData): ImTextureID <cimport,nodecl> end
global function ImTextureData_SetTexID(self: *ImTextureData, tex_id: ImTextureID): void <cimport,nodecl> end
global function ImTextureData_SetStatus(self: *ImTextureData, status: ImTextureStatus): void <cimport,nodecl> end
global function ImFontConfig_ImFontConfig(): *ImFontConfig <cimport,nodecl> end
global function ImFontConfig_destroy(self: *ImFontConfig): void <cimport,nodecl> end
global function ImFontGlyph_ImFontGlyph(): *ImFontGlyph <cimport,nodecl> end
global function ImFontGlyph_destroy(self: *ImFontGlyph): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder(): *ImFontGlyphRangesBuilder <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_destroy(self: *ImFontGlyphRangesBuilder): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_Clear(self: *ImFontGlyphRangesBuilder): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_GetBit(self: *ImFontGlyphRangesBuilder, n: csize): boolean <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_SetBit(self: *ImFontGlyphRangesBuilder, n: csize): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_AddChar(self: *ImFontGlyphRangesBuilder, c: ImWchar): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_AddText(self: *ImFontGlyphRangesBuilder, text: cstring, text_end: cstring): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_AddRanges(self: *ImFontGlyphRangesBuilder, ranges: *ImWchar): void <cimport,nodecl> end
global function ImFontGlyphRangesBuilder_BuildRanges(self: *ImFontGlyphRangesBuilder, out_ranges: *ImVector_ImWchar): void <cimport,nodecl> end
global function ImFontAtlasRect_ImFontAtlasRect(): *ImFontAtlasRect <cimport,nodecl> end
global function ImFontAtlasRect_destroy(self: *ImFontAtlasRect): void <cimport,nodecl> end
global function ImFontAtlas_ImFontAtlas(): *ImFontAtlas <cimport,nodecl> end
global function ImFontAtlas_destroy(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_AddFont(self: *ImFontAtlas, font_cfg: *ImFontConfig): *ImFont <cimport,nodecl> end
global function ImFontAtlas_AddFontDefault(self: *ImFontAtlas, font_cfg: *ImFontConfig): *ImFont <cimport,nodecl> end
global function ImFontAtlas_AddFontFromFileTTF(self: *ImFontAtlas, filename: cstring, size_pixels: float32, font_cfg: *ImFontConfig, glyph_ranges: *ImWchar): *ImFont <cimport,nodecl> end
global function ImFontAtlas_AddFontFromMemoryTTF(self: *ImFontAtlas, font_data: pointer, font_data_size: cint, size_pixels: float32, font_cfg: *ImFontConfig, glyph_ranges: *ImWchar): *ImFont <cimport,nodecl> end
global function ImFontAtlas_AddFontFromMemoryCompressedTTF(self: *ImFontAtlas, compressed_font_data: pointer, compressed_font_data_size: cint, size_pixels: float32, font_cfg: *ImFontConfig, glyph_ranges: *ImWchar): *ImFont <cimport,nodecl> end
global function ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(self: *ImFontAtlas, compressed_font_data_base85: cstring, size_pixels: float32, font_cfg: *ImFontConfig, glyph_ranges: *ImWchar): *ImFont <cimport,nodecl> end
global function ImFontAtlas_RemoveFont(self: *ImFontAtlas, font: *ImFont): void <cimport,nodecl> end
global function ImFontAtlas_Clear(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_CompactCache(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_SetFontLoader(self: *ImFontAtlas, font_loader: *ImFontLoader): void <cimport,nodecl> end
global function ImFontAtlas_ClearInputData(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_ClearFonts(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_ClearTexData(self: *ImFontAtlas): void <cimport,nodecl> end
global function ImFontAtlas_GetGlyphRangesDefault(self: *ImFontAtlas): *ImWchar <cimport,nodecl> end
global function ImFontAtlas_AddCustomRect(self: *ImFontAtlas, width: cint, height: cint, out_r: *ImFontAtlasRect): ImFontAtlasRectId <cimport,nodecl> end
global function ImFontAtlas_RemoveCustomRect(self: *ImFontAtlas, id: ImFontAtlasRectId): void <cimport,nodecl> end
global function ImFontAtlas_GetCustomRect(self: *ImFontAtlas, id: ImFontAtlasRectId, out_r: *ImFontAtlasRect): boolean <cimport,nodecl> end
global function ImFontBaked_ImFontBaked(): *ImFontBaked <cimport,nodecl> end
global function ImFontBaked_destroy(self: *ImFontBaked): void <cimport,nodecl> end
global function ImFontBaked_ClearOutputData(self: *ImFontBaked): void <cimport,nodecl> end
global function ImFontBaked_FindGlyph(self: *ImFontBaked, c: ImWchar): *ImFontGlyph <cimport,nodecl> end
global function ImFontBaked_FindGlyphNoFallback(self: *ImFontBaked, c: ImWchar): *ImFontGlyph <cimport,nodecl> end
global function ImFontBaked_GetCharAdvance(self: *ImFontBaked, c: ImWchar): float32 <cimport,nodecl> end
global function ImFontBaked_IsGlyphLoaded(self: *ImFontBaked, c: ImWchar): boolean <cimport,nodecl> end
global function ImFont_ImFont(): *ImFont <cimport,nodecl> end
global function ImFont_destroy(self: *ImFont): void <cimport,nodecl> end
global function ImFont_IsGlyphInFont(self: *ImFont, c: ImWchar): boolean <cimport,nodecl> end
global function ImFont_IsLoaded(self: *ImFont): boolean <cimport,nodecl> end
global function ImFont_GetDebugName(self: *ImFont): cstring <cimport,nodecl> end
global function ImFont_GetFontBaked(self: *ImFont, font_size: float32, density: float32): *ImFontBaked <cimport,nodecl> end
global function ImFont_CalcTextSizeA(pOut: *ImVec2, self: *ImFont, size: float32, max_width: float32, wrap_width: float32, text_begin: cstring, text_end: cstring, remaining: *cstring): void <cimport,nodecl> end
global function ImFont_CalcWordWrapPosition(self: *ImFont, size: float32, text: cstring, text_end: cstring, wrap_width: float32): cstring <cimport,nodecl> end
global function ImFont_RenderChar(self: *ImFont, draw_list: *ImDrawList, size: float32, pos: ImVec2, col: ImU32, c: ImWchar, cpu_fine_clip: *ImVec4): void <cimport,nodecl> end
global function ImFont_RenderText(self: *ImFont, draw_list: *ImDrawList, size: float32, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text_begin: cstring, text_end: cstring, wrap_width: float32, cpu_fine_clip: boolean): void <cimport,nodecl> end
global function ImFont_ClearOutputData(self: *ImFont): void <cimport,nodecl> end
global function ImFont_AddRemapChar(self: *ImFont, from_codepoint: ImWchar, to_codepoint: ImWchar): void <cimport,nodecl> end
global function ImFont_IsGlyphRangeUnused(self: *ImFont, c_begin: cuint, c_last: cuint): boolean <cimport,nodecl> end
global function ImGuiViewport_ImGuiViewport(): *ImGuiViewport <cimport,nodecl> end
global function ImGuiViewport_destroy(self: *ImGuiViewport): void <cimport,nodecl> end
global function ImGuiViewport_GetCenter(pOut: *ImVec2, self: *ImGuiViewport): void <cimport,nodecl> end
global function ImGuiViewport_GetWorkCenter(pOut: *ImVec2, self: *ImGuiViewport): void <cimport,nodecl> end
global function ImGuiPlatformIO_ImGuiPlatformIO(): *ImGuiPlatformIO <cimport,nodecl> end
global function ImGuiPlatformIO_destroy(self: *ImGuiPlatformIO): void <cimport,nodecl> end
global function ImGuiPlatformImeData_ImGuiPlatformImeData(): *ImGuiPlatformImeData <cimport,nodecl> end
global function ImGuiPlatformImeData_destroy(self: *ImGuiPlatformImeData): void <cimport,nodecl> end
global function igImHashData(data: pointer, data_size: csize, seed: ImGuiID): ImGuiID <cimport,nodecl> end
global function igImHashStr(data: cstring, data_size: csize, seed: ImGuiID): ImGuiID <cimport,nodecl> end
global function igImQsort(base: pointer, count: csize, size_of_element: csize, compare_func: function(a1: pointer, a2: pointer): cint): void <cimport,nodecl> end
global function igImAlphaBlendColors(col_a: ImU32, col_b: ImU32): ImU32 <cimport,nodecl> end
global function igImIsPowerOfTwo_Int(v: cint): boolean <cimport,nodecl> end
global function igImIsPowerOfTwo_U64(v: ImU64): boolean <cimport,nodecl> end
global function igImUpperPowerOfTwo(v: cint): cint <cimport,nodecl> end
global function igImCountSetBits(v: cuint): cuint <cimport,nodecl> end
global function igImStricmp(str1: cstring, str2: cstring): cint <cimport,nodecl> end
global function igImStrnicmp(str1: cstring, str2: cstring, count: csize): cint <cimport,nodecl> end
global function igImStrncpy(dst: cstring, src: cstring, count: csize): void <cimport,nodecl> end
global function igImStrdup(str: cstring): cstring <cimport,nodecl> end
global function igImMemdup(src: pointer, size: csize): pointer <cimport,nodecl> end
global function igImStrdupcpy(dst: cstring, p_dst_size: *csize, str: cstring): cstring <cimport,nodecl> end
global function igImStrchrRange(str_begin: cstring, str_end: cstring, c: cchar): cstring <cimport,nodecl> end
global function igImStreolRange(str: cstring, str_end: cstring): cstring <cimport,nodecl> end
global function igImStristr(haystack: cstring, haystack_end: cstring, needle: cstring, needle_end: cstring): cstring <cimport,nodecl> end
global function igImStrTrimBlanks(str: cstring): void <cimport,nodecl> end
global function igImStrSkipBlank(str: cstring): cstring <cimport,nodecl> end
global function igImStrlenW(str: *ImWchar): cint <cimport,nodecl> end
global function igImStrbol(buf_mid_line: cstring, buf_begin: cstring): cstring <cimport,nodecl> end
global function igImToUpper(c: cchar): cchar <cimport,nodecl> end
global function igImCharIsBlankA(c: cchar): boolean <cimport,nodecl> end
global function igImCharIsBlankW(c: cuint): boolean <cimport,nodecl> end
global function igImCharIsXdigitA(c: cchar): boolean <cimport,nodecl> end
global function igImFormatString(buf: cstring, buf_size: csize, fmt: cstring, ...: cvarargs): cint <cimport,nodecl> end
global function igImFormatStringV(buf: cstring, buf_size: csize, fmt: cstring, args: cvalist): cint <cimport,nodecl> end
global function igImFormatStringToTempBuffer(out_buf: *cstring, out_buf_end: *cstring, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igImFormatStringToTempBufferV(out_buf: *cstring, out_buf_end: *cstring, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igImParseFormatFindStart(format: cstring): cstring <cimport,nodecl> end
global function igImParseFormatFindEnd(format: cstring): cstring <cimport,nodecl> end
global function igImParseFormatTrimDecorations(format: cstring, buf: cstring, buf_size: csize): cstring <cimport,nodecl> end
global function igImParseFormatSanitizeForPrinting(fmt_in: cstring, fmt_out: cstring, fmt_out_size: csize): void <cimport,nodecl> end
global function igImParseFormatSanitizeForScanning(fmt_in: cstring, fmt_out: cstring, fmt_out_size: csize): cstring <cimport,nodecl> end
global function igImParseFormatPrecision(format: cstring, default_value: cint): cint <cimport,nodecl> end
global function igImTextCharToUtf8(out_buf: *[5]cchar, c: cuint): cstring <cimport,nodecl> end
global function igImTextStrToUtf8(out_buf: cstring, out_buf_size: cint, in_text: *ImWchar, in_text_end: *ImWchar): cint <cimport,nodecl> end
global function igImTextCharFromUtf8(out_char: *cuint, in_text: cstring, in_text_end: cstring): cint <cimport,nodecl> end
global function igImTextStrFromUtf8(out_buf: *ImWchar, out_buf_size: cint, in_text: cstring, in_text_end: cstring, in_remaining: *cstring): cint <cimport,nodecl> end
global function igImTextCountCharsFromUtf8(in_text: cstring, in_text_end: cstring): cint <cimport,nodecl> end
global function igImTextCountUtf8BytesFromChar(in_text: cstring, in_text_end: cstring): cint <cimport,nodecl> end
global function igImTextCountUtf8BytesFromStr(in_text: *ImWchar, in_text_end: *ImWchar): cint <cimport,nodecl> end
global function igImTextFindPreviousUtf8Codepoint(in_text_start: cstring, in_text_curr: cstring): cstring <cimport,nodecl> end
global function igImTextCountLines(in_text: cstring, in_text_end: cstring): cint <cimport,nodecl> end
global function igImFileOpen(filename: cstring, mode: cstring): ImFileHandle <cimport,nodecl> end
global function igImFileClose(file: ImFileHandle): boolean <cimport,nodecl> end
global function igImFileGetSize(file: ImFileHandle): ImU64 <cimport,nodecl> end
global function igImFileRead(data: pointer, size: ImU64, count: ImU64, file: ImFileHandle): ImU64 <cimport,nodecl> end
global function igImFileWrite(data: pointer, size: ImU64, count: ImU64, file: ImFileHandle): ImU64 <cimport,nodecl> end
global function igImFileLoadToMemory(filename: cstring, mode: cstring, out_file_size: *csize, padding_bytes: cint): pointer <cimport,nodecl> end
global function igImPow_Float(x: float32, y: float32): float32 <cimport,nodecl> end
global function igImPow_double(x: float64, y: float64): float64 <cimport,nodecl> end
global function igImLog_Float(x: float32): float32 <cimport,nodecl> end
global function igImLog_double(x: float64): float64 <cimport,nodecl> end
global function igImAbs_Int(x: cint): cint <cimport,nodecl> end
global function igImAbs_Float(x: float32): float32 <cimport,nodecl> end
global function igImAbs_double(x: float64): float64 <cimport,nodecl> end
global function igImSign_Float(x: float32): float32 <cimport,nodecl> end
global function igImSign_double(x: float64): float64 <cimport,nodecl> end
global function igImRsqrt_Float(x: float32): float32 <cimport,nodecl> end
global function igImRsqrt_double(x: float64): float64 <cimport,nodecl> end
global function igImMin(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2): void <cimport,nodecl> end
global function igImMax(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2): void <cimport,nodecl> end
global function igImClamp(pOut: *ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2): void <cimport,nodecl> end
global function igImLerp_Vec2Float(pOut: *ImVec2, a: ImVec2, b: ImVec2, t: float32): void <cimport,nodecl> end
global function igImLerp_Vec2Vec2(pOut: *ImVec2, a: ImVec2, b: ImVec2, t: ImVec2): void <cimport,nodecl> end
global function igImLerp_Vec4(pOut: *ImVec4, a: ImVec4, b: ImVec4, t: float32): void <cimport,nodecl> end
global function igImSaturate(f: float32): float32 <cimport,nodecl> end
global function igImLengthSqr_Vec2(lhs: ImVec2): float32 <cimport,nodecl> end
global function igImLengthSqr_Vec4(lhs: ImVec4): float32 <cimport,nodecl> end
global function igImInvLength(lhs: ImVec2, fail_value: float32): float32 <cimport,nodecl> end
global function igImTrunc_Float(f: float32): float32 <cimport,nodecl> end
global function igImTrunc_Vec2(pOut: *ImVec2, v: ImVec2): void <cimport,nodecl> end
global function igImFloor_Float(f: float32): float32 <cimport,nodecl> end
global function igImFloor_Vec2(pOut: *ImVec2, v: ImVec2): void <cimport,nodecl> end
global function igImTrunc64(f: float32): float32 <cimport,nodecl> end
global function igImRound64(f: float32): float32 <cimport,nodecl> end
global function igImModPositive(a: cint, b: cint): cint <cimport,nodecl> end
global function igImDot(a: ImVec2, b: ImVec2): float32 <cimport,nodecl> end
global function igImRotate(pOut: *ImVec2, v: ImVec2, cos_a: float32, sin_a: float32): void <cimport,nodecl> end
global function igImLinearSweep(current: float32, target: float32, speed: float32): float32 <cimport,nodecl> end
global function igImLinearRemapClamp(s0: float32, s1: float32, d0: float32, d1: float32, x: float32): float32 <cimport,nodecl> end
global function igImMul(pOut: *ImVec2, lhs: ImVec2, rhs: ImVec2): void <cimport,nodecl> end
global function igImIsFloatAboveGuaranteedIntegerPrecision(f: float32): boolean <cimport,nodecl> end
global function igImExponentialMovingAverage(avg: float32, sample: float32, n: cint): float32 <cimport,nodecl> end
global function igImBezierCubicCalc(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, t: float32): void <cimport,nodecl> end
global function igImBezierCubicClosestPoint(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, num_segments: cint): void <cimport,nodecl> end
global function igImBezierCubicClosestPointCasteljau(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, p: ImVec2, tess_tol: float32): void <cimport,nodecl> end
global function igImBezierQuadraticCalc(pOut: *ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: float32): void <cimport,nodecl> end
global function igImLineClosestPoint(pOut: *ImVec2, a: ImVec2, b: ImVec2, p: ImVec2): void <cimport,nodecl> end
global function igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2): boolean <cimport,nodecl> end
global function igImTriangleClosestPoint(pOut: *ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2): void <cimport,nodecl> end
global function igImTriangleBarycentricCoords(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2, out_u: *float32, out_v: *float32, out_w: *float32): void <cimport,nodecl> end
global function igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2): float32 <cimport,nodecl> end
global function igImTriangleIsClockwise(a: ImVec2, b: ImVec2, c: ImVec2): boolean <cimport,nodecl> end
global function ImVec1_ImVec1_Nil(): *ImVec1 <cimport,nodecl> end
global function ImVec1_destroy(self: *ImVec1): void <cimport,nodecl> end
global function ImVec1_ImVec1_Float(_x: float32): *ImVec1 <cimport,nodecl> end
global function ImVec2i_ImVec2i_Nil(): *ImVec2i <cimport,nodecl> end
global function ImVec2i_destroy(self: *ImVec2i): void <cimport,nodecl> end
global function ImVec2i_ImVec2i_Int(_x: cint, _y: cint): *ImVec2i <cimport,nodecl> end
global function ImVec2ih_ImVec2ih_Nil(): *ImVec2ih <cimport,nodecl> end
global function ImVec2ih_destroy(self: *ImVec2ih): void <cimport,nodecl> end
global function ImVec2ih_ImVec2ih_short(_x: cshort, _y: cshort): *ImVec2ih <cimport,nodecl> end
global function ImVec2ih_ImVec2ih_Vec2(rhs: ImVec2): *ImVec2ih <cimport,nodecl> end
global function ImRect_ImRect_Nil(): *ImRect <cimport,nodecl> end
global function ImRect_destroy(self: *ImRect): void <cimport,nodecl> end
global function ImRect_ImRect_Vec2(min: ImVec2, max: ImVec2): *ImRect <cimport,nodecl> end
global function ImRect_ImRect_Vec4(v: ImVec4): *ImRect <cimport,nodecl> end
global function ImRect_ImRect_Float(x1: float32, y1: float32, x2: float32, y2: float32): *ImRect <cimport,nodecl> end
global function ImRect_GetCenter(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_GetSize(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_GetWidth(self: *ImRect): float32 <cimport,nodecl> end
global function ImRect_GetHeight(self: *ImRect): float32 <cimport,nodecl> end
global function ImRect_GetArea(self: *ImRect): float32 <cimport,nodecl> end
global function ImRect_GetTL(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_GetTR(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_GetBL(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_GetBR(pOut: *ImVec2, self: *ImRect): void <cimport,nodecl> end
global function ImRect_Contains_Vec2(self: *ImRect, p: ImVec2): boolean <cimport,nodecl> end
global function ImRect_Contains_Rect(self: *ImRect, r: ImRect): boolean <cimport,nodecl> end
global function ImRect_ContainsWithPad(self: *ImRect, p: ImVec2, pad: ImVec2): boolean <cimport,nodecl> end
global function ImRect_Overlaps(self: *ImRect, r: ImRect): boolean <cimport,nodecl> end
global function ImRect_Add_Vec2(self: *ImRect, p: ImVec2): void <cimport,nodecl> end
global function ImRect_Add_Rect(self: *ImRect, r: ImRect): void <cimport,nodecl> end
global function ImRect_Expand_Float(self: *ImRect, amount: float32): void <cimport,nodecl> end
global function ImRect_Expand_Vec2(self: *ImRect, amount: ImVec2): void <cimport,nodecl> end
global function ImRect_Translate(self: *ImRect, d: ImVec2): void <cimport,nodecl> end
global function ImRect_TranslateX(self: *ImRect, dx: float32): void <cimport,nodecl> end
global function ImRect_TranslateY(self: *ImRect, dy: float32): void <cimport,nodecl> end
global function ImRect_ClipWith(self: *ImRect, r: ImRect): void <cimport,nodecl> end
global function ImRect_ClipWithFull(self: *ImRect, r: ImRect): void <cimport,nodecl> end
global function ImRect_Floor(self: *ImRect): void <cimport,nodecl> end
global function ImRect_IsInverted(self: *ImRect): boolean <cimport,nodecl> end
global function ImRect_ToVec4(pOut: *ImVec4, self: *ImRect): void <cimport,nodecl> end
global function igImBitArrayGetStorageSizeInBytes(bitcount: cint): csize <cimport,nodecl> end
global function igImBitArrayClearAllBits(arr: *ImU32, bitcount: cint): void <cimport,nodecl> end
global function igImBitArrayTestBit(arr: *ImU32, n: cint): boolean <cimport,nodecl> end
global function igImBitArrayClearBit(arr: *ImU32, n: cint): void <cimport,nodecl> end
global function igImBitArraySetBit(arr: *ImU32, n: cint): void <cimport,nodecl> end
global function igImBitArraySetBitRange(arr: *ImU32, n: cint, n2: cint): void <cimport,nodecl> end
global function ImBitVector_Create(self: *ImBitVector, sz: cint): void <cimport,nodecl> end
global function ImBitVector_Clear(self: *ImBitVector): void <cimport,nodecl> end
global function ImBitVector_TestBit(self: *ImBitVector, n: cint): boolean <cimport,nodecl> end
global function ImBitVector_SetBit(self: *ImBitVector, n: cint): void <cimport,nodecl> end
global function ImBitVector_ClearBit(self: *ImBitVector, n: cint): void <cimport,nodecl> end
global function ImGuiTextIndex_clear(self: *ImGuiTextIndex): void <cimport,nodecl> end
global function ImGuiTextIndex_size(self: *ImGuiTextIndex): cint <cimport,nodecl> end
global function ImGuiTextIndex_get_line_begin(self: *ImGuiTextIndex, base: cstring, n: cint): cstring <cimport,nodecl> end
global function ImGuiTextIndex_get_line_end(self: *ImGuiTextIndex, base: cstring, n: cint): cstring <cimport,nodecl> end
global function ImGuiTextIndex_append(self: *ImGuiTextIndex, base: cstring, old_size: cint, new_size: cint): void <cimport,nodecl> end
global function igImLowerBound(in_begin: *ImGuiStoragePair, in_end: *ImGuiStoragePair, key: ImGuiID): *ImGuiStoragePair <cimport,nodecl> end
global function ImDrawListSharedData_ImDrawListSharedData(): *ImDrawListSharedData <cimport,nodecl> end
global function ImDrawListSharedData_destroy(self: *ImDrawListSharedData): void <cimport,nodecl> end
global function ImDrawListSharedData_SetCircleTessellationMaxError(self: *ImDrawListSharedData, max_error: float32): void <cimport,nodecl> end
global function ImDrawDataBuilder_ImDrawDataBuilder(): *ImDrawDataBuilder <cimport,nodecl> end
global function ImDrawDataBuilder_destroy(self: *ImDrawDataBuilder): void <cimport,nodecl> end
global function ImGuiStyleVarInfo_GetVarPtr(self: *ImGuiStyleVarInfo, parent: pointer): pointer <cimport,nodecl> end
global function ImGuiStyleMod_ImGuiStyleMod_Int(idx: ImGuiStyleVar, v: cint): *ImGuiStyleMod <cimport,nodecl> end
global function ImGuiStyleMod_destroy(self: *ImGuiStyleMod): void <cimport,nodecl> end
global function ImGuiStyleMod_ImGuiStyleMod_Float(idx: ImGuiStyleVar, v: float32): *ImGuiStyleMod <cimport,nodecl> end
global function ImGuiStyleMod_ImGuiStyleMod_Vec2(idx: ImGuiStyleVar, v: ImVec2): *ImGuiStyleMod <cimport,nodecl> end
global function ImGuiComboPreviewData_ImGuiComboPreviewData(): *ImGuiComboPreviewData <cimport,nodecl> end
global function ImGuiComboPreviewData_destroy(self: *ImGuiComboPreviewData): void <cimport,nodecl> end
global function ImGuiMenuColumns_ImGuiMenuColumns(): *ImGuiMenuColumns <cimport,nodecl> end
global function ImGuiMenuColumns_destroy(self: *ImGuiMenuColumns): void <cimport,nodecl> end
global function ImGuiMenuColumns_Update(self: *ImGuiMenuColumns, spacing: float32, window_reappearing: boolean): void <cimport,nodecl> end
global function ImGuiMenuColumns_DeclColumns(self: *ImGuiMenuColumns, w_icon: float32, w_label: float32, w_shortcut: float32, w_mark: float32): float32 <cimport,nodecl> end
global function ImGuiMenuColumns_CalcNextTotalWidth(self: *ImGuiMenuColumns, update_offsets: boolean): void <cimport,nodecl> end
global function ImGuiInputTextDeactivatedState_ImGuiInputTextDeactivatedState(): *ImGuiInputTextDeactivatedState <cimport,nodecl> end
global function ImGuiInputTextDeactivatedState_destroy(self: *ImGuiInputTextDeactivatedState): void <cimport,nodecl> end
global function ImGuiInputTextDeactivatedState_ClearFreeMemory(self: *ImGuiInputTextDeactivatedState): void <cimport,nodecl> end
global function ImGuiInputTextState_ImGuiInputTextState(): *ImGuiInputTextState <cimport,nodecl> end
global function ImGuiInputTextState_destroy(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_ClearText(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_ClearFreeMemory(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_OnKeyPressed(self: *ImGuiInputTextState, key: cint): void <cimport,nodecl> end
global function ImGuiInputTextState_OnCharPressed(self: *ImGuiInputTextState, c: cuint): void <cimport,nodecl> end
global function ImGuiInputTextState_CursorAnimReset(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_CursorClamp(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_HasSelection(self: *ImGuiInputTextState): boolean <cimport,nodecl> end
global function ImGuiInputTextState_ClearSelection(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_GetCursorPos(self: *ImGuiInputTextState): cint <cimport,nodecl> end
global function ImGuiInputTextState_GetSelectionStart(self: *ImGuiInputTextState): cint <cimport,nodecl> end
global function ImGuiInputTextState_GetSelectionEnd(self: *ImGuiInputTextState): cint <cimport,nodecl> end
global function ImGuiInputTextState_SelectAll(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_ReloadUserBufAndSelectAll(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_ReloadUserBufAndKeepSelection(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiInputTextState_ReloadUserBufAndMoveToEnd(self: *ImGuiInputTextState): void <cimport,nodecl> end
global function ImGuiNextWindowData_ImGuiNextWindowData(): *ImGuiNextWindowData <cimport,nodecl> end
global function ImGuiNextWindowData_destroy(self: *ImGuiNextWindowData): void <cimport,nodecl> end
global function ImGuiNextWindowData_ClearFlags(self: *ImGuiNextWindowData): void <cimport,nodecl> end
global function ImGuiNextItemData_ImGuiNextItemData(): *ImGuiNextItemData <cimport,nodecl> end
global function ImGuiNextItemData_destroy(self: *ImGuiNextItemData): void <cimport,nodecl> end
global function ImGuiNextItemData_ClearFlags(self: *ImGuiNextItemData): void <cimport,nodecl> end
global function ImGuiLastItemData_ImGuiLastItemData(): *ImGuiLastItemData <cimport,nodecl> end
global function ImGuiLastItemData_destroy(self: *ImGuiLastItemData): void <cimport,nodecl> end
global function ImGuiErrorRecoveryState_ImGuiErrorRecoveryState(): *ImGuiErrorRecoveryState <cimport,nodecl> end
global function ImGuiErrorRecoveryState_destroy(self: *ImGuiErrorRecoveryState): void <cimport,nodecl> end
global function ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(ptr: pointer): *ImGuiPtrOrIndex <cimport,nodecl> end
global function ImGuiPtrOrIndex_destroy(self: *ImGuiPtrOrIndex): void <cimport,nodecl> end
global function ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(index: cint): *ImGuiPtrOrIndex <cimport,nodecl> end
global function ImGuiPopupData_ImGuiPopupData(): *ImGuiPopupData <cimport,nodecl> end
global function ImGuiPopupData_destroy(self: *ImGuiPopupData): void <cimport,nodecl> end
global function ImGuiInputEvent_ImGuiInputEvent(): *ImGuiInputEvent <cimport,nodecl> end
global function ImGuiInputEvent_destroy(self: *ImGuiInputEvent): void <cimport,nodecl> end
global function ImGuiKeyRoutingData_ImGuiKeyRoutingData(): *ImGuiKeyRoutingData <cimport,nodecl> end
global function ImGuiKeyRoutingData_destroy(self: *ImGuiKeyRoutingData): void <cimport,nodecl> end
global function ImGuiKeyRoutingTable_ImGuiKeyRoutingTable(): *ImGuiKeyRoutingTable <cimport,nodecl> end
global function ImGuiKeyRoutingTable_destroy(self: *ImGuiKeyRoutingTable): void <cimport,nodecl> end
global function ImGuiKeyRoutingTable_Clear(self: *ImGuiKeyRoutingTable): void <cimport,nodecl> end
global function ImGuiKeyOwnerData_ImGuiKeyOwnerData(): *ImGuiKeyOwnerData <cimport,nodecl> end
global function ImGuiKeyOwnerData_destroy(self: *ImGuiKeyOwnerData): void <cimport,nodecl> end
global function ImGuiListClipperRange_FromIndices(min: cint, max: cint): ImGuiListClipperRange <cimport,nodecl> end
global function ImGuiListClipperRange_FromPositions(y1: float32, y2: float32, off_min: cint, off_max: cint): ImGuiListClipperRange <cimport,nodecl> end
global function ImGuiListClipperData_ImGuiListClipperData(): *ImGuiListClipperData <cimport,nodecl> end
global function ImGuiListClipperData_destroy(self: *ImGuiListClipperData): void <cimport,nodecl> end
global function ImGuiListClipperData_Reset(self: *ImGuiListClipperData, clipper: *ImGuiListClipper): void <cimport,nodecl> end
global function ImGuiNavItemData_ImGuiNavItemData(): *ImGuiNavItemData <cimport,nodecl> end
global function ImGuiNavItemData_destroy(self: *ImGuiNavItemData): void <cimport,nodecl> end
global function ImGuiNavItemData_Clear(self: *ImGuiNavItemData): void <cimport,nodecl> end
global function ImGuiTypingSelectState_ImGuiTypingSelectState(): *ImGuiTypingSelectState <cimport,nodecl> end
global function ImGuiTypingSelectState_destroy(self: *ImGuiTypingSelectState): void <cimport,nodecl> end
global function ImGuiTypingSelectState_Clear(self: *ImGuiTypingSelectState): void <cimport,nodecl> end
global function ImGuiOldColumnData_ImGuiOldColumnData(): *ImGuiOldColumnData <cimport,nodecl> end
global function ImGuiOldColumnData_destroy(self: *ImGuiOldColumnData): void <cimport,nodecl> end
global function ImGuiOldColumns_ImGuiOldColumns(): *ImGuiOldColumns <cimport,nodecl> end
global function ImGuiOldColumns_destroy(self: *ImGuiOldColumns): void <cimport,nodecl> end
global function ImGuiBoxSelectState_ImGuiBoxSelectState(): *ImGuiBoxSelectState <cimport,nodecl> end
global function ImGuiBoxSelectState_destroy(self: *ImGuiBoxSelectState): void <cimport,nodecl> end
global function ImGuiMultiSelectTempData_ImGuiMultiSelectTempData(): *ImGuiMultiSelectTempData <cimport,nodecl> end
global function ImGuiMultiSelectTempData_destroy(self: *ImGuiMultiSelectTempData): void <cimport,nodecl> end
global function ImGuiMultiSelectTempData_Clear(self: *ImGuiMultiSelectTempData): void <cimport,nodecl> end
global function ImGuiMultiSelectTempData_ClearIO(self: *ImGuiMultiSelectTempData): void <cimport,nodecl> end
global function ImGuiMultiSelectState_ImGuiMultiSelectState(): *ImGuiMultiSelectState <cimport,nodecl> end
global function ImGuiMultiSelectState_destroy(self: *ImGuiMultiSelectState): void <cimport,nodecl> end
global function ImGuiViewportP_ImGuiViewportP(): *ImGuiViewportP <cimport,nodecl> end
global function ImGuiViewportP_destroy(self: *ImGuiViewportP): void <cimport,nodecl> end
global function ImGuiViewportP_CalcWorkRectPos(pOut: *ImVec2, self: *ImGuiViewportP, inset_min: ImVec2): void <cimport,nodecl> end
global function ImGuiViewportP_CalcWorkRectSize(pOut: *ImVec2, self: *ImGuiViewportP, inset_min: ImVec2, inset_max: ImVec2): void <cimport,nodecl> end
global function ImGuiViewportP_UpdateWorkRect(self: *ImGuiViewportP): void <cimport,nodecl> end
global function ImGuiViewportP_GetMainRect(pOut: *ImRect, self: *ImGuiViewportP): void <cimport,nodecl> end
global function ImGuiViewportP_GetWorkRect(pOut: *ImRect, self: *ImGuiViewportP): void <cimport,nodecl> end
global function ImGuiViewportP_GetBuildWorkRect(pOut: *ImRect, self: *ImGuiViewportP): void <cimport,nodecl> end
global function ImGuiWindowSettings_ImGuiWindowSettings(): *ImGuiWindowSettings <cimport,nodecl> end
global function ImGuiWindowSettings_destroy(self: *ImGuiWindowSettings): void <cimport,nodecl> end
global function ImGuiWindowSettings_GetName(self: *ImGuiWindowSettings): cstring <cimport,nodecl> end
global function ImGuiSettingsHandler_ImGuiSettingsHandler(): *ImGuiSettingsHandler <cimport,nodecl> end
global function ImGuiSettingsHandler_destroy(self: *ImGuiSettingsHandler): void <cimport,nodecl> end
global function ImGuiDebugAllocInfo_ImGuiDebugAllocInfo(): *ImGuiDebugAllocInfo <cimport,nodecl> end
global function ImGuiDebugAllocInfo_destroy(self: *ImGuiDebugAllocInfo): void <cimport,nodecl> end
global function ImGuiStackLevelInfo_ImGuiStackLevelInfo(): *ImGuiStackLevelInfo <cimport,nodecl> end
global function ImGuiStackLevelInfo_destroy(self: *ImGuiStackLevelInfo): void <cimport,nodecl> end
global function ImGuiIDStackTool_ImGuiIDStackTool(): *ImGuiIDStackTool <cimport,nodecl> end
global function ImGuiIDStackTool_destroy(self: *ImGuiIDStackTool): void <cimport,nodecl> end
global function ImGuiContextHook_ImGuiContextHook(): *ImGuiContextHook <cimport,nodecl> end
global function ImGuiContextHook_destroy(self: *ImGuiContextHook): void <cimport,nodecl> end
global function ImGuiContext_ImGuiContext(shared_font_atlas: *ImFontAtlas): *ImGuiContext <cimport,nodecl> end
global function ImGuiContext_destroy(self: *ImGuiContext): void <cimport,nodecl> end
global function ImGuiWindow_ImGuiWindow(context: *ImGuiContext, name: cstring): *ImGuiWindow <cimport,nodecl> end
global function ImGuiWindow_destroy(self: *ImGuiWindow): void <cimport,nodecl> end
global function ImGuiWindow_GetID_Str(self: *ImGuiWindow, str: cstring, str_end: cstring): ImGuiID <cimport,nodecl> end
global function ImGuiWindow_GetID_Ptr(self: *ImGuiWindow, ptr: pointer): ImGuiID <cimport,nodecl> end
global function ImGuiWindow_GetID_Int(self: *ImGuiWindow, n: cint): ImGuiID <cimport,nodecl> end
global function ImGuiWindow_GetIDFromPos(self: *ImGuiWindow, p_abs: ImVec2): ImGuiID <cimport,nodecl> end
global function ImGuiWindow_GetIDFromRectangle(self: *ImGuiWindow, r_abs: ImRect): ImGuiID <cimport,nodecl> end
global function ImGuiWindow_Rect(pOut: *ImRect, self: *ImGuiWindow): void <cimport,nodecl> end
global function ImGuiWindow_TitleBarRect(pOut: *ImRect, self: *ImGuiWindow): void <cimport,nodecl> end
global function ImGuiWindow_MenuBarRect(pOut: *ImRect, self: *ImGuiWindow): void <cimport,nodecl> end
global function ImGuiTabItem_ImGuiTabItem(): *ImGuiTabItem <cimport,nodecl> end
global function ImGuiTabItem_destroy(self: *ImGuiTabItem): void <cimport,nodecl> end
global function ImGuiTabBar_ImGuiTabBar(): *ImGuiTabBar <cimport,nodecl> end
global function ImGuiTabBar_destroy(self: *ImGuiTabBar): void <cimport,nodecl> end
global function ImGuiTableColumn_ImGuiTableColumn(): *ImGuiTableColumn <cimport,nodecl> end
global function ImGuiTableColumn_destroy(self: *ImGuiTableColumn): void <cimport,nodecl> end
global function ImGuiTableInstanceData_ImGuiTableInstanceData(): *ImGuiTableInstanceData <cimport,nodecl> end
global function ImGuiTableInstanceData_destroy(self: *ImGuiTableInstanceData): void <cimport,nodecl> end
global function ImGuiTable_ImGuiTable(): *ImGuiTable <cimport,nodecl> end
global function ImGuiTable_destroy(self: *ImGuiTable): void <cimport,nodecl> end
global function ImGuiTableTempData_ImGuiTableTempData(): *ImGuiTableTempData <cimport,nodecl> end
global function ImGuiTableTempData_destroy(self: *ImGuiTableTempData): void <cimport,nodecl> end
global function ImGuiTableColumnSettings_ImGuiTableColumnSettings(): *ImGuiTableColumnSettings <cimport,nodecl> end
global function ImGuiTableColumnSettings_destroy(self: *ImGuiTableColumnSettings): void <cimport,nodecl> end
global function ImGuiTableSettings_ImGuiTableSettings(): *ImGuiTableSettings <cimport,nodecl> end
global function ImGuiTableSettings_destroy(self: *ImGuiTableSettings): void <cimport,nodecl> end
global function ImGuiTableSettings_GetColumnSettings(self: *ImGuiTableSettings): *ImGuiTableColumnSettings <cimport,nodecl> end
global function igGetIO_ContextPtr(ctx: *ImGuiContext): *ImGuiIO <cimport,nodecl> end
global function igGetPlatformIO_ContextPtr(ctx: *ImGuiContext): *ImGuiPlatformIO <cimport,nodecl> end
global function igGetCurrentWindowRead(): *ImGuiWindow <cimport,nodecl> end
global function igGetCurrentWindow(): *ImGuiWindow <cimport,nodecl> end
global function igFindWindowByID(id: ImGuiID): *ImGuiWindow <cimport,nodecl> end
global function igFindWindowByName(name: cstring): *ImGuiWindow <cimport,nodecl> end
global function igUpdateWindowParentAndRootLinks(window: *ImGuiWindow, flags: ImGuiWindowFlags, parent_window: *ImGuiWindow): void <cimport,nodecl> end
global function igUpdateWindowSkipRefresh(window: *ImGuiWindow): void <cimport,nodecl> end
global function igCalcWindowNextAutoFitSize(pOut: *ImVec2, window: *ImGuiWindow): void <cimport,nodecl> end
global function igIsWindowChildOf(window: *ImGuiWindow, potential_parent: *ImGuiWindow, popup_hierarchy: boolean): boolean <cimport,nodecl> end
global function igIsWindowWithinBeginStackOf(window: *ImGuiWindow, potential_parent: *ImGuiWindow): boolean <cimport,nodecl> end
global function igIsWindowAbove(potential_above: *ImGuiWindow, potential_below: *ImGuiWindow): boolean <cimport,nodecl> end
global function igIsWindowNavFocusable(window: *ImGuiWindow): boolean <cimport,nodecl> end
global function igSetWindowPos_WindowPtr(window: *ImGuiWindow, pos: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowSize_WindowPtr(window: *ImGuiWindow, size: ImVec2, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowCollapsed_WindowPtr(window: *ImGuiWindow, collapsed: boolean, cond: ImGuiCond): void <cimport,nodecl> end
global function igSetWindowHitTestHole(window: *ImGuiWindow, pos: ImVec2, size: ImVec2): void <cimport,nodecl> end
global function igSetWindowHiddenAndSkipItemsForCurrentFrame(window: *ImGuiWindow): void <cimport,nodecl> end
global function igSetWindowParentWindowForFocusRoute(window: *ImGuiWindow, parent_window: *ImGuiWindow): void <cimport,nodecl> end
global function igWindowRectAbsToRel(pOut: *ImRect, window: *ImGuiWindow, r: ImRect): void <cimport,nodecl> end
global function igWindowRectRelToAbs(pOut: *ImRect, window: *ImGuiWindow, r: ImRect): void <cimport,nodecl> end
global function igWindowPosAbsToRel(pOut: *ImVec2, window: *ImGuiWindow, p: ImVec2): void <cimport,nodecl> end
global function igWindowPosRelToAbs(pOut: *ImVec2, window: *ImGuiWindow, p: ImVec2): void <cimport,nodecl> end
global function igFocusWindow(window: *ImGuiWindow, flags: ImGuiFocusRequestFlags): void <cimport,nodecl> end
global function igFocusTopMostWindowUnderOne(under_this_window: *ImGuiWindow, ignore_window: *ImGuiWindow, filter_viewport: *ImGuiViewport, flags: ImGuiFocusRequestFlags): void <cimport,nodecl> end
global function igBringWindowToFocusFront(window: *ImGuiWindow): void <cimport,nodecl> end
global function igBringWindowToDisplayFront(window: *ImGuiWindow): void <cimport,nodecl> end
global function igBringWindowToDisplayBack(window: *ImGuiWindow): void <cimport,nodecl> end
global function igBringWindowToDisplayBehind(window: *ImGuiWindow, above_window: *ImGuiWindow): void <cimport,nodecl> end
global function igFindWindowDisplayIndex(window: *ImGuiWindow): cint <cimport,nodecl> end
global function igFindBottomMostVisibleWindowWithinBeginStack(window: *ImGuiWindow): *ImGuiWindow <cimport,nodecl> end
global function igSetNextWindowRefreshPolicy(flags: ImGuiWindowRefreshFlags): void <cimport,nodecl> end
global function igRegisterUserTexture(tex: *ImTextureData): void <cimport,nodecl> end
global function igUnregisterUserTexture(tex: *ImTextureData): void <cimport,nodecl> end
global function igRegisterFontAtlas(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igUnregisterFontAtlas(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igSetCurrentFont(font: *ImFont, font_size_before_scaling: float32, font_size_after_scaling: float32): void <cimport,nodecl> end
global function igUpdateCurrentFontSize(restore_font_size_after_scaling: float32): void <cimport,nodecl> end
global function igSetFontRasterizerDensity(rasterizer_density: float32): void <cimport,nodecl> end
global function igGetFontRasterizerDensity(): float32 <cimport,nodecl> end
global function igGetRoundedFontSize(size: float32): float32 <cimport,nodecl> end
global function igGetDefaultFont(): *ImFont <cimport,nodecl> end
global function igPushPasswordFont(): void <cimport,nodecl> end
global function igPopPasswordFont(): void <cimport,nodecl> end
global function igGetForegroundDrawList_WindowPtr(window: *ImGuiWindow): *ImDrawList <cimport,nodecl> end
global function igGetBackgroundDrawList_ViewportPtr(viewport: *ImGuiViewport): *ImDrawList <cimport,nodecl> end
global function igGetForegroundDrawList_ViewportPtr(viewport: *ImGuiViewport): *ImDrawList <cimport,nodecl> end
global function igAddDrawListToDrawDataEx(draw_data: *ImDrawData, out_list: *ImVector_ImDrawListPtr, draw_list: *ImDrawList): void <cimport,nodecl> end
global function igInitialize(): void <cimport,nodecl> end
global function igShutdown(): void <cimport,nodecl> end
global function igUpdateInputEvents(trickle_fast_inputs: boolean): void <cimport,nodecl> end
global function igUpdateHoveredWindowAndCaptureFlags(mouse_pos: ImVec2): void <cimport,nodecl> end
global function igFindHoveredWindowEx(pos: ImVec2, find_first_and_in_any_viewport: boolean, out_hovered_window: **ImGuiWindow, out_hovered_window_under_moving_window: **ImGuiWindow): void <cimport,nodecl> end
global function igStartMouseMovingWindow(window: *ImGuiWindow): void <cimport,nodecl> end
global function igUpdateMouseMovingWindowNewFrame(): void <cimport,nodecl> end
global function igUpdateMouseMovingWindowEndFrame(): void <cimport,nodecl> end
global function igAddContextHook(context: *ImGuiContext, hook: *ImGuiContextHook): ImGuiID <cimport,nodecl> end
global function igRemoveContextHook(context: *ImGuiContext, hook_to_remove: ImGuiID): void <cimport,nodecl> end
global function igCallContextHooks(context: *ImGuiContext, type: ImGuiContextHookType): void <cimport,nodecl> end
global function igScaleWindowsInViewport(viewport: *ImGuiViewportP, scale: float32): void <cimport,nodecl> end
global function igSetWindowViewport(window: *ImGuiWindow, viewport: *ImGuiViewportP): void <cimport,nodecl> end
global function igMarkIniSettingsDirty_Nil(): void <cimport,nodecl> end
global function igMarkIniSettingsDirty_WindowPtr(window: *ImGuiWindow): void <cimport,nodecl> end
global function igClearIniSettings(): void <cimport,nodecl> end
global function igAddSettingsHandler(handler: *ImGuiSettingsHandler): void <cimport,nodecl> end
global function igRemoveSettingsHandler(type_name: cstring): void <cimport,nodecl> end
global function igFindSettingsHandler(type_name: cstring): *ImGuiSettingsHandler <cimport,nodecl> end
global function igCreateNewWindowSettings(name: cstring): *ImGuiWindowSettings <cimport,nodecl> end
global function igFindWindowSettingsByID(id: ImGuiID): *ImGuiWindowSettings <cimport,nodecl> end
global function igFindWindowSettingsByWindow(window: *ImGuiWindow): *ImGuiWindowSettings <cimport,nodecl> end
global function igClearWindowSettings(name: cstring): void <cimport,nodecl> end
global function igLocalizeRegisterEntries(entries: *ImGuiLocEntry, count: cint): void <cimport,nodecl> end
global function igLocalizeGetMsg(key: ImGuiLocKey): cstring <cimport,nodecl> end
global function igSetScrollX_WindowPtr(window: *ImGuiWindow, scroll_x: float32): void <cimport,nodecl> end
global function igSetScrollY_WindowPtr(window: *ImGuiWindow, scroll_y: float32): void <cimport,nodecl> end
global function igSetScrollFromPosX_WindowPtr(window: *ImGuiWindow, local_x: float32, center_x_ratio: float32): void <cimport,nodecl> end
global function igSetScrollFromPosY_WindowPtr(window: *ImGuiWindow, local_y: float32, center_y_ratio: float32): void <cimport,nodecl> end
global function igScrollToItem(flags: ImGuiScrollFlags): void <cimport,nodecl> end
global function igScrollToRect(window: *ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags): void <cimport,nodecl> end
global function igScrollToRectEx(pOut: *ImVec2, window: *ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags): void <cimport,nodecl> end
global function igScrollToBringRectIntoView(window: *ImGuiWindow, rect: ImRect): void <cimport,nodecl> end
global function igGetItemStatusFlags(): ImGuiItemStatusFlags <cimport,nodecl> end
global function igGetItemFlags(): ImGuiItemFlags <cimport,nodecl> end
global function igGetActiveID(): ImGuiID <cimport,nodecl> end
global function igGetFocusID(): ImGuiID <cimport,nodecl> end
global function igSetActiveID(id: ImGuiID, window: *ImGuiWindow): void <cimport,nodecl> end
global function igSetFocusID(id: ImGuiID, window: *ImGuiWindow): void <cimport,nodecl> end
global function igClearActiveID(): void <cimport,nodecl> end
global function igGetHoveredID(): ImGuiID <cimport,nodecl> end
global function igSetHoveredID(id: ImGuiID): void <cimport,nodecl> end
global function igKeepAliveID(id: ImGuiID): void <cimport,nodecl> end
global function igMarkItemEdited(id: ImGuiID): void <cimport,nodecl> end
global function igPushOverrideID(id: ImGuiID): void <cimport,nodecl> end
global function igGetIDWithSeed_Str(str_id_begin: cstring, str_id_end: cstring, seed: ImGuiID): ImGuiID <cimport,nodecl> end
global function igGetIDWithSeed_Int(n: cint, seed: ImGuiID): ImGuiID <cimport,nodecl> end
global function igItemSize_Vec2(size: ImVec2, text_baseline_y: float32): void <cimport,nodecl> end
global function igItemSize_Rect(bb: ImRect, text_baseline_y: float32): void <cimport,nodecl> end
global function igItemAdd(bb: ImRect, id: ImGuiID, nav_bb: *ImRect, extra_flags: ImGuiItemFlags): boolean <cimport,nodecl> end
global function igItemHoverable(bb: ImRect, id: ImGuiID, item_flags: ImGuiItemFlags): boolean <cimport,nodecl> end
global function igIsWindowContentHoverable(window: *ImGuiWindow, flags: ImGuiHoveredFlags): boolean <cimport,nodecl> end
global function igIsClippedEx(bb: ImRect, id: ImGuiID): boolean <cimport,nodecl> end
global function igSetLastItemData(item_id: ImGuiID, item_flags: ImGuiItemFlags, status_flags: ImGuiItemStatusFlags, item_rect: ImRect): void <cimport,nodecl> end
global function igCalcItemSize(pOut: *ImVec2, size: ImVec2, default_w: float32, default_h: float32): void <cimport,nodecl> end
global function igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: float32): float32 <cimport,nodecl> end
global function igPushMultiItemsWidths(components: cint, width_full: float32): void <cimport,nodecl> end
global function igShrinkWidths(items: *ImGuiShrinkWidthItem, count: cint, width_excess: float32): void <cimport,nodecl> end
global function igGetStyleVarInfo(idx: ImGuiStyleVar): *ImGuiStyleVarInfo <cimport,nodecl> end
global function igBeginDisabledOverrideReenable(): void <cimport,nodecl> end
global function igEndDisabledOverrideReenable(): void <cimport,nodecl> end
global function igLogBegin(flags: ImGuiLogFlags, auto_open_depth: cint): void <cimport,nodecl> end
global function igLogToBuffer(auto_open_depth: cint): void <cimport,nodecl> end
global function igLogRenderedText(ref_pos: *ImVec2, text: cstring, text_end: cstring): void <cimport,nodecl> end
global function igLogSetNextTextDecoration(prefix: cstring, suffix: cstring): void <cimport,nodecl> end
global function igBeginChildEx(name: cstring, id: ImGuiID, size_arg: ImVec2, child_flags: ImGuiChildFlags, window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginPopupEx(id: ImGuiID, extra_window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginPopupMenuEx(id: ImGuiID, label: cstring, extra_window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags): void <cimport,nodecl> end
global function igClosePopupToLevel(remaining: cint, restore_focus_to_window_under_popup: boolean): void <cimport,nodecl> end
global function igClosePopupsOverWindow(ref_window: *ImGuiWindow, restore_focus_to_window_under_popup: boolean): void <cimport,nodecl> end
global function igClosePopupsExceptModals(): void <cimport,nodecl> end
global function igIsPopupOpen_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags): boolean <cimport,nodecl> end
global function igGetPopupAllowedExtentRect(pOut: *ImRect, window: *ImGuiWindow): void <cimport,nodecl> end
global function igGetTopMostPopupModal(): *ImGuiWindow <cimport,nodecl> end
global function igGetTopMostAndVisiblePopupModal(): *ImGuiWindow <cimport,nodecl> end
global function igFindBlockingModal(window: *ImGuiWindow): *ImGuiWindow <cimport,nodecl> end
global function igFindBestWindowPosForPopup(pOut: *ImVec2, window: *ImGuiWindow): void <cimport,nodecl> end
global function igFindBestWindowPosForPopupEx(pOut: *ImVec2, ref_pos: ImVec2, size: ImVec2, last_dir: *ImGuiDir, r_outer: ImRect, r_avoid: ImRect, policy: ImGuiPopupPositionPolicy): void <cimport,nodecl> end
global function igBeginTooltipEx(tooltip_flags: ImGuiTooltipFlags, extra_window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginTooltipHidden(): boolean <cimport,nodecl> end
global function igBeginViewportSideBar(name: cstring, viewport: *ImGuiViewport, dir: ImGuiDir, size: float32, window_flags: ImGuiWindowFlags): boolean <cimport,nodecl> end
global function igBeginMenuEx(label: cstring, icon: cstring, enabled: boolean): boolean <cimport,nodecl> end
global function igMenuItemEx(label: cstring, icon: cstring, shortcut: cstring, selected: boolean, enabled: boolean): boolean <cimport,nodecl> end
global function igBeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags): boolean <cimport,nodecl> end
global function igBeginComboPreview(): boolean <cimport,nodecl> end
global function igEndComboPreview(): void <cimport,nodecl> end
global function igNavInitWindow(window: *ImGuiWindow, force_reinit: boolean): void <cimport,nodecl> end
global function igNavInitRequestApplyResult(): void <cimport,nodecl> end
global function igNavMoveRequestButNoResultYet(): boolean <cimport,nodecl> end
global function igNavMoveRequestSubmit(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags): void <cimport,nodecl> end
global function igNavMoveRequestForward(move_dir: ImGuiDir, clip_dir: ImGuiDir, move_flags: ImGuiNavMoveFlags, scroll_flags: ImGuiScrollFlags): void <cimport,nodecl> end
global function igNavMoveRequestResolveWithLastItem(result: *ImGuiNavItemData): void <cimport,nodecl> end
global function igNavMoveRequestResolveWithPastTreeNode(result: *ImGuiNavItemData, tree_node_data: *ImGuiTreeNodeStackData): void <cimport,nodecl> end
global function igNavMoveRequestCancel(): void <cimport,nodecl> end
global function igNavMoveRequestApplyResult(): void <cimport,nodecl> end
global function igNavMoveRequestTryWrapping(window: *ImGuiWindow, move_flags: ImGuiNavMoveFlags): void <cimport,nodecl> end
global function igNavHighlightActivated(id: ImGuiID): void <cimport,nodecl> end
global function igNavClearPreferredPosForAxis(axis: ImGuiAxis): void <cimport,nodecl> end
global function igSetNavCursorVisibleAfterMove(): void <cimport,nodecl> end
global function igNavUpdateCurrentWindowIsScrollPushableX(): void <cimport,nodecl> end
global function igSetNavWindow(window: *ImGuiWindow): void <cimport,nodecl> end
global function igSetNavID(id: ImGuiID, nav_layer: ImGuiNavLayer, focus_scope_id: ImGuiID, rect_rel: ImRect): void <cimport,nodecl> end
global function igSetNavFocusScope(focus_scope_id: ImGuiID): void <cimport,nodecl> end
global function igFocusItem(): void <cimport,nodecl> end
global function igActivateItemByID(id: ImGuiID): void <cimport,nodecl> end
global function igIsNamedKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsNamedKeyOrMod(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsLegacyKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsKeyboardKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsGamepadKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsMouseKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsAliasKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igIsLRModKey(key: ImGuiKey): boolean <cimport,nodecl> end
global function igFixupKeyChord(key_chord: ImGuiKeyChord): ImGuiKeyChord <cimport,nodecl> end
global function igConvertSingleModFlagToKey(key: ImGuiKey): ImGuiKey <cimport,nodecl> end
global function igGetKeyData_ContextPtr(ctx: *ImGuiContext, key: ImGuiKey): *ImGuiKeyData <cimport,nodecl> end
global function igGetKeyData_Key(key: ImGuiKey): *ImGuiKeyData <cimport,nodecl> end
global function igGetKeyChordName(key_chord: ImGuiKeyChord): cstring <cimport,nodecl> end
global function igMouseButtonToKey(button: ImGuiMouseButton): ImGuiKey <cimport,nodecl> end
global function igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: float32): boolean <cimport,nodecl> end
global function igGetKeyMagnitude2d(pOut: *ImVec2, key_left: ImGuiKey, key_right: ImGuiKey, key_up: ImGuiKey, key_down: ImGuiKey): void <cimport,nodecl> end
global function igGetNavTweakPressedAmount(axis: ImGuiAxis): float32 <cimport,nodecl> end
global function igCalcTypematicRepeatAmount(t0: float32, t1: float32, repeat_delay: float32, repeat_rate: float32): cint <cimport,nodecl> end
global function igGetTypematicRepeatRate(flags: ImGuiInputFlags, repeat_delay: *float32, repeat_rate: *float32): void <cimport,nodecl> end
global function igTeleportMousePos(pos: ImVec2): void <cimport,nodecl> end
global function igSetActiveIdUsingAllKeyboardKeys(): void <cimport,nodecl> end
global function igIsActiveIdUsingNavDir(dir: ImGuiDir): boolean <cimport,nodecl> end
global function igGetKeyOwner(key: ImGuiKey): ImGuiID <cimport,nodecl> end
global function igSetKeyOwner(key: ImGuiKey, owner_id: ImGuiID, flags: ImGuiInputFlags): void <cimport,nodecl> end
global function igSetKeyOwnersForKeyChord(key: ImGuiKeyChord, owner_id: ImGuiID, flags: ImGuiInputFlags): void <cimport,nodecl> end
global function igSetItemKeyOwner_InputFlags(key: ImGuiKey, flags: ImGuiInputFlags): void <cimport,nodecl> end
global function igTestKeyOwner(key: ImGuiKey, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igGetKeyOwnerData(ctx: *ImGuiContext, key: ImGuiKey): *ImGuiKeyOwnerData <cimport,nodecl> end
global function igIsKeyDown_ID(key: ImGuiKey, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsKeyPressed_InputFlags(key: ImGuiKey, flags: ImGuiInputFlags, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsKeyReleased_ID(key: ImGuiKey, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsKeyChordPressed_InputFlags(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsMouseDown_ID(button: ImGuiMouseButton, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsMouseClicked_InputFlags(button: ImGuiMouseButton, flags: ImGuiInputFlags, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsMouseReleased_ID(button: ImGuiMouseButton, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igIsMouseDoubleClicked_ID(button: ImGuiMouseButton, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igShortcut_ID(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igSetShortcutRouting(key_chord: ImGuiKeyChord, flags: ImGuiInputFlags, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igTestShortcutRouting(key_chord: ImGuiKeyChord, owner_id: ImGuiID): boolean <cimport,nodecl> end
global function igGetShortcutRoutingData(key_chord: ImGuiKeyChord): *ImGuiKeyRoutingData <cimport,nodecl> end
global function igPushFocusScope(id: ImGuiID): void <cimport,nodecl> end
global function igPopFocusScope(): void <cimport,nodecl> end
global function igGetCurrentFocusScope(): ImGuiID <cimport,nodecl> end
global function igIsDragDropActive(): boolean <cimport,nodecl> end
global function igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID): boolean <cimport,nodecl> end
global function igClearDragDrop(): void <cimport,nodecl> end
global function igIsDragDropPayloadBeingAccepted(): boolean <cimport,nodecl> end
global function igRenderDragDropTargetRect(bb: ImRect, item_clip_rect: ImRect): void <cimport,nodecl> end
global function igGetTypingSelectRequest(flags: ImGuiTypingSelectFlags): *ImGuiTypingSelectRequest <cimport,nodecl> end
global function igTypingSelectFindMatch(req: *ImGuiTypingSelectRequest, items_count: cint, get_item_name_func: function(a1: pointer, a2: cint): cstring, user_data: pointer, nav_item_idx: cint): cint <cimport,nodecl> end
global function igTypingSelectFindNextSingleCharMatch(req: *ImGuiTypingSelectRequest, items_count: cint, get_item_name_func: function(a1: pointer, a2: cint): cstring, user_data: pointer, nav_item_idx: cint): cint <cimport,nodecl> end
global function igTypingSelectFindBestLeadingMatch(req: *ImGuiTypingSelectRequest, items_count: cint, get_item_name_func: function(a1: pointer, a2: cint): cstring, user_data: pointer): cint <cimport,nodecl> end
global function igBeginBoxSelect(scope_rect: ImRect, window: *ImGuiWindow, box_select_id: ImGuiID, ms_flags: ImGuiMultiSelectFlags): boolean <cimport,nodecl> end
global function igEndBoxSelect(scope_rect: ImRect, ms_flags: ImGuiMultiSelectFlags): void <cimport,nodecl> end
global function igMultiSelectItemHeader(id: ImGuiID, p_selected: *boolean, p_button_flags: *ImGuiButtonFlags): void <cimport,nodecl> end
global function igMultiSelectItemFooter(id: ImGuiID, p_selected: *boolean, p_pressed: *boolean): void <cimport,nodecl> end
global function igMultiSelectAddSetAll(ms: *ImGuiMultiSelectTempData, selected: boolean): void <cimport,nodecl> end
global function igMultiSelectAddSetRange(ms: *ImGuiMultiSelectTempData, selected: boolean, range_dir: cint, first_item: ImGuiSelectionUserData, last_item: ImGuiSelectionUserData): void <cimport,nodecl> end
global function igGetBoxSelectState(id: ImGuiID): *ImGuiBoxSelectState <cimport,nodecl> end
global function igGetMultiSelectState(id: ImGuiID): *ImGuiMultiSelectState <cimport,nodecl> end
global function igSetWindowClipRectBeforeSetChannel(window: *ImGuiWindow, clip_rect: ImRect): void <cimport,nodecl> end
global function igBeginColumns(str_id: cstring, count: cint, flags: ImGuiOldColumnFlags): void <cimport,nodecl> end
global function igEndColumns(): void <cimport,nodecl> end
global function igPushColumnClipRect(column_index: cint): void <cimport,nodecl> end
global function igPushColumnsBackground(): void <cimport,nodecl> end
global function igPopColumnsBackground(): void <cimport,nodecl> end
global function igGetColumnsID(str_id: cstring, count: cint): ImGuiID <cimport,nodecl> end
global function igFindOrCreateColumns(window: *ImGuiWindow, id: ImGuiID): *ImGuiOldColumns <cimport,nodecl> end
global function igGetColumnOffsetFromNorm(columns: *ImGuiOldColumns, offset_norm: float32): float32 <cimport,nodecl> end
global function igGetColumnNormFromOffset(columns: *ImGuiOldColumns, offset: float32): float32 <cimport,nodecl> end
global function igTableOpenContextMenu(column_n: cint): void <cimport,nodecl> end
global function igTableSetColumnWidth(column_n: cint, width: float32): void <cimport,nodecl> end
global function igTableSetColumnSortDirection(column_n: cint, sort_direction: ImGuiSortDirection, append_to_sort_specs: boolean): void <cimport,nodecl> end
global function igTableGetHoveredRow(): cint <cimport,nodecl> end
global function igTableGetHeaderRowHeight(): float32 <cimport,nodecl> end
global function igTableGetHeaderAngledMaxLabelWidth(): float32 <cimport,nodecl> end
global function igTablePushBackgroundChannel(): void <cimport,nodecl> end
global function igTablePopBackgroundChannel(): void <cimport,nodecl> end
global function igTablePushColumnChannel(column_n: cint): void <cimport,nodecl> end
global function igTablePopColumnChannel(): void <cimport,nodecl> end
global function igTableAngledHeadersRowEx(row_id: ImGuiID, angle: float32, max_label_width: float32, data: *ImGuiTableHeaderData, data_count: cint): void <cimport,nodecl> end
global function igGetCurrentTable(): *ImGuiTable <cimport,nodecl> end
global function igTableFindByID(id: ImGuiID): *ImGuiTable <cimport,nodecl> end
global function igBeginTableEx(name: cstring, id: ImGuiID, columns_count: cint, flags: ImGuiTableFlags, outer_size: ImVec2, inner_width: float32): boolean <cimport,nodecl> end
global function igTableBeginInitMemory(table: *ImGuiTable, columns_count: cint): void <cimport,nodecl> end
global function igTableBeginApplyRequests(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableSetupDrawChannels(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableUpdateLayout(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableUpdateBorders(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableUpdateColumnsWeightFromWidth(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableDrawBorders(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableDrawDefaultContextMenu(table: *ImGuiTable, flags_for_section_to_display: ImGuiTableFlags): void <cimport,nodecl> end
global function igTableBeginContextMenuPopup(table: *ImGuiTable): boolean <cimport,nodecl> end
global function igTableMergeDrawChannels(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGetInstanceData(table: *ImGuiTable, instance_no: cint): *ImGuiTableInstanceData <cimport,nodecl> end
global function igTableGetInstanceID(table: *ImGuiTable, instance_no: cint): ImGuiID <cimport,nodecl> end
global function igTableSortSpecsSanitize(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableSortSpecsBuild(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGetColumnNextSortDirection(column: *ImGuiTableColumn): ImGuiSortDirection <cimport,nodecl> end
global function igTableFixColumnSortDirection(table: *ImGuiTable, column: *ImGuiTableColumn): void <cimport,nodecl> end
global function igTableGetColumnWidthAuto(table: *ImGuiTable, column: *ImGuiTableColumn): float32 <cimport,nodecl> end
global function igTableBeginRow(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableEndRow(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableBeginCell(table: *ImGuiTable, column_n: cint): void <cimport,nodecl> end
global function igTableEndCell(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGetCellBgRect(pOut: *ImRect, table: *ImGuiTable, column_n: cint): void <cimport,nodecl> end
global function igTableGetColumnName_TablePtr(table: *ImGuiTable, column_n: cint): cstring <cimport,nodecl> end
global function igTableGetColumnResizeID(table: *ImGuiTable, column_n: cint, instance_no: cint): ImGuiID <cimport,nodecl> end
global function igTableCalcMaxColumnWidth(table: *ImGuiTable, column_n: cint): float32 <cimport,nodecl> end
global function igTableSetColumnWidthAutoSingle(table: *ImGuiTable, column_n: cint): void <cimport,nodecl> end
global function igTableSetColumnWidthAutoAll(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableRemove(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGcCompactTransientBuffers_TablePtr(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGcCompactTransientBuffers_TableTempDataPtr(table: *ImGuiTableTempData): void <cimport,nodecl> end
global function igTableGcCompactSettings(): void <cimport,nodecl> end
global function igTableLoadSettings(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableSaveSettings(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableResetSettings(table: *ImGuiTable): void <cimport,nodecl> end
global function igTableGetBoundSettings(table: *ImGuiTable): *ImGuiTableSettings <cimport,nodecl> end
global function igTableSettingsAddSettingsHandler(): void <cimport,nodecl> end
global function igTableSettingsCreate(id: ImGuiID, columns_count: cint): *ImGuiTableSettings <cimport,nodecl> end
global function igTableSettingsFindByID(id: ImGuiID): *ImGuiTableSettings <cimport,nodecl> end
global function igGetCurrentTabBar(): *ImGuiTabBar <cimport,nodecl> end
global function igBeginTabBarEx(tab_bar: *ImGuiTabBar, bb: ImRect, flags: ImGuiTabBarFlags): boolean <cimport,nodecl> end
global function igTabBarFindTabByID(tab_bar: *ImGuiTabBar, tab_id: ImGuiID): *ImGuiTabItem <cimport,nodecl> end
global function igTabBarFindTabByOrder(tab_bar: *ImGuiTabBar, order: cint): *ImGuiTabItem <cimport,nodecl> end
global function igTabBarGetCurrentTab(tab_bar: *ImGuiTabBar): *ImGuiTabItem <cimport,nodecl> end
global function igTabBarGetTabOrder(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem): cint <cimport,nodecl> end
global function igTabBarGetTabName(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem): cstring <cimport,nodecl> end
global function igTabBarRemoveTab(tab_bar: *ImGuiTabBar, tab_id: ImGuiID): void <cimport,nodecl> end
global function igTabBarCloseTab(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem): void <cimport,nodecl> end
global function igTabBarQueueFocus_TabItemPtr(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem): void <cimport,nodecl> end
global function igTabBarQueueFocus_Str(tab_bar: *ImGuiTabBar, tab_name: cstring): void <cimport,nodecl> end
global function igTabBarQueueReorder(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem, offset: cint): void <cimport,nodecl> end
global function igTabBarQueueReorderFromMousePos(tab_bar: *ImGuiTabBar, tab: *ImGuiTabItem, mouse_pos: ImVec2): void <cimport,nodecl> end
global function igTabBarProcessReorder(tab_bar: *ImGuiTabBar): boolean <cimport,nodecl> end
global function igTabItemEx(tab_bar: *ImGuiTabBar, label: cstring, p_open: *boolean, flags: ImGuiTabItemFlags, docked_window: *ImGuiWindow): boolean <cimport,nodecl> end
global function igTabItemSpacing(str_id: cstring, flags: ImGuiTabItemFlags, width: float32): void <cimport,nodecl> end
global function igTabItemCalcSize_Str(pOut: *ImVec2, label: cstring, has_close_button_or_unsaved_marker: boolean): void <cimport,nodecl> end
global function igTabItemCalcSize_WindowPtr(pOut: *ImVec2, window: *ImGuiWindow): void <cimport,nodecl> end
global function igTabItemBackground(draw_list: *ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, col: ImU32): void <cimport,nodecl> end
global function igTabItemLabelAndCloseButton(draw_list: *ImDrawList, bb: ImRect, flags: ImGuiTabItemFlags, frame_padding: ImVec2, label: cstring, tab_id: ImGuiID, close_button_id: ImGuiID, is_contents_visible: boolean, out_just_closed: *boolean, out_text_clipped: *boolean): void <cimport,nodecl> end
global function igRenderText(pos: ImVec2, text: cstring, text_end: cstring, hide_text_after_hash: boolean): void <cimport,nodecl> end
global function igRenderTextWrapped(pos: ImVec2, text: cstring, text_end: cstring, wrap_width: float32): void <cimport,nodecl> end
global function igRenderTextClipped(pos_min: ImVec2, pos_max: ImVec2, text: cstring, text_end: cstring, text_size_if_known: *ImVec2, align: ImVec2, clip_rect: *ImRect): void <cimport,nodecl> end
global function igRenderTextClippedEx(draw_list: *ImDrawList, pos_min: ImVec2, pos_max: ImVec2, text: cstring, text_end: cstring, text_size_if_known: *ImVec2, align: ImVec2, clip_rect: *ImRect): void <cimport,nodecl> end
global function igRenderTextEllipsis(draw_list: *ImDrawList, pos_min: ImVec2, pos_max: ImVec2, ellipsis_max_x: float32, text: cstring, text_end: cstring, text_size_if_known: *ImVec2): void <cimport,nodecl> end
global function igRenderFrame(p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, borders: boolean, rounding: float32): void <cimport,nodecl> end
global function igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: float32): void <cimport,nodecl> end
global function igRenderColorRectWithAlphaCheckerboard(draw_list: *ImDrawList, p_min: ImVec2, p_max: ImVec2, fill_col: ImU32, grid_step: float32, grid_off: ImVec2, rounding: float32, flags: ImDrawFlags): void <cimport,nodecl> end
global function igRenderNavCursor(bb: ImRect, id: ImGuiID, flags: ImGuiNavRenderCursorFlags): void <cimport,nodecl> end
global function igFindRenderedTextEnd(text: cstring, text_end: cstring): cstring <cimport,nodecl> end
global function igRenderMouseCursor(pos: ImVec2, scale: float32, mouse_cursor: ImGuiMouseCursor, col_fill: ImU32, col_border: ImU32, col_shadow: ImU32): void <cimport,nodecl> end
global function igRenderArrow(draw_list: *ImDrawList, pos: ImVec2, col: ImU32, dir: ImGuiDir, scale: float32): void <cimport,nodecl> end
global function igRenderBullet(draw_list: *ImDrawList, pos: ImVec2, col: ImU32): void <cimport,nodecl> end
global function igRenderCheckMark(draw_list: *ImDrawList, pos: ImVec2, col: ImU32, sz: float32): void <cimport,nodecl> end
global function igRenderArrowPointingAt(draw_list: *ImDrawList, pos: ImVec2, half_sz: ImVec2, direction: ImGuiDir, col: ImU32): void <cimport,nodecl> end
global function igRenderRectFilledRangeH(draw_list: *ImDrawList, rect: ImRect, col: ImU32, x_start_norm: float32, x_end_norm: float32, rounding: float32): void <cimport,nodecl> end
global function igRenderRectFilledWithHole(draw_list: *ImDrawList, outer: ImRect, inner: ImRect, col: ImU32, rounding: float32): void <cimport,nodecl> end
global function igTextEx(text: cstring, text_end: cstring, flags: ImGuiTextFlags): void <cimport,nodecl> end
global function igTextAligned(align_x: float32, size_x: float32, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igTextAlignedV(align_x: float32, size_x: float32, fmt: cstring, args: cvalist): void <cimport,nodecl> end
global function igButtonEx(label: cstring, size_arg: ImVec2, flags: ImGuiButtonFlags): boolean <cimport,nodecl> end
global function igArrowButtonEx(str_id: cstring, dir: ImGuiDir, size_arg: ImVec2, flags: ImGuiButtonFlags): boolean <cimport,nodecl> end
global function igImageButtonEx(id: ImGuiID, tex_ref: ImTextureRef, image_size: ImVec2, uv0: ImVec2, uv1: ImVec2, bg_col: ImVec4, tint_col: ImVec4, flags: ImGuiButtonFlags): boolean <cimport,nodecl> end
global function igSeparatorEx(flags: ImGuiSeparatorFlags, thickness: float32): void <cimport,nodecl> end
global function igSeparatorTextEx(id: ImGuiID, label: cstring, label_end: cstring, extra_width: float32): void <cimport,nodecl> end
global function igCheckboxFlags_S64Ptr(label: cstring, flags: *ImS64, flags_value: ImS64): boolean <cimport,nodecl> end
global function igCheckboxFlags_U64Ptr(label: cstring, flags: *ImU64, flags_value: ImU64): boolean <cimport,nodecl> end
global function igCloseButton(id: ImGuiID, pos: ImVec2): boolean <cimport,nodecl> end
global function igCollapseButton(id: ImGuiID, pos: ImVec2): boolean <cimport,nodecl> end
global function igScrollbar(axis: ImGuiAxis): void <cimport,nodecl> end
global function igScrollbarEx(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, p_scroll_v: *ImS64, avail_v: ImS64, contents_v: ImS64, draw_rounding_flags: ImDrawFlags): boolean <cimport,nodecl> end
global function igGetWindowScrollbarRect(pOut: *ImRect, window: *ImGuiWindow, axis: ImGuiAxis): void <cimport,nodecl> end
global function igGetWindowScrollbarID(window: *ImGuiWindow, axis: ImGuiAxis): ImGuiID <cimport,nodecl> end
global function igGetWindowResizeCornerID(window: *ImGuiWindow, n: cint): ImGuiID <cimport,nodecl> end
global function igGetWindowResizeBorderID(window: *ImGuiWindow, dir: ImGuiDir): ImGuiID <cimport,nodecl> end
global function igButtonBehavior(bb: ImRect, id: ImGuiID, out_hovered: *boolean, out_held: *boolean, flags: ImGuiButtonFlags): boolean <cimport,nodecl> end
global function igDragBehavior(id: ImGuiID, data_type: ImGuiDataType, p_v: pointer, v_speed: float32, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags): boolean <cimport,nodecl> end
global function igSliderBehavior(bb: ImRect, id: ImGuiID, data_type: ImGuiDataType, p_v: pointer, p_min: pointer, p_max: pointer, format: cstring, flags: ImGuiSliderFlags, out_grab_bb: *ImRect): boolean <cimport,nodecl> end
global function igSplitterBehavior(bb: ImRect, id: ImGuiID, axis: ImGuiAxis, size1: *float32, size2: *float32, min_size1: float32, min_size2: float32, hover_extend: float32, hover_visibility_delay: float32, bg_col: ImU32): boolean <cimport,nodecl> end
global function igTreeNodeBehavior(id: ImGuiID, flags: ImGuiTreeNodeFlags, label: cstring, label_end: cstring): boolean <cimport,nodecl> end
global function igTreeNodeDrawLineToChildNode(target_pos: ImVec2): void <cimport,nodecl> end
global function igTreeNodeDrawLineToTreePop(data: *ImGuiTreeNodeStackData): void <cimport,nodecl> end
global function igTreePushOverrideID(id: ImGuiID): void <cimport,nodecl> end
global function igTreeNodeGetOpen(storage_id: ImGuiID): boolean <cimport,nodecl> end
global function igTreeNodeSetOpen(storage_id: ImGuiID, open: boolean): void <cimport,nodecl> end
global function igTreeNodeUpdateNextOpen(storage_id: ImGuiID, flags: ImGuiTreeNodeFlags): boolean <cimport,nodecl> end
global function igDataTypeGetInfo(data_type: ImGuiDataType): *ImGuiDataTypeInfo <cimport,nodecl> end
global function igDataTypeFormatString(buf: cstring, buf_size: cint, data_type: ImGuiDataType, p_data: pointer, format: cstring): cint <cimport,nodecl> end
global function igDataTypeApplyOp(data_type: ImGuiDataType, op: cint, output: pointer, arg_1: pointer, arg_2: pointer): void <cimport,nodecl> end
global function igDataTypeApplyFromText(buf: cstring, data_type: ImGuiDataType, p_data: pointer, format: cstring, p_data_when_empty: pointer): boolean <cimport,nodecl> end
global function igDataTypeCompare(data_type: ImGuiDataType, arg_1: pointer, arg_2: pointer): cint <cimport,nodecl> end
global function igDataTypeClamp(data_type: ImGuiDataType, p_data: pointer, p_min: pointer, p_max: pointer): boolean <cimport,nodecl> end
global function igDataTypeIsZero(data_type: ImGuiDataType, p_data: pointer): boolean <cimport,nodecl> end
global function igInputTextEx(label: cstring, hint: cstring, buf: cstring, buf_size: cint, size_arg: ImVec2, flags: ImGuiInputTextFlags, callback: ImGuiInputTextCallback, user_data: pointer): boolean <cimport,nodecl> end
global function igInputTextDeactivateHook(id: ImGuiID): void <cimport,nodecl> end
global function igTempInputText(bb: ImRect, id: ImGuiID, label: cstring, buf: cstring, buf_size: cint, flags: ImGuiInputTextFlags): boolean <cimport,nodecl> end
global function igTempInputScalar(bb: ImRect, id: ImGuiID, label: cstring, data_type: ImGuiDataType, p_data: pointer, format: cstring, p_clamp_min: pointer, p_clamp_max: pointer): boolean <cimport,nodecl> end
global function igTempInputIsActive(id: ImGuiID): boolean <cimport,nodecl> end
global function igGetInputTextState(id: ImGuiID): *ImGuiInputTextState <cimport,nodecl> end
global function igSetNextItemRefVal(data_type: ImGuiDataType, p_data: pointer): void <cimport,nodecl> end
global function igIsItemActiveAsInputText(): boolean <cimport,nodecl> end
global function igColorTooltip(text: cstring, col: *float32, flags: ImGuiColorEditFlags): void <cimport,nodecl> end
global function igColorEditOptionsPopup(col: *float32, flags: ImGuiColorEditFlags): void <cimport,nodecl> end
global function igColorPickerOptionsPopup(ref_col: *float32, flags: ImGuiColorEditFlags): void <cimport,nodecl> end
global function igPlotEx(plot_type: ImGuiPlotType, label: cstring, values_getter: function(data: pointer, idx: cint): float32, data: pointer, values_count: cint, values_offset: cint, overlay_text: cstring, scale_min: float32, scale_max: float32, size_arg: ImVec2): cint <cimport,nodecl> end
global function igShadeVertsLinearColorGradientKeepAlpha(draw_list: *ImDrawList, vert_start_idx: cint, vert_end_idx: cint, gradient_p0: ImVec2, gradient_p1: ImVec2, col0: ImU32, col1: ImU32): void <cimport,nodecl> end
global function igShadeVertsLinearUV(draw_list: *ImDrawList, vert_start_idx: cint, vert_end_idx: cint, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, clamp: boolean): void <cimport,nodecl> end
global function igShadeVertsTransformPos(draw_list: *ImDrawList, vert_start_idx: cint, vert_end_idx: cint, pivot_in: ImVec2, cos_a: float32, sin_a: float32, pivot_out: ImVec2): void <cimport,nodecl> end
global function igGcCompactTransientMiscBuffers(): void <cimport,nodecl> end
global function igGcCompactTransientWindowBuffers(window: *ImGuiWindow): void <cimport,nodecl> end
global function igGcAwakeTransientWindowBuffers(window: *ImGuiWindow): void <cimport,nodecl> end
global function igErrorLog(msg: cstring): boolean <cimport,nodecl> end
global function igErrorRecoveryStoreState(state_out: *ImGuiErrorRecoveryState): void <cimport,nodecl> end
global function igErrorRecoveryTryToRecoverState(state_in: *ImGuiErrorRecoveryState): void <cimport,nodecl> end
global function igErrorRecoveryTryToRecoverWindowState(state_in: *ImGuiErrorRecoveryState): void <cimport,nodecl> end
global function igErrorCheckUsingSetCursorPosToExtendParentBoundaries(): void <cimport,nodecl> end
global function igErrorCheckEndFrameFinalizeErrorTooltip(): void <cimport,nodecl> end
global function igBeginErrorTooltip(): boolean <cimport,nodecl> end
global function igEndErrorTooltip(): void <cimport,nodecl> end
global function igDebugAllocHook(info: *ImGuiDebugAllocInfo, frame_count: cint, ptr: pointer, size: csize): void <cimport,nodecl> end
global function igDebugDrawCursorPos(col: ImU32): void <cimport,nodecl> end
global function igDebugDrawLineExtents(col: ImU32): void <cimport,nodecl> end
global function igDebugDrawItemRect(col: ImU32): void <cimport,nodecl> end
global function igDebugTextUnformattedWithLocateItem(line_begin: cstring, line_end: cstring): void <cimport,nodecl> end
global function igDebugLocateItem(target_id: ImGuiID): void <cimport,nodecl> end
global function igDebugLocateItemOnHover(target_id: ImGuiID): void <cimport,nodecl> end
global function igDebugLocateItemResolveWithLastItem(): void <cimport,nodecl> end
global function igDebugBreakClearData(): void <cimport,nodecl> end
global function igDebugBreakButton(label: cstring, description_of_location: cstring): boolean <cimport,nodecl> end
global function igDebugBreakButtonTooltip(keyboard_only: boolean, description_of_location: cstring): void <cimport,nodecl> end
global function igShowFontAtlas(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igDebugHookIdInfo(id: ImGuiID, data_type: ImGuiDataType, data_id: pointer, data_id_end: pointer): void <cimport,nodecl> end
global function igDebugNodeColumns(columns: *ImGuiOldColumns): void <cimport,nodecl> end
global function igDebugNodeDrawList(window: *ImGuiWindow, viewport: *ImGuiViewportP, draw_list: *ImDrawList, label: cstring): void <cimport,nodecl> end
global function igDebugNodeDrawCmdShowMeshAndBoundingBox(out_draw_list: *ImDrawList, draw_list: *ImDrawList, draw_cmd: *ImDrawCmd, show_mesh: boolean, show_aabb: boolean): void <cimport,nodecl> end
global function igDebugNodeFont(font: *ImFont): void <cimport,nodecl> end
global function igDebugNodeFontGlyphesForSrcMask(font: *ImFont, baked: *ImFontBaked, src_mask: cint): void <cimport,nodecl> end
global function igDebugNodeFontGlyph(font: *ImFont, glyph: *ImFontGlyph): void <cimport,nodecl> end
global function igDebugNodeTexture(tex: *ImTextureData, int_id: cint, highlight_rect: *ImFontAtlasRect): void <cimport,nodecl> end
global function igDebugNodeStorage(storage: *ImGuiStorage, label: cstring): void <cimport,nodecl> end
global function igDebugNodeTabBar(tab_bar: *ImGuiTabBar, label: cstring): void <cimport,nodecl> end
global function igDebugNodeTable(table: *ImGuiTable): void <cimport,nodecl> end
global function igDebugNodeTableSettings(settings: *ImGuiTableSettings): void <cimport,nodecl> end
global function igDebugNodeInputTextState(state: *ImGuiInputTextState): void <cimport,nodecl> end
global function igDebugNodeTypingSelectState(state: *ImGuiTypingSelectState): void <cimport,nodecl> end
global function igDebugNodeMultiSelectState(state: *ImGuiMultiSelectState): void <cimport,nodecl> end
global function igDebugNodeWindow(window: *ImGuiWindow, label: cstring): void <cimport,nodecl> end
global function igDebugNodeWindowSettings(settings: *ImGuiWindowSettings): void <cimport,nodecl> end
global function igDebugNodeWindowsList(windows: *ImVector_ImGuiWindowPtr, label: cstring): void <cimport,nodecl> end
global function igDebugNodeWindowsListByBeginStackParent(windows: **ImGuiWindow, windows_size: cint, parent_in_begin_stack: *ImGuiWindow): void <cimport,nodecl> end
global function igDebugNodeViewport(viewport: *ImGuiViewportP): void <cimport,nodecl> end
global function igDebugRenderKeyboardPreview(draw_list: *ImDrawList): void <cimport,nodecl> end
global function igDebugRenderViewportThumbnail(draw_list: *ImDrawList, viewport: *ImGuiViewportP, bb: ImRect): void <cimport,nodecl> end
global function ImFontLoader_ImFontLoader(): *ImFontLoader <cimport,nodecl> end
global function ImFontLoader_destroy(self: *ImFontLoader): void <cimport,nodecl> end
global function igImFontAtlasGetFontLoaderForStbTruetype(): *ImFontLoader <cimport,nodecl> end
global function igImFontAtlasRectId_GetIndex(id: ImFontAtlasRectId): cint <cimport,nodecl> end
global function igImFontAtlasRectId_GetGeneration(id: ImFontAtlasRectId): cint <cimport,nodecl> end
global function igImFontAtlasRectId_Make(index_idx: cint, gen_idx: cint): ImFontAtlasRectId <cimport,nodecl> end
global function ImFontAtlasBuilder_ImFontAtlasBuilder(): *ImFontAtlasBuilder <cimport,nodecl> end
global function ImFontAtlasBuilder_destroy(self: *ImFontAtlasBuilder): void <cimport,nodecl> end
global function igImFontAtlasBuildInit(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildDestroy(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildMain(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildSetupFontLoader(atlas: *ImFontAtlas, font_loader: *ImFontLoader): void <cimport,nodecl> end
global function igImFontAtlasBuildUpdatePointers(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildRenderBitmapFromString(atlas: *ImFontAtlas, x: cint, y: cint, w: cint, h: cint, in_str: cstring, in_marker_char: cchar): void <cimport,nodecl> end
global function igImFontAtlasBuildClear(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasTextureAdd(atlas: *ImFontAtlas, w: cint, h: cint): *ImTextureData <cimport,nodecl> end
global function igImFontAtlasTextureMakeSpace(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasTextureRepack(atlas: *ImFontAtlas, w: cint, h: cint): void <cimport,nodecl> end
global function igImFontAtlasTextureGrow(atlas: *ImFontAtlas, old_w: cint, old_h: cint): void <cimport,nodecl> end
global function igImFontAtlasTextureCompact(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasTextureGetSizeEstimate(pOut: *ImVec2i, atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildSetupFontSpecialGlyphs(atlas: *ImFontAtlas, font: *ImFont, src: *ImFontConfig): void <cimport,nodecl> end
global function igImFontAtlasBuildLegacyPreloadAllGlyphRanges(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasBuildGetOversampleFactors(src: *ImFontConfig, baked: *ImFontBaked, out_oversample_h: *cint, out_oversample_v: *cint): void <cimport,nodecl> end
global function igImFontAtlasBuildDiscardBakes(atlas: *ImFontAtlas, unused_frames: cint): void <cimport,nodecl> end
global function igImFontAtlasFontSourceInit(atlas: *ImFontAtlas, src: *ImFontConfig): boolean <cimport,nodecl> end
global function igImFontAtlasFontSourceAddToFont(atlas: *ImFontAtlas, font: *ImFont, src: *ImFontConfig): void <cimport,nodecl> end
global function igImFontAtlasFontDestroySourceData(atlas: *ImFontAtlas, src: *ImFontConfig): void <cimport,nodecl> end
global function igImFontAtlasFontInitOutput(atlas: *ImFontAtlas, font: *ImFont): boolean <cimport,nodecl> end
global function igImFontAtlasFontDestroyOutput(atlas: *ImFontAtlas, font: *ImFont): void <cimport,nodecl> end
global function igImFontAtlasFontDiscardBakes(atlas: *ImFontAtlas, font: *ImFont, unused_frames: cint): void <cimport,nodecl> end
global function igImFontAtlasBakedGetId(font_id: ImGuiID, baked_size: float32, rasterizer_density: float32): ImGuiID <cimport,nodecl> end
global function igImFontAtlasBakedGetOrAdd(atlas: *ImFontAtlas, font: *ImFont, font_size: float32, font_rasterizer_density: float32): *ImFontBaked <cimport,nodecl> end
global function igImFontAtlasBakedGetClosestMatch(atlas: *ImFontAtlas, font: *ImFont, font_size: float32, font_rasterizer_density: float32): *ImFontBaked <cimport,nodecl> end
global function igImFontAtlasBakedAdd(atlas: *ImFontAtlas, font: *ImFont, font_size: float32, font_rasterizer_density: float32, baked_id: ImGuiID): *ImFontBaked <cimport,nodecl> end
global function igImFontAtlasBakedDiscard(atlas: *ImFontAtlas, font: *ImFont, baked: *ImFontBaked): void <cimport,nodecl> end
global function igImFontAtlasBakedAddFontGlyph(atlas: *ImFontAtlas, baked: *ImFontBaked, src: *ImFontConfig, in_glyph: *ImFontGlyph): *ImFontGlyph <cimport,nodecl> end
global function igImFontAtlasBakedAddFontGlyphAdvancedX(atlas: *ImFontAtlas, baked: *ImFontBaked, src: *ImFontConfig, codepoint: ImWchar, advance_x: float32): void <cimport,nodecl> end
global function igImFontAtlasBakedDiscardFontGlyph(atlas: *ImFontAtlas, font: *ImFont, baked: *ImFontBaked, glyph: *ImFontGlyph): void <cimport,nodecl> end
global function igImFontAtlasBakedSetFontGlyphBitmap(atlas: *ImFontAtlas, baked: *ImFontBaked, src: *ImFontConfig, glyph: *ImFontGlyph, r: *ImTextureRect, src_pixels: *cuchar, src_fmt: ImTextureFormat, src_pitch: cint): void <cimport,nodecl> end
global function igImFontAtlasPackInit(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasPackAddRect(atlas: *ImFontAtlas, w: cint, h: cint, overwrite_entry: *ImFontAtlasRectEntry): ImFontAtlasRectId <cimport,nodecl> end
global function igImFontAtlasPackGetRect(atlas: *ImFontAtlas, id: ImFontAtlasRectId): *ImTextureRect <cimport,nodecl> end
global function igImFontAtlasPackGetRectSafe(atlas: *ImFontAtlas, id: ImFontAtlasRectId): *ImTextureRect <cimport,nodecl> end
global function igImFontAtlasPackDiscardRect(atlas: *ImFontAtlas, id: ImFontAtlasRectId): void <cimport,nodecl> end
global function igImFontAtlasUpdateNewFrame(atlas: *ImFontAtlas, frame_count: cint, renderer_has_textures: boolean): void <cimport,nodecl> end
global function igImFontAtlasAddDrawListSharedData(atlas: *ImFontAtlas, data: *ImDrawListSharedData): void <cimport,nodecl> end
global function igImFontAtlasRemoveDrawListSharedData(atlas: *ImFontAtlas, data: *ImDrawListSharedData): void <cimport,nodecl> end
global function igImFontAtlasUpdateDrawListsTextures(atlas: *ImFontAtlas, old_tex: ImTextureRef, new_tex: ImTextureRef): void <cimport,nodecl> end
global function igImFontAtlasUpdateDrawListsSharedData(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockConvert(src_pixels: *cuchar, src_fmt: ImTextureFormat, src_pitch: cint, dst_pixels: *cuchar, dst_fmt: ImTextureFormat, dst_pitch: cint, w: cint, h: cint): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockPostProcess(data: *ImFontAtlasPostProcessData): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockPostProcessMultiply(data: *ImFontAtlasPostProcessData, multiply_factor: float32): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockFill(dst_tex: *ImTextureData, dst_x: cint, dst_y: cint, w: cint, h: cint, col: ImU32): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockCopy(src_tex: *ImTextureData, src_x: cint, src_y: cint, dst_tex: *ImTextureData, dst_x: cint, dst_y: cint, w: cint, h: cint): void <cimport,nodecl> end
global function igImFontAtlasTextureBlockQueueUpload(atlas: *ImFontAtlas, tex: *ImTextureData, x: cint, y: cint, w: cint, h: cint): void <cimport,nodecl> end
global function igImTextureDataGetFormatBytesPerPixel(format: ImTextureFormat): cint <cimport,nodecl> end
global function igImTextureDataGetStatusName(status: ImTextureStatus): cstring <cimport,nodecl> end
global function igImTextureDataGetFormatName(format: ImTextureFormat): cstring <cimport,nodecl> end
global function igImFontAtlasDebugLogTextureRequests(atlas: *ImFontAtlas): void <cimport,nodecl> end
global function igImFontAtlasGetMouseCursorTexData(atlas: *ImFontAtlas, cursor_type: ImGuiMouseCursor, out_offset: *ImVec2, out_size: *ImVec2, out_uv_border: *[2]ImVec2, out_uv_fill: *[2]ImVec2): boolean <cimport,nodecl> end
global function ImGuiTextBuffer_appendf(self: *ImGuiTextBuffer, fmt: cstring, ...: cvarargs): void <cimport,nodecl> end
global function igGET_FLT_MAX(): float32 <cimport,nodecl> end
global function igGET_FLT_MIN(): float32 <cimport,nodecl> end
global function ImVector_ImWchar_create(): *ImVector_ImWchar <cimport,nodecl> end
global function ImVector_ImWchar_destroy(self: *ImVector_ImWchar): void <cimport,nodecl> end
global function ImVector_ImWchar_Init(p: *ImVector_ImWchar): void <cimport,nodecl> end
global function ImVector_ImWchar_UnInit(p: *ImVector_ImWchar): void <cimport,nodecl> end
global ImDrawIdx: type = cuint
